
ADC_Board_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005da4  08005da4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da4  08005da4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000088  08005e34  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08005e34  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc90  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d66  00000000  00000000  0002cd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  0002eaa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  0002f128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fa55  00000000  00000000  0002f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008095  00000000  00000000  0003f125  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004df2e  00000000  00000000  000471ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000950e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019a8  00000000  00000000  00095164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c10 	.word	0x08005c10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08005c10 	.word	0x08005c10

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fdd3 	bl	8001ddc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fd2b 	bl	8001c9c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fdc5 	bl	8001ddc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fdbb 	bl	8001ddc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fd4d 	bl	8001d14 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fd43 	bl	8001d14 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb55 	bl	8000954 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fad7 	bl	8000868 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb47 	bl	8000954 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb3d 	bl	8000954 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fae5 	bl	80008b8 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fadb 	bl	80008b8 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fadd>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	4647      	mov	r7, r8
 8000314:	46ce      	mov	lr, r9
 8000316:	0243      	lsls	r3, r0, #9
 8000318:	0a5b      	lsrs	r3, r3, #9
 800031a:	0044      	lsls	r4, r0, #1
 800031c:	0fc2      	lsrs	r2, r0, #31
 800031e:	469c      	mov	ip, r3
 8000320:	0048      	lsls	r0, r1, #1
 8000322:	00dd      	lsls	r5, r3, #3
 8000324:	024b      	lsls	r3, r1, #9
 8000326:	0e24      	lsrs	r4, r4, #24
 8000328:	0a5b      	lsrs	r3, r3, #9
 800032a:	0e00      	lsrs	r0, r0, #24
 800032c:	b580      	push	{r7, lr}
 800032e:	4698      	mov	r8, r3
 8000330:	0026      	movs	r6, r4
 8000332:	4691      	mov	r9, r2
 8000334:	0fc9      	lsrs	r1, r1, #31
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	1a27      	subs	r7, r4, r0
 800033a:	428a      	cmp	r2, r1
 800033c:	d029      	beq.n	8000392 <__aeabi_fadd+0x82>
 800033e:	2f00      	cmp	r7, #0
 8000340:	dd15      	ble.n	800036e <__aeabi_fadd+0x5e>
 8000342:	2800      	cmp	r0, #0
 8000344:	d14a      	bne.n	80003dc <__aeabi_fadd+0xcc>
 8000346:	2b00      	cmp	r3, #0
 8000348:	d000      	beq.n	800034c <__aeabi_fadd+0x3c>
 800034a:	e095      	b.n	8000478 <__aeabi_fadd+0x168>
 800034c:	08ed      	lsrs	r5, r5, #3
 800034e:	2cff      	cmp	r4, #255	; 0xff
 8000350:	d100      	bne.n	8000354 <__aeabi_fadd+0x44>
 8000352:	e088      	b.n	8000466 <__aeabi_fadd+0x156>
 8000354:	026b      	lsls	r3, r5, #9
 8000356:	0a5b      	lsrs	r3, r3, #9
 8000358:	b2e6      	uxtb	r6, r4
 800035a:	025b      	lsls	r3, r3, #9
 800035c:	05f6      	lsls	r6, r6, #23
 800035e:	0a58      	lsrs	r0, r3, #9
 8000360:	4330      	orrs	r0, r6
 8000362:	07d2      	lsls	r2, r2, #31
 8000364:	4310      	orrs	r0, r2
 8000366:	bc0c      	pop	{r2, r3}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036e:	2f00      	cmp	r7, #0
 8000370:	d000      	beq.n	8000374 <__aeabi_fadd+0x64>
 8000372:	e087      	b.n	8000484 <__aeabi_fadd+0x174>
 8000374:	1c60      	adds	r0, r4, #1
 8000376:	b2c0      	uxtb	r0, r0
 8000378:	2801      	cmp	r0, #1
 800037a:	dc00      	bgt.n	800037e <__aeabi_fadd+0x6e>
 800037c:	e0b6      	b.n	80004ec <__aeabi_fadd+0x1dc>
 800037e:	1aee      	subs	r6, r5, r3
 8000380:	0172      	lsls	r2, r6, #5
 8000382:	d500      	bpl.n	8000386 <__aeabi_fadd+0x76>
 8000384:	e0c5      	b.n	8000512 <__aeabi_fadd+0x202>
 8000386:	2e00      	cmp	r6, #0
 8000388:	d13d      	bne.n	8000406 <__aeabi_fadd+0xf6>
 800038a:	2200      	movs	r2, #0
 800038c:	2600      	movs	r6, #0
 800038e:	2300      	movs	r3, #0
 8000390:	e7e3      	b.n	800035a <__aeabi_fadd+0x4a>
 8000392:	2f00      	cmp	r7, #0
 8000394:	dc00      	bgt.n	8000398 <__aeabi_fadd+0x88>
 8000396:	e096      	b.n	80004c6 <__aeabi_fadd+0x1b6>
 8000398:	2800      	cmp	r0, #0
 800039a:	d05d      	beq.n	8000458 <__aeabi_fadd+0x148>
 800039c:	2cff      	cmp	r4, #255	; 0xff
 800039e:	d060      	beq.n	8000462 <__aeabi_fadd+0x152>
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	04d2      	lsls	r2, r2, #19
 80003a4:	4313      	orrs	r3, r2
 80003a6:	2f1b      	cmp	r7, #27
 80003a8:	dd00      	ble.n	80003ac <__aeabi_fadd+0x9c>
 80003aa:	e0ec      	b.n	8000586 <__aeabi_fadd+0x276>
 80003ac:	2220      	movs	r2, #32
 80003ae:	1bd2      	subs	r2, r2, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	4093      	lsls	r3, r2
 80003b4:	40f8      	lsrs	r0, r7
 80003b6:	1e5a      	subs	r2, r3, #1
 80003b8:	4193      	sbcs	r3, r2
 80003ba:	4303      	orrs	r3, r0
 80003bc:	18ed      	adds	r5, r5, r3
 80003be:	016b      	lsls	r3, r5, #5
 80003c0:	d57b      	bpl.n	80004ba <__aeabi_fadd+0x1aa>
 80003c2:	3401      	adds	r4, #1
 80003c4:	2cff      	cmp	r4, #255	; 0xff
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0xba>
 80003c8:	e0b7      	b.n	800053a <__aeabi_fadd+0x22a>
 80003ca:	2201      	movs	r2, #1
 80003cc:	2607      	movs	r6, #7
 80003ce:	402a      	ands	r2, r5
 80003d0:	086b      	lsrs	r3, r5, #1
 80003d2:	4d9a      	ldr	r5, [pc, #616]	; (800063c <__aeabi_fadd+0x32c>)
 80003d4:	401d      	ands	r5, r3
 80003d6:	4315      	orrs	r5, r2
 80003d8:	402e      	ands	r6, r5
 80003da:	e029      	b.n	8000430 <__aeabi_fadd+0x120>
 80003dc:	2cff      	cmp	r4, #255	; 0xff
 80003de:	d0b5      	beq.n	800034c <__aeabi_fadd+0x3c>
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	04d2      	lsls	r2, r2, #19
 80003e4:	4313      	orrs	r3, r2
 80003e6:	2f1b      	cmp	r7, #27
 80003e8:	dd00      	ble.n	80003ec <__aeabi_fadd+0xdc>
 80003ea:	e0b2      	b.n	8000552 <__aeabi_fadd+0x242>
 80003ec:	2220      	movs	r2, #32
 80003ee:	1bd2      	subs	r2, r2, r7
 80003f0:	0019      	movs	r1, r3
 80003f2:	4093      	lsls	r3, r2
 80003f4:	40f9      	lsrs	r1, r7
 80003f6:	1e5a      	subs	r2, r3, #1
 80003f8:	4193      	sbcs	r3, r2
 80003fa:	430b      	orrs	r3, r1
 80003fc:	1aed      	subs	r5, r5, r3
 80003fe:	016b      	lsls	r3, r5, #5
 8000400:	d55b      	bpl.n	80004ba <__aeabi_fadd+0x1aa>
 8000402:	01ad      	lsls	r5, r5, #6
 8000404:	09ae      	lsrs	r6, r5, #6
 8000406:	0030      	movs	r0, r6
 8000408:	f002 fc2e 	bl	8002c68 <__clzsi2>
 800040c:	3805      	subs	r0, #5
 800040e:	4086      	lsls	r6, r0
 8000410:	4284      	cmp	r4, r0
 8000412:	dc65      	bgt.n	80004e0 <__aeabi_fadd+0x1d0>
 8000414:	1b04      	subs	r4, r0, r4
 8000416:	0033      	movs	r3, r6
 8000418:	2020      	movs	r0, #32
 800041a:	3401      	adds	r4, #1
 800041c:	40e3      	lsrs	r3, r4
 800041e:	1b04      	subs	r4, r0, r4
 8000420:	40a6      	lsls	r6, r4
 8000422:	1e75      	subs	r5, r6, #1
 8000424:	41ae      	sbcs	r6, r5
 8000426:	4333      	orrs	r3, r6
 8000428:	2607      	movs	r6, #7
 800042a:	001d      	movs	r5, r3
 800042c:	2400      	movs	r4, #0
 800042e:	401e      	ands	r6, r3
 8000430:	2201      	movs	r2, #1
 8000432:	464b      	mov	r3, r9
 8000434:	401a      	ands	r2, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d004      	beq.n	8000444 <__aeabi_fadd+0x134>
 800043a:	230f      	movs	r3, #15
 800043c:	402b      	ands	r3, r5
 800043e:	2b04      	cmp	r3, #4
 8000440:	d000      	beq.n	8000444 <__aeabi_fadd+0x134>
 8000442:	3504      	adds	r5, #4
 8000444:	016b      	lsls	r3, r5, #5
 8000446:	d400      	bmi.n	800044a <__aeabi_fadd+0x13a>
 8000448:	e780      	b.n	800034c <__aeabi_fadd+0x3c>
 800044a:	3401      	adds	r4, #1
 800044c:	b2e6      	uxtb	r6, r4
 800044e:	2cff      	cmp	r4, #255	; 0xff
 8000450:	d12f      	bne.n	80004b2 <__aeabi_fadd+0x1a2>
 8000452:	26ff      	movs	r6, #255	; 0xff
 8000454:	2300      	movs	r3, #0
 8000456:	e780      	b.n	800035a <__aeabi_fadd+0x4a>
 8000458:	2b00      	cmp	r3, #0
 800045a:	d152      	bne.n	8000502 <__aeabi_fadd+0x1f2>
 800045c:	2cff      	cmp	r4, #255	; 0xff
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x152>
 8000460:	e774      	b.n	800034c <__aeabi_fadd+0x3c>
 8000462:	000a      	movs	r2, r1
 8000464:	08ed      	lsrs	r5, r5, #3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0f3      	beq.n	8000452 <__aeabi_fadd+0x142>
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	03db      	lsls	r3, r3, #15
 800046e:	432b      	orrs	r3, r5
 8000470:	025b      	lsls	r3, r3, #9
 8000472:	0a5b      	lsrs	r3, r3, #9
 8000474:	26ff      	movs	r6, #255	; 0xff
 8000476:	e770      	b.n	800035a <__aeabi_fadd+0x4a>
 8000478:	3f01      	subs	r7, #1
 800047a:	2f00      	cmp	r7, #0
 800047c:	d0be      	beq.n	80003fc <__aeabi_fadd+0xec>
 800047e:	2cff      	cmp	r4, #255	; 0xff
 8000480:	d1b1      	bne.n	80003e6 <__aeabi_fadd+0xd6>
 8000482:	e763      	b.n	800034c <__aeabi_fadd+0x3c>
 8000484:	2c00      	cmp	r4, #0
 8000486:	d047      	beq.n	8000518 <__aeabi_fadd+0x208>
 8000488:	28ff      	cmp	r0, #255	; 0xff
 800048a:	d069      	beq.n	8000560 <__aeabi_fadd+0x250>
 800048c:	2480      	movs	r4, #128	; 0x80
 800048e:	04e4      	lsls	r4, r4, #19
 8000490:	427a      	negs	r2, r7
 8000492:	4325      	orrs	r5, r4
 8000494:	2a1b      	cmp	r2, #27
 8000496:	dd00      	ble.n	800049a <__aeabi_fadd+0x18a>
 8000498:	e0c5      	b.n	8000626 <__aeabi_fadd+0x316>
 800049a:	002c      	movs	r4, r5
 800049c:	2620      	movs	r6, #32
 800049e:	40d4      	lsrs	r4, r2
 80004a0:	1ab2      	subs	r2, r6, r2
 80004a2:	4095      	lsls	r5, r2
 80004a4:	1e6a      	subs	r2, r5, #1
 80004a6:	4195      	sbcs	r5, r2
 80004a8:	4325      	orrs	r5, r4
 80004aa:	1b5d      	subs	r5, r3, r5
 80004ac:	0004      	movs	r4, r0
 80004ae:	4689      	mov	r9, r1
 80004b0:	e7a5      	b.n	80003fe <__aeabi_fadd+0xee>
 80004b2:	01ab      	lsls	r3, r5, #6
 80004b4:	0a5b      	lsrs	r3, r3, #9
 80004b6:	e750      	b.n	800035a <__aeabi_fadd+0x4a>
 80004b8:	2400      	movs	r4, #0
 80004ba:	2201      	movs	r2, #1
 80004bc:	464b      	mov	r3, r9
 80004be:	401a      	ands	r2, r3
 80004c0:	076b      	lsls	r3, r5, #29
 80004c2:	d1ba      	bne.n	800043a <__aeabi_fadd+0x12a>
 80004c4:	e742      	b.n	800034c <__aeabi_fadd+0x3c>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	d13b      	bne.n	8000542 <__aeabi_fadd+0x232>
 80004ca:	3401      	adds	r4, #1
 80004cc:	b2e0      	uxtb	r0, r4
 80004ce:	2801      	cmp	r0, #1
 80004d0:	dd4a      	ble.n	8000568 <__aeabi_fadd+0x258>
 80004d2:	2cff      	cmp	r4, #255	; 0xff
 80004d4:	d0bd      	beq.n	8000452 <__aeabi_fadd+0x142>
 80004d6:	2607      	movs	r6, #7
 80004d8:	18ed      	adds	r5, r5, r3
 80004da:	086d      	lsrs	r5, r5, #1
 80004dc:	402e      	ands	r6, r5
 80004de:	e7a7      	b.n	8000430 <__aeabi_fadd+0x120>
 80004e0:	2307      	movs	r3, #7
 80004e2:	4d57      	ldr	r5, [pc, #348]	; (8000640 <__aeabi_fadd+0x330>)
 80004e4:	1a24      	subs	r4, r4, r0
 80004e6:	4035      	ands	r5, r6
 80004e8:	401e      	ands	r6, r3
 80004ea:	e7a1      	b.n	8000430 <__aeabi_fadd+0x120>
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	d11b      	bne.n	8000528 <__aeabi_fadd+0x218>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d16e      	bne.n	80005d2 <__aeabi_fadd+0x2c2>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x1ea>
 80004f8:	e09a      	b.n	8000630 <__aeabi_fadd+0x320>
 80004fa:	000a      	movs	r2, r1
 80004fc:	001d      	movs	r5, r3
 80004fe:	003c      	movs	r4, r7
 8000500:	e724      	b.n	800034c <__aeabi_fadd+0x3c>
 8000502:	3f01      	subs	r7, #1
 8000504:	2f00      	cmp	r7, #0
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0x1fa>
 8000508:	e758      	b.n	80003bc <__aeabi_fadd+0xac>
 800050a:	2cff      	cmp	r4, #255	; 0xff
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0x200>
 800050e:	e74a      	b.n	80003a6 <__aeabi_fadd+0x96>
 8000510:	e7a7      	b.n	8000462 <__aeabi_fadd+0x152>
 8000512:	1b5e      	subs	r6, r3, r5
 8000514:	4689      	mov	r9, r1
 8000516:	e776      	b.n	8000406 <__aeabi_fadd+0xf6>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d11c      	bne.n	8000556 <__aeabi_fadd+0x246>
 800051c:	000a      	movs	r2, r1
 800051e:	28ff      	cmp	r0, #255	; 0xff
 8000520:	d01f      	beq.n	8000562 <__aeabi_fadd+0x252>
 8000522:	0004      	movs	r4, r0
 8000524:	001d      	movs	r5, r3
 8000526:	e711      	b.n	800034c <__aeabi_fadd+0x3c>
 8000528:	2d00      	cmp	r5, #0
 800052a:	d15d      	bne.n	80005e8 <__aeabi_fadd+0x2d8>
 800052c:	2b00      	cmp	r3, #0
 800052e:	d117      	bne.n	8000560 <__aeabi_fadd+0x250>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	2200      	movs	r2, #0
 8000534:	03db      	lsls	r3, r3, #15
 8000536:	26ff      	movs	r6, #255	; 0xff
 8000538:	e70f      	b.n	800035a <__aeabi_fadd+0x4a>
 800053a:	000a      	movs	r2, r1
 800053c:	26ff      	movs	r6, #255	; 0xff
 800053e:	2300      	movs	r3, #0
 8000540:	e70b      	b.n	800035a <__aeabi_fadd+0x4a>
 8000542:	2c00      	cmp	r4, #0
 8000544:	d121      	bne.n	800058a <__aeabi_fadd+0x27a>
 8000546:	2d00      	cmp	r5, #0
 8000548:	d166      	bne.n	8000618 <__aeabi_fadd+0x308>
 800054a:	28ff      	cmp	r0, #255	; 0xff
 800054c:	d1e9      	bne.n	8000522 <__aeabi_fadd+0x212>
 800054e:	001d      	movs	r5, r3
 8000550:	e787      	b.n	8000462 <__aeabi_fadd+0x152>
 8000552:	2301      	movs	r3, #1
 8000554:	e752      	b.n	80003fc <__aeabi_fadd+0xec>
 8000556:	1c7a      	adds	r2, r7, #1
 8000558:	d0a7      	beq.n	80004aa <__aeabi_fadd+0x19a>
 800055a:	43fa      	mvns	r2, r7
 800055c:	28ff      	cmp	r0, #255	; 0xff
 800055e:	d199      	bne.n	8000494 <__aeabi_fadd+0x184>
 8000560:	000a      	movs	r2, r1
 8000562:	001d      	movs	r5, r3
 8000564:	24ff      	movs	r4, #255	; 0xff
 8000566:	e6f1      	b.n	800034c <__aeabi_fadd+0x3c>
 8000568:	2e00      	cmp	r6, #0
 800056a:	d121      	bne.n	80005b0 <__aeabi_fadd+0x2a0>
 800056c:	2d00      	cmp	r5, #0
 800056e:	d04f      	beq.n	8000610 <__aeabi_fadd+0x300>
 8000570:	2b00      	cmp	r3, #0
 8000572:	d04c      	beq.n	800060e <__aeabi_fadd+0x2fe>
 8000574:	18ed      	adds	r5, r5, r3
 8000576:	016b      	lsls	r3, r5, #5
 8000578:	d59e      	bpl.n	80004b8 <__aeabi_fadd+0x1a8>
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <__aeabi_fadd+0x330>)
 800057c:	3607      	adds	r6, #7
 800057e:	402e      	ands	r6, r5
 8000580:	2401      	movs	r4, #1
 8000582:	401d      	ands	r5, r3
 8000584:	e754      	b.n	8000430 <__aeabi_fadd+0x120>
 8000586:	2301      	movs	r3, #1
 8000588:	e718      	b.n	80003bc <__aeabi_fadd+0xac>
 800058a:	28ff      	cmp	r0, #255	; 0xff
 800058c:	d0df      	beq.n	800054e <__aeabi_fadd+0x23e>
 800058e:	2480      	movs	r4, #128	; 0x80
 8000590:	04e4      	lsls	r4, r4, #19
 8000592:	427f      	negs	r7, r7
 8000594:	4325      	orrs	r5, r4
 8000596:	2f1b      	cmp	r7, #27
 8000598:	dc4d      	bgt.n	8000636 <__aeabi_fadd+0x326>
 800059a:	2620      	movs	r6, #32
 800059c:	1bf6      	subs	r6, r6, r7
 800059e:	002c      	movs	r4, r5
 80005a0:	40b5      	lsls	r5, r6
 80005a2:	40fc      	lsrs	r4, r7
 80005a4:	1e6a      	subs	r2, r5, #1
 80005a6:	4195      	sbcs	r5, r2
 80005a8:	4325      	orrs	r5, r4
 80005aa:	18ed      	adds	r5, r5, r3
 80005ac:	0004      	movs	r4, r0
 80005ae:	e706      	b.n	80003be <__aeabi_fadd+0xae>
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d0cc      	beq.n	800054e <__aeabi_fadd+0x23e>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x2aa>
 80005b8:	e753      	b.n	8000462 <__aeabi_fadd+0x152>
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	4660      	mov	r0, ip
 80005be:	03c9      	lsls	r1, r1, #15
 80005c0:	4208      	tst	r0, r1
 80005c2:	d003      	beq.n	80005cc <__aeabi_fadd+0x2bc>
 80005c4:	4640      	mov	r0, r8
 80005c6:	4208      	tst	r0, r1
 80005c8:	d100      	bne.n	80005cc <__aeabi_fadd+0x2bc>
 80005ca:	001d      	movs	r5, r3
 80005cc:	2101      	movs	r1, #1
 80005ce:	4011      	ands	r1, r2
 80005d0:	e747      	b.n	8000462 <__aeabi_fadd+0x152>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x2c8>
 80005d6:	e6b9      	b.n	800034c <__aeabi_fadd+0x3c>
 80005d8:	1aea      	subs	r2, r5, r3
 80005da:	0150      	lsls	r0, r2, #5
 80005dc:	d525      	bpl.n	800062a <__aeabi_fadd+0x31a>
 80005de:	2607      	movs	r6, #7
 80005e0:	1b5d      	subs	r5, r3, r5
 80005e2:	402e      	ands	r6, r5
 80005e4:	4689      	mov	r9, r1
 80005e6:	e723      	b.n	8000430 <__aeabi_fadd+0x120>
 80005e8:	24ff      	movs	r4, #255	; 0xff
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0x2e0>
 80005ee:	e6ad      	b.n	800034c <__aeabi_fadd+0x3c>
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	4660      	mov	r0, ip
 80005f4:	03d2      	lsls	r2, r2, #15
 80005f6:	4210      	tst	r0, r2
 80005f8:	d004      	beq.n	8000604 <__aeabi_fadd+0x2f4>
 80005fa:	4640      	mov	r0, r8
 80005fc:	4210      	tst	r0, r2
 80005fe:	d101      	bne.n	8000604 <__aeabi_fadd+0x2f4>
 8000600:	001d      	movs	r5, r3
 8000602:	4689      	mov	r9, r1
 8000604:	2201      	movs	r2, #1
 8000606:	464b      	mov	r3, r9
 8000608:	24ff      	movs	r4, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	e69e      	b.n	800034c <__aeabi_fadd+0x3c>
 800060e:	002b      	movs	r3, r5
 8000610:	08dd      	lsrs	r5, r3, #3
 8000612:	000a      	movs	r2, r1
 8000614:	2400      	movs	r4, #0
 8000616:	e69d      	b.n	8000354 <__aeabi_fadd+0x44>
 8000618:	1c7a      	adds	r2, r7, #1
 800061a:	d0c6      	beq.n	80005aa <__aeabi_fadd+0x29a>
 800061c:	43ff      	mvns	r7, r7
 800061e:	28ff      	cmp	r0, #255	; 0xff
 8000620:	d1b9      	bne.n	8000596 <__aeabi_fadd+0x286>
 8000622:	001d      	movs	r5, r3
 8000624:	e71d      	b.n	8000462 <__aeabi_fadd+0x152>
 8000626:	2501      	movs	r5, #1
 8000628:	e73f      	b.n	80004aa <__aeabi_fadd+0x19a>
 800062a:	1e15      	subs	r5, r2, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x320>
 800062e:	e744      	b.n	80004ba <__aeabi_fadd+0x1aa>
 8000630:	2200      	movs	r2, #0
 8000632:	2300      	movs	r3, #0
 8000634:	e691      	b.n	800035a <__aeabi_fadd+0x4a>
 8000636:	2501      	movs	r5, #1
 8000638:	e7b7      	b.n	80005aa <__aeabi_fadd+0x29a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	7dffffff 	.word	0x7dffffff
 8000640:	fbffffff 	.word	0xfbffffff

08000644 <__aeabi_fdiv>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	4657      	mov	r7, sl
 8000648:	464e      	mov	r6, r9
 800064a:	4645      	mov	r5, r8
 800064c:	46de      	mov	lr, fp
 800064e:	0244      	lsls	r4, r0, #9
 8000650:	b5e0      	push	{r5, r6, r7, lr}
 8000652:	0046      	lsls	r6, r0, #1
 8000654:	4688      	mov	r8, r1
 8000656:	0a64      	lsrs	r4, r4, #9
 8000658:	0e36      	lsrs	r6, r6, #24
 800065a:	0fc7      	lsrs	r7, r0, #31
 800065c:	2e00      	cmp	r6, #0
 800065e:	d063      	beq.n	8000728 <__aeabi_fdiv+0xe4>
 8000660:	2eff      	cmp	r6, #255	; 0xff
 8000662:	d024      	beq.n	80006ae <__aeabi_fdiv+0x6a>
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	00e4      	lsls	r4, r4, #3
 8000668:	04db      	lsls	r3, r3, #19
 800066a:	431c      	orrs	r4, r3
 800066c:	2300      	movs	r3, #0
 800066e:	4699      	mov	r9, r3
 8000670:	469b      	mov	fp, r3
 8000672:	3e7f      	subs	r6, #127	; 0x7f
 8000674:	4643      	mov	r3, r8
 8000676:	4642      	mov	r2, r8
 8000678:	025d      	lsls	r5, r3, #9
 800067a:	0fd2      	lsrs	r2, r2, #31
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	0a6d      	lsrs	r5, r5, #9
 8000680:	0e1b      	lsrs	r3, r3, #24
 8000682:	4690      	mov	r8, r2
 8000684:	4692      	mov	sl, r2
 8000686:	d065      	beq.n	8000754 <__aeabi_fdiv+0x110>
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	d055      	beq.n	8000738 <__aeabi_fdiv+0xf4>
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	2100      	movs	r1, #0
 8000690:	00ed      	lsls	r5, r5, #3
 8000692:	04d2      	lsls	r2, r2, #19
 8000694:	3b7f      	subs	r3, #127	; 0x7f
 8000696:	4315      	orrs	r5, r2
 8000698:	1af6      	subs	r6, r6, r3
 800069a:	4643      	mov	r3, r8
 800069c:	464a      	mov	r2, r9
 800069e:	407b      	eors	r3, r7
 80006a0:	2a0f      	cmp	r2, #15
 80006a2:	d900      	bls.n	80006a6 <__aeabi_fdiv+0x62>
 80006a4:	e08d      	b.n	80007c2 <__aeabi_fdiv+0x17e>
 80006a6:	486d      	ldr	r0, [pc, #436]	; (800085c <__aeabi_fdiv+0x218>)
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	5882      	ldr	r2, [r0, r2]
 80006ac:	4697      	mov	pc, r2
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d154      	bne.n	800075c <__aeabi_fdiv+0x118>
 80006b2:	2308      	movs	r3, #8
 80006b4:	4699      	mov	r9, r3
 80006b6:	3b06      	subs	r3, #6
 80006b8:	26ff      	movs	r6, #255	; 0xff
 80006ba:	469b      	mov	fp, r3
 80006bc:	e7da      	b.n	8000674 <__aeabi_fdiv+0x30>
 80006be:	2500      	movs	r5, #0
 80006c0:	4653      	mov	r3, sl
 80006c2:	2902      	cmp	r1, #2
 80006c4:	d01b      	beq.n	80006fe <__aeabi_fdiv+0xba>
 80006c6:	2903      	cmp	r1, #3
 80006c8:	d100      	bne.n	80006cc <__aeabi_fdiv+0x88>
 80006ca:	e0bf      	b.n	800084c <__aeabi_fdiv+0x208>
 80006cc:	2901      	cmp	r1, #1
 80006ce:	d028      	beq.n	8000722 <__aeabi_fdiv+0xde>
 80006d0:	0030      	movs	r0, r6
 80006d2:	307f      	adds	r0, #127	; 0x7f
 80006d4:	2800      	cmp	r0, #0
 80006d6:	dd20      	ble.n	800071a <__aeabi_fdiv+0xd6>
 80006d8:	076a      	lsls	r2, r5, #29
 80006da:	d004      	beq.n	80006e6 <__aeabi_fdiv+0xa2>
 80006dc:	220f      	movs	r2, #15
 80006de:	402a      	ands	r2, r5
 80006e0:	2a04      	cmp	r2, #4
 80006e2:	d000      	beq.n	80006e6 <__aeabi_fdiv+0xa2>
 80006e4:	3504      	adds	r5, #4
 80006e6:	012a      	lsls	r2, r5, #4
 80006e8:	d503      	bpl.n	80006f2 <__aeabi_fdiv+0xae>
 80006ea:	0030      	movs	r0, r6
 80006ec:	4a5c      	ldr	r2, [pc, #368]	; (8000860 <__aeabi_fdiv+0x21c>)
 80006ee:	3080      	adds	r0, #128	; 0x80
 80006f0:	4015      	ands	r5, r2
 80006f2:	28fe      	cmp	r0, #254	; 0xfe
 80006f4:	dc03      	bgt.n	80006fe <__aeabi_fdiv+0xba>
 80006f6:	01ac      	lsls	r4, r5, #6
 80006f8:	0a64      	lsrs	r4, r4, #9
 80006fa:	b2c2      	uxtb	r2, r0
 80006fc:	e001      	b.n	8000702 <__aeabi_fdiv+0xbe>
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	2400      	movs	r4, #0
 8000702:	0264      	lsls	r4, r4, #9
 8000704:	05d2      	lsls	r2, r2, #23
 8000706:	0a60      	lsrs	r0, r4, #9
 8000708:	07db      	lsls	r3, r3, #31
 800070a:	4310      	orrs	r0, r2
 800070c:	4318      	orrs	r0, r3
 800070e:	bc3c      	pop	{r2, r3, r4, r5}
 8000710:	4690      	mov	r8, r2
 8000712:	4699      	mov	r9, r3
 8000714:	46a2      	mov	sl, r4
 8000716:	46ab      	mov	fp, r5
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	2201      	movs	r2, #1
 800071c:	1a10      	subs	r0, r2, r0
 800071e:	281b      	cmp	r0, #27
 8000720:	dd7c      	ble.n	800081c <__aeabi_fdiv+0x1d8>
 8000722:	2200      	movs	r2, #0
 8000724:	2400      	movs	r4, #0
 8000726:	e7ec      	b.n	8000702 <__aeabi_fdiv+0xbe>
 8000728:	2c00      	cmp	r4, #0
 800072a:	d11d      	bne.n	8000768 <__aeabi_fdiv+0x124>
 800072c:	2304      	movs	r3, #4
 800072e:	4699      	mov	r9, r3
 8000730:	3b03      	subs	r3, #3
 8000732:	2600      	movs	r6, #0
 8000734:	469b      	mov	fp, r3
 8000736:	e79d      	b.n	8000674 <__aeabi_fdiv+0x30>
 8000738:	3eff      	subs	r6, #255	; 0xff
 800073a:	2d00      	cmp	r5, #0
 800073c:	d120      	bne.n	8000780 <__aeabi_fdiv+0x13c>
 800073e:	2102      	movs	r1, #2
 8000740:	4643      	mov	r3, r8
 8000742:	464a      	mov	r2, r9
 8000744:	407b      	eors	r3, r7
 8000746:	430a      	orrs	r2, r1
 8000748:	2a0f      	cmp	r2, #15
 800074a:	d8d8      	bhi.n	80006fe <__aeabi_fdiv+0xba>
 800074c:	4845      	ldr	r0, [pc, #276]	; (8000864 <__aeabi_fdiv+0x220>)
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	5882      	ldr	r2, [r0, r2]
 8000752:	4697      	mov	pc, r2
 8000754:	2d00      	cmp	r5, #0
 8000756:	d119      	bne.n	800078c <__aeabi_fdiv+0x148>
 8000758:	2101      	movs	r1, #1
 800075a:	e7f1      	b.n	8000740 <__aeabi_fdiv+0xfc>
 800075c:	230c      	movs	r3, #12
 800075e:	4699      	mov	r9, r3
 8000760:	3b09      	subs	r3, #9
 8000762:	26ff      	movs	r6, #255	; 0xff
 8000764:	469b      	mov	fp, r3
 8000766:	e785      	b.n	8000674 <__aeabi_fdiv+0x30>
 8000768:	0020      	movs	r0, r4
 800076a:	f002 fa7d 	bl	8002c68 <__clzsi2>
 800076e:	2676      	movs	r6, #118	; 0x76
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409c      	lsls	r4, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4276      	negs	r6, r6
 8000778:	1a36      	subs	r6, r6, r0
 800077a:	4699      	mov	r9, r3
 800077c:	469b      	mov	fp, r3
 800077e:	e779      	b.n	8000674 <__aeabi_fdiv+0x30>
 8000780:	464a      	mov	r2, r9
 8000782:	2303      	movs	r3, #3
 8000784:	431a      	orrs	r2, r3
 8000786:	4691      	mov	r9, r2
 8000788:	2103      	movs	r1, #3
 800078a:	e786      	b.n	800069a <__aeabi_fdiv+0x56>
 800078c:	0028      	movs	r0, r5
 800078e:	f002 fa6b 	bl	8002c68 <__clzsi2>
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	1836      	adds	r6, r6, r0
 8000796:	409d      	lsls	r5, r3
 8000798:	3676      	adds	r6, #118	; 0x76
 800079a:	2100      	movs	r1, #0
 800079c:	e77d      	b.n	800069a <__aeabi_fdiv+0x56>
 800079e:	2480      	movs	r4, #128	; 0x80
 80007a0:	2300      	movs	r3, #0
 80007a2:	03e4      	lsls	r4, r4, #15
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	e7ac      	b.n	8000702 <__aeabi_fdiv+0xbe>
 80007a8:	2500      	movs	r5, #0
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	03db      	lsls	r3, r3, #15
 80007ae:	421c      	tst	r4, r3
 80007b0:	d028      	beq.n	8000804 <__aeabi_fdiv+0x1c0>
 80007b2:	421d      	tst	r5, r3
 80007b4:	d126      	bne.n	8000804 <__aeabi_fdiv+0x1c0>
 80007b6:	432b      	orrs	r3, r5
 80007b8:	025c      	lsls	r4, r3, #9
 80007ba:	0a64      	lsrs	r4, r4, #9
 80007bc:	4643      	mov	r3, r8
 80007be:	22ff      	movs	r2, #255	; 0xff
 80007c0:	e79f      	b.n	8000702 <__aeabi_fdiv+0xbe>
 80007c2:	0162      	lsls	r2, r4, #5
 80007c4:	016c      	lsls	r4, r5, #5
 80007c6:	42a2      	cmp	r2, r4
 80007c8:	d224      	bcs.n	8000814 <__aeabi_fdiv+0x1d0>
 80007ca:	211b      	movs	r1, #27
 80007cc:	2500      	movs	r5, #0
 80007ce:	3e01      	subs	r6, #1
 80007d0:	2701      	movs	r7, #1
 80007d2:	0010      	movs	r0, r2
 80007d4:	006d      	lsls	r5, r5, #1
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	2800      	cmp	r0, #0
 80007da:	db01      	blt.n	80007e0 <__aeabi_fdiv+0x19c>
 80007dc:	4294      	cmp	r4, r2
 80007de:	d801      	bhi.n	80007e4 <__aeabi_fdiv+0x1a0>
 80007e0:	1b12      	subs	r2, r2, r4
 80007e2:	433d      	orrs	r5, r7
 80007e4:	3901      	subs	r1, #1
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d1f3      	bne.n	80007d2 <__aeabi_fdiv+0x18e>
 80007ea:	0014      	movs	r4, r2
 80007ec:	1e62      	subs	r2, r4, #1
 80007ee:	4194      	sbcs	r4, r2
 80007f0:	4325      	orrs	r5, r4
 80007f2:	e76d      	b.n	80006d0 <__aeabi_fdiv+0x8c>
 80007f4:	46ba      	mov	sl, r7
 80007f6:	4659      	mov	r1, fp
 80007f8:	0025      	movs	r5, r4
 80007fa:	4653      	mov	r3, sl
 80007fc:	2902      	cmp	r1, #2
 80007fe:	d000      	beq.n	8000802 <__aeabi_fdiv+0x1be>
 8000800:	e761      	b.n	80006c6 <__aeabi_fdiv+0x82>
 8000802:	e77c      	b.n	80006fe <__aeabi_fdiv+0xba>
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	03db      	lsls	r3, r3, #15
 8000808:	431c      	orrs	r4, r3
 800080a:	0264      	lsls	r4, r4, #9
 800080c:	0a64      	lsrs	r4, r4, #9
 800080e:	003b      	movs	r3, r7
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	e776      	b.n	8000702 <__aeabi_fdiv+0xbe>
 8000814:	1b12      	subs	r2, r2, r4
 8000816:	211a      	movs	r1, #26
 8000818:	2501      	movs	r5, #1
 800081a:	e7d9      	b.n	80007d0 <__aeabi_fdiv+0x18c>
 800081c:	369e      	adds	r6, #158	; 0x9e
 800081e:	002a      	movs	r2, r5
 8000820:	40b5      	lsls	r5, r6
 8000822:	002c      	movs	r4, r5
 8000824:	40c2      	lsrs	r2, r0
 8000826:	1e65      	subs	r5, r4, #1
 8000828:	41ac      	sbcs	r4, r5
 800082a:	4314      	orrs	r4, r2
 800082c:	0762      	lsls	r2, r4, #29
 800082e:	d004      	beq.n	800083a <__aeabi_fdiv+0x1f6>
 8000830:	220f      	movs	r2, #15
 8000832:	4022      	ands	r2, r4
 8000834:	2a04      	cmp	r2, #4
 8000836:	d000      	beq.n	800083a <__aeabi_fdiv+0x1f6>
 8000838:	3404      	adds	r4, #4
 800083a:	0162      	lsls	r2, r4, #5
 800083c:	d403      	bmi.n	8000846 <__aeabi_fdiv+0x202>
 800083e:	01a4      	lsls	r4, r4, #6
 8000840:	0a64      	lsrs	r4, r4, #9
 8000842:	2200      	movs	r2, #0
 8000844:	e75d      	b.n	8000702 <__aeabi_fdiv+0xbe>
 8000846:	2201      	movs	r2, #1
 8000848:	2400      	movs	r4, #0
 800084a:	e75a      	b.n	8000702 <__aeabi_fdiv+0xbe>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	03e4      	lsls	r4, r4, #15
 8000850:	432c      	orrs	r4, r5
 8000852:	0264      	lsls	r4, r4, #9
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	e753      	b.n	8000702 <__aeabi_fdiv+0xbe>
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	08005c4c 	.word	0x08005c4c
 8000860:	f7ffffff 	.word	0xf7ffffff
 8000864:	08005c8c 	.word	0x08005c8c

08000868 <__eqsf2>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	0042      	lsls	r2, r0, #1
 800086c:	024e      	lsls	r6, r1, #9
 800086e:	004c      	lsls	r4, r1, #1
 8000870:	0245      	lsls	r5, r0, #9
 8000872:	0a6d      	lsrs	r5, r5, #9
 8000874:	0e12      	lsrs	r2, r2, #24
 8000876:	0fc3      	lsrs	r3, r0, #31
 8000878:	0a76      	lsrs	r6, r6, #9
 800087a:	0e24      	lsrs	r4, r4, #24
 800087c:	0fc9      	lsrs	r1, r1, #31
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d00f      	beq.n	80008a2 <__eqsf2+0x3a>
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d011      	beq.n	80008aa <__eqsf2+0x42>
 8000886:	2001      	movs	r0, #1
 8000888:	42a2      	cmp	r2, r4
 800088a:	d000      	beq.n	800088e <__eqsf2+0x26>
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	42b5      	cmp	r5, r6
 8000890:	d1fc      	bne.n	800088c <__eqsf2+0x24>
 8000892:	428b      	cmp	r3, r1
 8000894:	d00d      	beq.n	80008b2 <__eqsf2+0x4a>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d1f8      	bne.n	800088c <__eqsf2+0x24>
 800089a:	0028      	movs	r0, r5
 800089c:	1e45      	subs	r5, r0, #1
 800089e:	41a8      	sbcs	r0, r5
 80008a0:	e7f4      	b.n	800088c <__eqsf2+0x24>
 80008a2:	2001      	movs	r0, #1
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d1f1      	bne.n	800088c <__eqsf2+0x24>
 80008a8:	e7eb      	b.n	8000882 <__eqsf2+0x1a>
 80008aa:	2001      	movs	r0, #1
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d1ed      	bne.n	800088c <__eqsf2+0x24>
 80008b0:	e7e9      	b.n	8000886 <__eqsf2+0x1e>
 80008b2:	2000      	movs	r0, #0
 80008b4:	e7ea      	b.n	800088c <__eqsf2+0x24>
 80008b6:	46c0      	nop			; (mov r8, r8)

080008b8 <__gesf2>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	004a      	lsls	r2, r1, #1
 80008bc:	024e      	lsls	r6, r1, #9
 80008be:	0245      	lsls	r5, r0, #9
 80008c0:	0044      	lsls	r4, r0, #1
 80008c2:	0a6d      	lsrs	r5, r5, #9
 80008c4:	0e24      	lsrs	r4, r4, #24
 80008c6:	0fc3      	lsrs	r3, r0, #31
 80008c8:	0a76      	lsrs	r6, r6, #9
 80008ca:	0e12      	lsrs	r2, r2, #24
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	d015      	beq.n	80008fe <__gesf2+0x46>
 80008d2:	2aff      	cmp	r2, #255	; 0xff
 80008d4:	d00e      	beq.n	80008f4 <__gesf2+0x3c>
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	d115      	bne.n	8000906 <__gesf2+0x4e>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d101      	bne.n	80008e2 <__gesf2+0x2a>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d01c      	beq.n	800091c <__gesf2+0x64>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d014      	beq.n	8000910 <__gesf2+0x58>
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d027      	beq.n	800093a <__gesf2+0x82>
 80008ea:	2002      	movs	r0, #2
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4018      	ands	r0, r3
 80008f0:	3801      	subs	r0, #1
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0ee      	beq.n	80008d6 <__gesf2+0x1e>
 80008f8:	2002      	movs	r0, #2
 80008fa:	4240      	negs	r0, r0
 80008fc:	e7f9      	b.n	80008f2 <__gesf2+0x3a>
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d1fa      	bne.n	80008f8 <__gesf2+0x40>
 8000902:	2aff      	cmp	r2, #255	; 0xff
 8000904:	d00e      	beq.n	8000924 <__gesf2+0x6c>
 8000906:	2a00      	cmp	r2, #0
 8000908:	d10e      	bne.n	8000928 <__gesf2+0x70>
 800090a:	2e00      	cmp	r6, #0
 800090c:	d0ed      	beq.n	80008ea <__gesf2+0x32>
 800090e:	e00b      	b.n	8000928 <__gesf2+0x70>
 8000910:	2301      	movs	r3, #1
 8000912:	3901      	subs	r1, #1
 8000914:	4399      	bics	r1, r3
 8000916:	0008      	movs	r0, r1
 8000918:	3001      	adds	r0, #1
 800091a:	e7ea      	b.n	80008f2 <__gesf2+0x3a>
 800091c:	2000      	movs	r0, #0
 800091e:	2d00      	cmp	r5, #0
 8000920:	d0e7      	beq.n	80008f2 <__gesf2+0x3a>
 8000922:	e7e2      	b.n	80008ea <__gesf2+0x32>
 8000924:	2e00      	cmp	r6, #0
 8000926:	d1e7      	bne.n	80008f8 <__gesf2+0x40>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1de      	bne.n	80008ea <__gesf2+0x32>
 800092c:	4294      	cmp	r4, r2
 800092e:	dd05      	ble.n	800093c <__gesf2+0x84>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7db      	b.n	80008f2 <__gesf2+0x3a>
 800093a:	2400      	movs	r4, #0
 800093c:	42a2      	cmp	r2, r4
 800093e:	dc04      	bgt.n	800094a <__gesf2+0x92>
 8000940:	42b5      	cmp	r5, r6
 8000942:	d8d2      	bhi.n	80008ea <__gesf2+0x32>
 8000944:	2000      	movs	r0, #0
 8000946:	42b5      	cmp	r5, r6
 8000948:	d2d3      	bcs.n	80008f2 <__gesf2+0x3a>
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	2301      	movs	r3, #1
 800094e:	4398      	bics	r0, r3
 8000950:	3001      	adds	r0, #1
 8000952:	e7ce      	b.n	80008f2 <__gesf2+0x3a>

08000954 <__lesf2>:
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0244      	lsls	r4, r0, #9
 800095a:	024d      	lsls	r5, r1, #9
 800095c:	0fc3      	lsrs	r3, r0, #31
 800095e:	0048      	lsls	r0, r1, #1
 8000960:	0a64      	lsrs	r4, r4, #9
 8000962:	0e12      	lsrs	r2, r2, #24
 8000964:	0a6d      	lsrs	r5, r5, #9
 8000966:	0e00      	lsrs	r0, r0, #24
 8000968:	0fc9      	lsrs	r1, r1, #31
 800096a:	2aff      	cmp	r2, #255	; 0xff
 800096c:	d012      	beq.n	8000994 <__lesf2+0x40>
 800096e:	28ff      	cmp	r0, #255	; 0xff
 8000970:	d00c      	beq.n	800098c <__lesf2+0x38>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d112      	bne.n	800099c <__lesf2+0x48>
 8000976:	2800      	cmp	r0, #0
 8000978:	d119      	bne.n	80009ae <__lesf2+0x5a>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d117      	bne.n	80009ae <__lesf2+0x5a>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d02b      	beq.n	80009da <__lesf2+0x86>
 8000982:	2002      	movs	r0, #2
 8000984:	3b01      	subs	r3, #1
 8000986:	4018      	ands	r0, r3
 8000988:	3801      	subs	r0, #1
 800098a:	e026      	b.n	80009da <__lesf2+0x86>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d0f0      	beq.n	8000972 <__lesf2+0x1e>
 8000990:	2002      	movs	r0, #2
 8000992:	e022      	b.n	80009da <__lesf2+0x86>
 8000994:	2c00      	cmp	r4, #0
 8000996:	d1fb      	bne.n	8000990 <__lesf2+0x3c>
 8000998:	28ff      	cmp	r0, #255	; 0xff
 800099a:	d01f      	beq.n	80009dc <__lesf2+0x88>
 800099c:	2800      	cmp	r0, #0
 800099e:	d11f      	bne.n	80009e0 <__lesf2+0x8c>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d11d      	bne.n	80009e0 <__lesf2+0x8c>
 80009a4:	2002      	movs	r0, #2
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4018      	ands	r0, r3
 80009aa:	3801      	subs	r0, #1
 80009ac:	e015      	b.n	80009da <__lesf2+0x86>
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d00e      	beq.n	80009d0 <__lesf2+0x7c>
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d1e5      	bne.n	8000982 <__lesf2+0x2e>
 80009b6:	2200      	movs	r2, #0
 80009b8:	4290      	cmp	r0, r2
 80009ba:	dc04      	bgt.n	80009c6 <__lesf2+0x72>
 80009bc:	42ac      	cmp	r4, r5
 80009be:	d8e0      	bhi.n	8000982 <__lesf2+0x2e>
 80009c0:	2000      	movs	r0, #0
 80009c2:	42ac      	cmp	r4, r5
 80009c4:	d209      	bcs.n	80009da <__lesf2+0x86>
 80009c6:	1e58      	subs	r0, r3, #1
 80009c8:	2301      	movs	r3, #1
 80009ca:	4398      	bics	r0, r3
 80009cc:	3001      	adds	r0, #1
 80009ce:	e004      	b.n	80009da <__lesf2+0x86>
 80009d0:	2301      	movs	r3, #1
 80009d2:	3901      	subs	r1, #1
 80009d4:	4399      	bics	r1, r3
 80009d6:	0008      	movs	r0, r1
 80009d8:	3001      	adds	r0, #1
 80009da:	bd30      	pop	{r4, r5, pc}
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d1d7      	bne.n	8000990 <__lesf2+0x3c>
 80009e0:	428b      	cmp	r3, r1
 80009e2:	d1ce      	bne.n	8000982 <__lesf2+0x2e>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	dde7      	ble.n	80009b8 <__lesf2+0x64>
 80009e8:	2102      	movs	r1, #2
 80009ea:	1e58      	subs	r0, r3, #1
 80009ec:	4008      	ands	r0, r1
 80009ee:	3801      	subs	r0, #1
 80009f0:	e7f3      	b.n	80009da <__lesf2+0x86>
 80009f2:	46c0      	nop			; (mov r8, r8)

080009f4 <__aeabi_fmul>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464e      	mov	r6, r9
 80009f8:	4657      	mov	r7, sl
 80009fa:	4645      	mov	r5, r8
 80009fc:	46de      	mov	lr, fp
 80009fe:	b5e0      	push	{r5, r6, r7, lr}
 8000a00:	0243      	lsls	r3, r0, #9
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	0045      	lsls	r5, r0, #1
 8000a06:	b083      	sub	sp, #12
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	0e2d      	lsrs	r5, r5, #24
 8000a0e:	0fc6      	lsrs	r6, r0, #31
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d057      	beq.n	8000ac4 <__aeabi_fmul+0xd0>
 8000a14:	2dff      	cmp	r5, #255	; 0xff
 8000a16:	d024      	beq.n	8000a62 <__aeabi_fmul+0x6e>
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	04c0      	lsls	r0, r0, #19
 8000a1e:	4318      	orrs	r0, r3
 8000a20:	2300      	movs	r3, #0
 8000a22:	4681      	mov	r9, r0
 8000a24:	469a      	mov	sl, r3
 8000a26:	469b      	mov	fp, r3
 8000a28:	3d7f      	subs	r5, #127	; 0x7f
 8000a2a:	027c      	lsls	r4, r7, #9
 8000a2c:	007a      	lsls	r2, r7, #1
 8000a2e:	0ffb      	lsrs	r3, r7, #31
 8000a30:	0a64      	lsrs	r4, r4, #9
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	4698      	mov	r8, r3
 8000a36:	d023      	beq.n	8000a80 <__aeabi_fmul+0x8c>
 8000a38:	2aff      	cmp	r2, #255	; 0xff
 8000a3a:	d04b      	beq.n	8000ad4 <__aeabi_fmul+0xe0>
 8000a3c:	00e3      	lsls	r3, r4, #3
 8000a3e:	2480      	movs	r4, #128	; 0x80
 8000a40:	2000      	movs	r0, #0
 8000a42:	04e4      	lsls	r4, r4, #19
 8000a44:	3a7f      	subs	r2, #127	; 0x7f
 8000a46:	431c      	orrs	r4, r3
 8000a48:	18ad      	adds	r5, r5, r2
 8000a4a:	1c6b      	adds	r3, r5, #1
 8000a4c:	4647      	mov	r7, r8
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	4653      	mov	r3, sl
 8000a52:	4077      	eors	r7, r6
 8000a54:	003a      	movs	r2, r7
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	d848      	bhi.n	8000aec <__aeabi_fmul+0xf8>
 8000a5a:	497d      	ldr	r1, [pc, #500]	; (8000c50 <__aeabi_fmul+0x25c>)
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	58cb      	ldr	r3, [r1, r3]
 8000a60:	469f      	mov	pc, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fmul+0x74>
 8000a66:	e085      	b.n	8000b74 <__aeabi_fmul+0x180>
 8000a68:	3308      	adds	r3, #8
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	3b06      	subs	r3, #6
 8000a6e:	469b      	mov	fp, r3
 8000a70:	027c      	lsls	r4, r7, #9
 8000a72:	007a      	lsls	r2, r7, #1
 8000a74:	0ffb      	lsrs	r3, r7, #31
 8000a76:	25ff      	movs	r5, #255	; 0xff
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	0e12      	lsrs	r2, r2, #24
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	d1db      	bne.n	8000a38 <__aeabi_fmul+0x44>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fmul+0x92>
 8000a84:	e090      	b.n	8000ba8 <__aeabi_fmul+0x1b4>
 8000a86:	4652      	mov	r2, sl
 8000a88:	2301      	movs	r3, #1
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	4692      	mov	sl, r2
 8000a8e:	2001      	movs	r0, #1
 8000a90:	e7db      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000a92:	464c      	mov	r4, r9
 8000a94:	4658      	mov	r0, fp
 8000a96:	0017      	movs	r7, r2
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d024      	beq.n	8000ae6 <__aeabi_fmul+0xf2>
 8000a9c:	2803      	cmp	r0, #3
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fmul+0xae>
 8000aa0:	e0cf      	b.n	8000c42 <__aeabi_fmul+0x24e>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2801      	cmp	r0, #1
 8000aa8:	d14d      	bne.n	8000b46 <__aeabi_fmul+0x152>
 8000aaa:	0258      	lsls	r0, r3, #9
 8000aac:	05d2      	lsls	r2, r2, #23
 8000aae:	0a40      	lsrs	r0, r0, #9
 8000ab0:	07ff      	lsls	r7, r7, #31
 8000ab2:	4310      	orrs	r0, r2
 8000ab4:	4338      	orrs	r0, r7
 8000ab6:	b003      	add	sp, #12
 8000ab8:	bc3c      	pop	{r2, r3, r4, r5}
 8000aba:	4690      	mov	r8, r2
 8000abc:	4699      	mov	r9, r3
 8000abe:	46a2      	mov	sl, r4
 8000ac0:	46ab      	mov	fp, r5
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d15b      	bne.n	8000b80 <__aeabi_fmul+0x18c>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	469a      	mov	sl, r3
 8000acc:	3b03      	subs	r3, #3
 8000ace:	2500      	movs	r5, #0
 8000ad0:	469b      	mov	fp, r3
 8000ad2:	e7aa      	b.n	8000a2a <__aeabi_fmul+0x36>
 8000ad4:	35ff      	adds	r5, #255	; 0xff
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d160      	bne.n	8000b9c <__aeabi_fmul+0x1a8>
 8000ada:	4652      	mov	r2, sl
 8000adc:	2302      	movs	r3, #2
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	4692      	mov	sl, r2
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	e7b1      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e7de      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000aec:	464b      	mov	r3, r9
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	469c      	mov	ip, r3
 8000af2:	464b      	mov	r3, r9
 8000af4:	0426      	lsls	r6, r4, #16
 8000af6:	0c36      	lsrs	r6, r6, #16
 8000af8:	0418      	lsls	r0, r3, #16
 8000afa:	4661      	mov	r1, ip
 8000afc:	0033      	movs	r3, r6
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	4664      	mov	r4, ip
 8000b02:	0c00      	lsrs	r0, r0, #16
 8000b04:	4343      	muls	r3, r0
 8000b06:	434e      	muls	r6, r1
 8000b08:	4350      	muls	r0, r2
 8000b0a:	4354      	muls	r4, r2
 8000b0c:	1980      	adds	r0, r0, r6
 8000b0e:	0c1a      	lsrs	r2, r3, #16
 8000b10:	1812      	adds	r2, r2, r0
 8000b12:	4296      	cmp	r6, r2
 8000b14:	d903      	bls.n	8000b1e <__aeabi_fmul+0x12a>
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	0249      	lsls	r1, r1, #9
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	4464      	add	r4, ip
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	0410      	lsls	r0, r2, #16
 8000b24:	18c0      	adds	r0, r0, r3
 8000b26:	0183      	lsls	r3, r0, #6
 8000b28:	1e5e      	subs	r6, r3, #1
 8000b2a:	41b3      	sbcs	r3, r6
 8000b2c:	0e80      	lsrs	r0, r0, #26
 8000b2e:	4318      	orrs	r0, r3
 8000b30:	0c13      	lsrs	r3, r2, #16
 8000b32:	191b      	adds	r3, r3, r4
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	4303      	orrs	r3, r0
 8000b38:	001c      	movs	r4, r3
 8000b3a:	0123      	lsls	r3, r4, #4
 8000b3c:	d579      	bpl.n	8000c32 <__aeabi_fmul+0x23e>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	0862      	lsrs	r2, r4, #1
 8000b42:	401c      	ands	r4, r3
 8000b44:	4314      	orrs	r4, r2
 8000b46:	9a01      	ldr	r2, [sp, #4]
 8000b48:	327f      	adds	r2, #127	; 0x7f
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	dd4d      	ble.n	8000bea <__aeabi_fmul+0x1f6>
 8000b4e:	0763      	lsls	r3, r4, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x168>
 8000b52:	230f      	movs	r3, #15
 8000b54:	4023      	ands	r3, r4
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x168>
 8000b5a:	3404      	adds	r4, #4
 8000b5c:	0123      	lsls	r3, r4, #4
 8000b5e:	d503      	bpl.n	8000b68 <__aeabi_fmul+0x174>
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <__aeabi_fmul+0x260>)
 8000b62:	9a01      	ldr	r2, [sp, #4]
 8000b64:	401c      	ands	r4, r3
 8000b66:	3280      	adds	r2, #128	; 0x80
 8000b68:	2afe      	cmp	r2, #254	; 0xfe
 8000b6a:	dcbc      	bgt.n	8000ae6 <__aeabi_fmul+0xf2>
 8000b6c:	01a3      	lsls	r3, r4, #6
 8000b6e:	0a5b      	lsrs	r3, r3, #9
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	e79a      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000b74:	230c      	movs	r3, #12
 8000b76:	469a      	mov	sl, r3
 8000b78:	3b09      	subs	r3, #9
 8000b7a:	25ff      	movs	r5, #255	; 0xff
 8000b7c:	469b      	mov	fp, r3
 8000b7e:	e754      	b.n	8000a2a <__aeabi_fmul+0x36>
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 f871 	bl	8002c68 <__clzsi2>
 8000b86:	464a      	mov	r2, r9
 8000b88:	1f43      	subs	r3, r0, #5
 8000b8a:	2576      	movs	r5, #118	; 0x76
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	2300      	movs	r3, #0
 8000b90:	426d      	negs	r5, r5
 8000b92:	4691      	mov	r9, r2
 8000b94:	1a2d      	subs	r5, r5, r0
 8000b96:	469a      	mov	sl, r3
 8000b98:	469b      	mov	fp, r3
 8000b9a:	e746      	b.n	8000a2a <__aeabi_fmul+0x36>
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	4692      	mov	sl, r2
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	e750      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000ba8:	0020      	movs	r0, r4
 8000baa:	f002 f85d 	bl	8002c68 <__clzsi2>
 8000bae:	1f43      	subs	r3, r0, #5
 8000bb0:	1a2d      	subs	r5, r5, r0
 8000bb2:	409c      	lsls	r4, r3
 8000bb4:	3d76      	subs	r5, #118	; 0x76
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e747      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	03db      	lsls	r3, r3, #15
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	e772      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	e766      	b.n	8000a96 <__aeabi_fmul+0xa2>
 8000bc8:	464c      	mov	r4, r9
 8000bca:	0032      	movs	r2, r6
 8000bcc:	4658      	mov	r0, fp
 8000bce:	e762      	b.n	8000a96 <__aeabi_fmul+0xa2>
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	03db      	lsls	r3, r3, #15
 8000bd6:	421a      	tst	r2, r3
 8000bd8:	d022      	beq.n	8000c20 <__aeabi_fmul+0x22c>
 8000bda:	421c      	tst	r4, r3
 8000bdc:	d120      	bne.n	8000c20 <__aeabi_fmul+0x22c>
 8000bde:	4323      	orrs	r3, r4
 8000be0:	025b      	lsls	r3, r3, #9
 8000be2:	0a5b      	lsrs	r3, r3, #9
 8000be4:	4647      	mov	r7, r8
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	e75f      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000bea:	2301      	movs	r3, #1
 8000bec:	1a9a      	subs	r2, r3, r2
 8000bee:	2a1b      	cmp	r2, #27
 8000bf0:	dc21      	bgt.n	8000c36 <__aeabi_fmul+0x242>
 8000bf2:	0023      	movs	r3, r4
 8000bf4:	9901      	ldr	r1, [sp, #4]
 8000bf6:	40d3      	lsrs	r3, r2
 8000bf8:	319e      	adds	r1, #158	; 0x9e
 8000bfa:	408c      	lsls	r4, r1
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	0023      	movs	r3, r4
 8000c00:	1e5c      	subs	r4, r3, #1
 8000c02:	41a3      	sbcs	r3, r4
 8000c04:	4313      	orrs	r3, r2
 8000c06:	075a      	lsls	r2, r3, #29
 8000c08:	d004      	beq.n	8000c14 <__aeabi_fmul+0x220>
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	2a04      	cmp	r2, #4
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fmul+0x220>
 8000c12:	3304      	adds	r3, #4
 8000c14:	015a      	lsls	r2, r3, #5
 8000c16:	d411      	bmi.n	8000c3c <__aeabi_fmul+0x248>
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e744      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	464a      	mov	r2, r9
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	4313      	orrs	r3, r2
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	0a5b      	lsrs	r3, r3, #9
 8000c2c:	0037      	movs	r7, r6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	e73b      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c32:	9501      	str	r5, [sp, #4]
 8000c34:	e787      	b.n	8000b46 <__aeabi_fmul+0x152>
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e736      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e733      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	03db      	lsls	r3, r3, #15
 8000c46:	4323      	orrs	r3, r4
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	0a5b      	lsrs	r3, r3, #9
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	e72c      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c50:	08005ccc 	.word	0x08005ccc
 8000c54:	f7ffffff 	.word	0xf7ffffff

08000c58 <__aeabi_fsub>:
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	4647      	mov	r7, r8
 8000c5c:	46ce      	mov	lr, r9
 8000c5e:	0044      	lsls	r4, r0, #1
 8000c60:	0fc2      	lsrs	r2, r0, #31
 8000c62:	b580      	push	{r7, lr}
 8000c64:	0247      	lsls	r7, r0, #9
 8000c66:	0248      	lsls	r0, r1, #9
 8000c68:	0a40      	lsrs	r0, r0, #9
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	4666      	mov	r6, ip
 8000c6e:	0048      	lsls	r0, r1, #1
 8000c70:	0a7f      	lsrs	r7, r7, #9
 8000c72:	0e24      	lsrs	r4, r4, #24
 8000c74:	00f6      	lsls	r6, r6, #3
 8000c76:	0025      	movs	r5, r4
 8000c78:	4690      	mov	r8, r2
 8000c7a:	00fb      	lsls	r3, r7, #3
 8000c7c:	0e00      	lsrs	r0, r0, #24
 8000c7e:	0fc9      	lsrs	r1, r1, #31
 8000c80:	46b1      	mov	r9, r6
 8000c82:	28ff      	cmp	r0, #255	; 0xff
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x30>
 8000c86:	e085      	b.n	8000d94 <__aeabi_fsub+0x13c>
 8000c88:	2601      	movs	r6, #1
 8000c8a:	4071      	eors	r1, r6
 8000c8c:	1a26      	subs	r6, r4, r0
 8000c8e:	4291      	cmp	r1, r2
 8000c90:	d057      	beq.n	8000d42 <__aeabi_fsub+0xea>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	dd43      	ble.n	8000d1e <__aeabi_fsub+0xc6>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fsub+0x44>
 8000c9a:	e07f      	b.n	8000d9c <__aeabi_fsub+0x144>
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x4c>
 8000ca2:	e0aa      	b.n	8000dfa <__aeabi_fsub+0x1a2>
 8000ca4:	3e01      	subs	r6, #1
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d000      	beq.n	8000cac <__aeabi_fsub+0x54>
 8000caa:	e0f7      	b.n	8000e9c <__aeabi_fsub+0x244>
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fsub+0x5c>
 8000cb2:	e08b      	b.n	8000dcc <__aeabi_fsub+0x174>
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	099c      	lsrs	r4, r3, #6
 8000cb8:	0020      	movs	r0, r4
 8000cba:	f001 ffd5 	bl	8002c68 <__clzsi2>
 8000cbe:	3805      	subs	r0, #5
 8000cc0:	4084      	lsls	r4, r0
 8000cc2:	4285      	cmp	r5, r0
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_fsub+0x70>
 8000cc6:	e0d3      	b.n	8000e70 <__aeabi_fsub+0x218>
 8000cc8:	1b45      	subs	r5, r0, r5
 8000cca:	0023      	movs	r3, r4
 8000ccc:	2020      	movs	r0, #32
 8000cce:	3501      	adds	r5, #1
 8000cd0:	40eb      	lsrs	r3, r5
 8000cd2:	1b45      	subs	r5, r0, r5
 8000cd4:	40ac      	lsls	r4, r5
 8000cd6:	1e62      	subs	r2, r4, #1
 8000cd8:	4194      	sbcs	r4, r2
 8000cda:	4323      	orrs	r3, r4
 8000cdc:	2407      	movs	r4, #7
 8000cde:	2500      	movs	r5, #0
 8000ce0:	401c      	ands	r4, r3
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fsub+0x9e>
 8000cec:	210f      	movs	r1, #15
 8000cee:	4019      	ands	r1, r3
 8000cf0:	2904      	cmp	r1, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fsub+0x9e>
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	0159      	lsls	r1, r3, #5
 8000cf8:	d400      	bmi.n	8000cfc <__aeabi_fsub+0xa4>
 8000cfa:	e080      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000cfc:	3501      	adds	r5, #1
 8000cfe:	b2ec      	uxtb	r4, r5
 8000d00:	2dff      	cmp	r5, #255	; 0xff
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0xae>
 8000d04:	e0a3      	b.n	8000e4e <__aeabi_fsub+0x1f6>
 8000d06:	24ff      	movs	r4, #255	; 0xff
 8000d08:	2300      	movs	r3, #0
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	05e4      	lsls	r4, r4, #23
 8000d0e:	0a58      	lsrs	r0, r3, #9
 8000d10:	07d2      	lsls	r2, r2, #31
 8000d12:	4320      	orrs	r0, r4
 8000d14:	4310      	orrs	r0, r2
 8000d16:	bc0c      	pop	{r2, r3}
 8000d18:	4690      	mov	r8, r2
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d174      	bne.n	8000e0c <__aeabi_fsub+0x1b4>
 8000d22:	1c60      	adds	r0, r4, #1
 8000d24:	b2c0      	uxtb	r0, r0
 8000d26:	2801      	cmp	r0, #1
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_fsub+0xd4>
 8000d2a:	e0a7      	b.n	8000e7c <__aeabi_fsub+0x224>
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	1a9c      	subs	r4, r3, r2
 8000d30:	0162      	lsls	r2, r4, #5
 8000d32:	d500      	bpl.n	8000d36 <__aeabi_fsub+0xde>
 8000d34:	e0b6      	b.n	8000ea4 <__aeabi_fsub+0x24c>
 8000d36:	2c00      	cmp	r4, #0
 8000d38:	d1be      	bne.n	8000cb8 <__aeabi_fsub+0x60>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e7e3      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	dc00      	bgt.n	8000d48 <__aeabi_fsub+0xf0>
 8000d46:	e085      	b.n	8000e54 <__aeabi_fsub+0x1fc>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d046      	beq.n	8000dda <__aeabi_fsub+0x182>
 8000d4c:	2cff      	cmp	r4, #255	; 0xff
 8000d4e:	d049      	beq.n	8000de4 <__aeabi_fsub+0x18c>
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	4648      	mov	r0, r9
 8000d54:	04d2      	lsls	r2, r2, #19
 8000d56:	4310      	orrs	r0, r2
 8000d58:	4681      	mov	r9, r0
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2e1b      	cmp	r6, #27
 8000d5e:	dc09      	bgt.n	8000d74 <__aeabi_fsub+0x11c>
 8000d60:	2020      	movs	r0, #32
 8000d62:	464c      	mov	r4, r9
 8000d64:	1b80      	subs	r0, r0, r6
 8000d66:	4084      	lsls	r4, r0
 8000d68:	464a      	mov	r2, r9
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	40f2      	lsrs	r2, r6
 8000d6e:	1e44      	subs	r4, r0, #1
 8000d70:	41a0      	sbcs	r0, r4
 8000d72:	4302      	orrs	r2, r0
 8000d74:	189b      	adds	r3, r3, r2
 8000d76:	015a      	lsls	r2, r3, #5
 8000d78:	d528      	bpl.n	8000dcc <__aeabi_fsub+0x174>
 8000d7a:	3501      	adds	r5, #1
 8000d7c:	2dff      	cmp	r5, #255	; 0xff
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fsub+0x12a>
 8000d80:	e0a8      	b.n	8000ed4 <__aeabi_fsub+0x27c>
 8000d82:	2201      	movs	r2, #1
 8000d84:	2407      	movs	r4, #7
 8000d86:	4994      	ldr	r1, [pc, #592]	; (8000fd8 <__aeabi_fsub+0x380>)
 8000d88:	401a      	ands	r2, r3
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	401c      	ands	r4, r3
 8000d92:	e7a6      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_fsub+0x142>
 8000d98:	e778      	b.n	8000c8c <__aeabi_fsub+0x34>
 8000d9a:	e775      	b.n	8000c88 <__aeabi_fsub+0x30>
 8000d9c:	2cff      	cmp	r4, #255	; 0xff
 8000d9e:	d054      	beq.n	8000e4a <__aeabi_fsub+0x1f2>
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	4649      	mov	r1, r9
 8000da4:	04d2      	lsls	r2, r2, #19
 8000da6:	4311      	orrs	r1, r2
 8000da8:	4689      	mov	r9, r1
 8000daa:	2201      	movs	r2, #1
 8000dac:	2e1b      	cmp	r6, #27
 8000dae:	dc09      	bgt.n	8000dc4 <__aeabi_fsub+0x16c>
 8000db0:	2120      	movs	r1, #32
 8000db2:	4648      	mov	r0, r9
 8000db4:	1b89      	subs	r1, r1, r6
 8000db6:	4088      	lsls	r0, r1
 8000db8:	464a      	mov	r2, r9
 8000dba:	0001      	movs	r1, r0
 8000dbc:	40f2      	lsrs	r2, r6
 8000dbe:	1e48      	subs	r0, r1, #1
 8000dc0:	4181      	sbcs	r1, r0
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d500      	bpl.n	8000dcc <__aeabi_fsub+0x174>
 8000dca:	e773      	b.n	8000cb4 <__aeabi_fsub+0x5c>
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4641      	mov	r1, r8
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	0759      	lsls	r1, r3, #29
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_fsub+0x180>
 8000dd6:	e789      	b.n	8000cec <__aeabi_fsub+0x94>
 8000dd8:	e011      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000dda:	4648      	mov	r0, r9
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d158      	bne.n	8000e92 <__aeabi_fsub+0x23a>
 8000de0:	2cff      	cmp	r4, #255	; 0xff
 8000de2:	d10c      	bne.n	8000dfe <__aeabi_fsub+0x1a6>
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x194>
 8000dea:	e78c      	b.n	8000d06 <__aeabi_fsub+0xae>
 8000dec:	2080      	movs	r0, #128	; 0x80
 8000dee:	03c0      	lsls	r0, r0, #15
 8000df0:	4303      	orrs	r3, r0
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	0a5b      	lsrs	r3, r3, #9
 8000df6:	24ff      	movs	r4, #255	; 0xff
 8000df8:	e787      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d025      	beq.n	8000e4a <__aeabi_fsub+0x1f2>
 8000dfe:	08db      	lsrs	r3, r3, #3
 8000e00:	2dff      	cmp	r5, #255	; 0xff
 8000e02:	d0f0      	beq.n	8000de6 <__aeabi_fsub+0x18e>
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	b2ec      	uxtb	r4, r5
 8000e0a:	e77e      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d04d      	beq.n	8000eac <__aeabi_fsub+0x254>
 8000e10:	28ff      	cmp	r0, #255	; 0xff
 8000e12:	d018      	beq.n	8000e46 <__aeabi_fsub+0x1ee>
 8000e14:	2480      	movs	r4, #128	; 0x80
 8000e16:	04e4      	lsls	r4, r4, #19
 8000e18:	4272      	negs	r2, r6
 8000e1a:	4323      	orrs	r3, r4
 8000e1c:	2a1b      	cmp	r2, #27
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_fsub+0x1ca>
 8000e20:	e0c4      	b.n	8000fac <__aeabi_fsub+0x354>
 8000e22:	001c      	movs	r4, r3
 8000e24:	2520      	movs	r5, #32
 8000e26:	40d4      	lsrs	r4, r2
 8000e28:	1aaa      	subs	r2, r5, r2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	4193      	sbcs	r3, r2
 8000e30:	4323      	orrs	r3, r4
 8000e32:	464a      	mov	r2, r9
 8000e34:	0005      	movs	r5, r0
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	4688      	mov	r8, r1
 8000e3a:	e738      	b.n	8000cae <__aeabi_fsub+0x56>
 8000e3c:	1c72      	adds	r2, r6, #1
 8000e3e:	d0f8      	beq.n	8000e32 <__aeabi_fsub+0x1da>
 8000e40:	43f2      	mvns	r2, r6
 8000e42:	28ff      	cmp	r0, #255	; 0xff
 8000e44:	d1ea      	bne.n	8000e1c <__aeabi_fsub+0x1c4>
 8000e46:	000a      	movs	r2, r1
 8000e48:	464b      	mov	r3, r9
 8000e4a:	25ff      	movs	r5, #255	; 0xff
 8000e4c:	e7d7      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000e4e:	019b      	lsls	r3, r3, #6
 8000e50:	0a5b      	lsrs	r3, r3, #9
 8000e52:	e75a      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d141      	bne.n	8000edc <__aeabi_fsub+0x284>
 8000e58:	1c65      	adds	r5, r4, #1
 8000e5a:	b2e9      	uxtb	r1, r5
 8000e5c:	2901      	cmp	r1, #1
 8000e5e:	dd45      	ble.n	8000eec <__aeabi_fsub+0x294>
 8000e60:	2dff      	cmp	r5, #255	; 0xff
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fsub+0x20e>
 8000e64:	e74f      	b.n	8000d06 <__aeabi_fsub+0xae>
 8000e66:	2407      	movs	r4, #7
 8000e68:	444b      	add	r3, r9
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	401c      	ands	r4, r3
 8000e6e:	e738      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000e70:	2207      	movs	r2, #7
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <__aeabi_fsub+0x384>)
 8000e74:	1a2d      	subs	r5, r5, r0
 8000e76:	4023      	ands	r3, r4
 8000e78:	4014      	ands	r4, r2
 8000e7a:	e732      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000e7c:	2c00      	cmp	r4, #0
 8000e7e:	d11d      	bne.n	8000ebc <__aeabi_fsub+0x264>
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d17a      	bne.n	8000f7a <__aeabi_fsub+0x322>
 8000e84:	464b      	mov	r3, r9
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x234>
 8000e8a:	e091      	b.n	8000fb0 <__aeabi_fsub+0x358>
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	2500      	movs	r5, #0
 8000e90:	e7b5      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000e92:	3e01      	subs	r6, #1
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d119      	bne.n	8000ecc <__aeabi_fsub+0x274>
 8000e98:	444b      	add	r3, r9
 8000e9a:	e76c      	b.n	8000d76 <__aeabi_fsub+0x11e>
 8000e9c:	2cff      	cmp	r4, #255	; 0xff
 8000e9e:	d184      	bne.n	8000daa <__aeabi_fsub+0x152>
 8000ea0:	25ff      	movs	r5, #255	; 0xff
 8000ea2:	e7ac      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000ea4:	464a      	mov	r2, r9
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	1ad4      	subs	r4, r2, r3
 8000eaa:	e705      	b.n	8000cb8 <__aeabi_fsub+0x60>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1c5      	bne.n	8000e3c <__aeabi_fsub+0x1e4>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	28ff      	cmp	r0, #255	; 0xff
 8000eb4:	d0c8      	beq.n	8000e48 <__aeabi_fsub+0x1f0>
 8000eb6:	0005      	movs	r5, r0
 8000eb8:	464b      	mov	r3, r9
 8000eba:	e7a0      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d149      	bne.n	8000f54 <__aeabi_fsub+0x2fc>
 8000ec0:	464b      	mov	r3, r9
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d077      	beq.n	8000fb6 <__aeabi_fsub+0x35e>
 8000ec6:	000a      	movs	r2, r1
 8000ec8:	25ff      	movs	r5, #255	; 0xff
 8000eca:	e798      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000ecc:	2cff      	cmp	r4, #255	; 0xff
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_fsub+0x27a>
 8000ed0:	e743      	b.n	8000d5a <__aeabi_fsub+0x102>
 8000ed2:	e787      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	24ff      	movs	r4, #255	; 0xff
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e716      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d115      	bne.n	8000f0c <__aeabi_fsub+0x2b4>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d157      	bne.n	8000f94 <__aeabi_fsub+0x33c>
 8000ee4:	28ff      	cmp	r0, #255	; 0xff
 8000ee6:	d1e6      	bne.n	8000eb6 <__aeabi_fsub+0x25e>
 8000ee8:	464b      	mov	r3, r9
 8000eea:	e77b      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d120      	bne.n	8000f32 <__aeabi_fsub+0x2da>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d057      	beq.n	8000fa4 <__aeabi_fsub+0x34c>
 8000ef4:	4649      	mov	r1, r9
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	d053      	beq.n	8000fa2 <__aeabi_fsub+0x34a>
 8000efa:	444b      	add	r3, r9
 8000efc:	015a      	lsls	r2, r3, #5
 8000efe:	d568      	bpl.n	8000fd2 <__aeabi_fsub+0x37a>
 8000f00:	2407      	movs	r4, #7
 8000f02:	4a36      	ldr	r2, [pc, #216]	; (8000fdc <__aeabi_fsub+0x384>)
 8000f04:	401c      	ands	r4, r3
 8000f06:	2501      	movs	r5, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	e6ea      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000f0c:	28ff      	cmp	r0, #255	; 0xff
 8000f0e:	d0eb      	beq.n	8000ee8 <__aeabi_fsub+0x290>
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	04d2      	lsls	r2, r2, #19
 8000f14:	4276      	negs	r6, r6
 8000f16:	4313      	orrs	r3, r2
 8000f18:	2e1b      	cmp	r6, #27
 8000f1a:	dc53      	bgt.n	8000fc4 <__aeabi_fsub+0x36c>
 8000f1c:	2520      	movs	r5, #32
 8000f1e:	1bad      	subs	r5, r5, r6
 8000f20:	001a      	movs	r2, r3
 8000f22:	40ab      	lsls	r3, r5
 8000f24:	40f2      	lsrs	r2, r6
 8000f26:	1e5c      	subs	r4, r3, #1
 8000f28:	41a3      	sbcs	r3, r4
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	444b      	add	r3, r9
 8000f2e:	0005      	movs	r5, r0
 8000f30:	e721      	b.n	8000d76 <__aeabi_fsub+0x11e>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0d8      	beq.n	8000ee8 <__aeabi_fsub+0x290>
 8000f36:	4649      	mov	r1, r9
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x2e6>
 8000f3c:	e752      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	03c9      	lsls	r1, r1, #15
 8000f42:	420f      	tst	r7, r1
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x2f0>
 8000f46:	e74d      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	4208      	tst	r0, r1
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0x2f8>
 8000f4e:	e749      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f50:	464b      	mov	r3, r9
 8000f52:	e747      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f54:	4648      	mov	r0, r9
 8000f56:	25ff      	movs	r5, #255	; 0xff
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x306>
 8000f5c:	e74f      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	03d2      	lsls	r2, r2, #15
 8000f62:	4217      	tst	r7, r2
 8000f64:	d004      	beq.n	8000f70 <__aeabi_fsub+0x318>
 8000f66:	4660      	mov	r0, ip
 8000f68:	4210      	tst	r0, r2
 8000f6a:	d101      	bne.n	8000f70 <__aeabi_fsub+0x318>
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	4688      	mov	r8, r1
 8000f70:	2201      	movs	r2, #1
 8000f72:	4641      	mov	r1, r8
 8000f74:	25ff      	movs	r5, #255	; 0xff
 8000f76:	400a      	ands	r2, r1
 8000f78:	e741      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000f7a:	4648      	mov	r0, r9
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d01f      	beq.n	8000fc0 <__aeabi_fsub+0x368>
 8000f80:	1a1a      	subs	r2, r3, r0
 8000f82:	0150      	lsls	r0, r2, #5
 8000f84:	d520      	bpl.n	8000fc8 <__aeabi_fsub+0x370>
 8000f86:	464a      	mov	r2, r9
 8000f88:	2407      	movs	r4, #7
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	401c      	ands	r4, r3
 8000f8e:	4688      	mov	r8, r1
 8000f90:	2500      	movs	r5, #0
 8000f92:	e6a6      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000f94:	1c74      	adds	r4, r6, #1
 8000f96:	d0c9      	beq.n	8000f2c <__aeabi_fsub+0x2d4>
 8000f98:	43f6      	mvns	r6, r6
 8000f9a:	28ff      	cmp	r0, #255	; 0xff
 8000f9c:	d1bc      	bne.n	8000f18 <__aeabi_fsub+0x2c0>
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	e720      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	464b      	mov	r3, r9
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	e72b      	b.n	8000e04 <__aeabi_fsub+0x1ac>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e740      	b.n	8000e32 <__aeabi_fsub+0x1da>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e6a9      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	2200      	movs	r2, #0
 8000fba:	03db      	lsls	r3, r3, #15
 8000fbc:	24ff      	movs	r4, #255	; 0xff
 8000fbe:	e6a4      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	e71c      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e7b1      	b.n	8000f2c <__aeabi_fsub+0x2d4>
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d0f1      	beq.n	8000fb0 <__aeabi_fsub+0x358>
 8000fcc:	0013      	movs	r3, r2
 8000fce:	2500      	movs	r5, #0
 8000fd0:	e6fc      	b.n	8000dcc <__aeabi_fsub+0x174>
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	e6fa      	b.n	8000dcc <__aeabi_fsub+0x174>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	7dffffff 	.word	0x7dffffff
 8000fdc:	fbffffff 	.word	0xfbffffff

08000fe0 <__aeabi_ui2f>:
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	1e04      	subs	r4, r0, #0
 8000fe4:	d034      	beq.n	8001050 <__aeabi_ui2f+0x70>
 8000fe6:	f001 fe3f 	bl	8002c68 <__clzsi2>
 8000fea:	229e      	movs	r2, #158	; 0x9e
 8000fec:	1a12      	subs	r2, r2, r0
 8000fee:	2a96      	cmp	r2, #150	; 0x96
 8000ff0:	dc07      	bgt.n	8001002 <__aeabi_ui2f+0x22>
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	2808      	cmp	r0, #8
 8000ff6:	dd2e      	ble.n	8001056 <__aeabi_ui2f+0x76>
 8000ff8:	3808      	subs	r0, #8
 8000ffa:	4084      	lsls	r4, r0
 8000ffc:	0260      	lsls	r0, r4, #9
 8000ffe:	0a40      	lsrs	r0, r0, #9
 8001000:	e021      	b.n	8001046 <__aeabi_ui2f+0x66>
 8001002:	2a99      	cmp	r2, #153	; 0x99
 8001004:	dd09      	ble.n	800101a <__aeabi_ui2f+0x3a>
 8001006:	0003      	movs	r3, r0
 8001008:	0021      	movs	r1, r4
 800100a:	331b      	adds	r3, #27
 800100c:	4099      	lsls	r1, r3
 800100e:	1e4b      	subs	r3, r1, #1
 8001010:	4199      	sbcs	r1, r3
 8001012:	2305      	movs	r3, #5
 8001014:	1a1b      	subs	r3, r3, r0
 8001016:	40dc      	lsrs	r4, r3
 8001018:	430c      	orrs	r4, r1
 800101a:	2805      	cmp	r0, #5
 800101c:	dd01      	ble.n	8001022 <__aeabi_ui2f+0x42>
 800101e:	1f43      	subs	r3, r0, #5
 8001020:	409c      	lsls	r4, r3
 8001022:	0023      	movs	r3, r4
 8001024:	490d      	ldr	r1, [pc, #52]	; (800105c <__aeabi_ui2f+0x7c>)
 8001026:	400b      	ands	r3, r1
 8001028:	0765      	lsls	r5, r4, #29
 800102a:	d009      	beq.n	8001040 <__aeabi_ui2f+0x60>
 800102c:	250f      	movs	r5, #15
 800102e:	402c      	ands	r4, r5
 8001030:	2c04      	cmp	r4, #4
 8001032:	d005      	beq.n	8001040 <__aeabi_ui2f+0x60>
 8001034:	3304      	adds	r3, #4
 8001036:	015c      	lsls	r4, r3, #5
 8001038:	d502      	bpl.n	8001040 <__aeabi_ui2f+0x60>
 800103a:	229f      	movs	r2, #159	; 0x9f
 800103c:	400b      	ands	r3, r1
 800103e:	1a12      	subs	r2, r2, r0
 8001040:	019b      	lsls	r3, r3, #6
 8001042:	0a58      	lsrs	r0, r3, #9
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	0240      	lsls	r0, r0, #9
 8001048:	05d2      	lsls	r2, r2, #23
 800104a:	0a40      	lsrs	r0, r0, #9
 800104c:	4310      	orrs	r0, r2
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	2200      	movs	r2, #0
 8001052:	2000      	movs	r0, #0
 8001054:	e7f7      	b.n	8001046 <__aeabi_ui2f+0x66>
 8001056:	0260      	lsls	r0, r4, #9
 8001058:	0a40      	lsrs	r0, r0, #9
 800105a:	e7f4      	b.n	8001046 <__aeabi_ui2f+0x66>
 800105c:	fbffffff 	.word	0xfbffffff

08001060 <__aeabi_dadd>:
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	464f      	mov	r7, r9
 8001064:	4646      	mov	r6, r8
 8001066:	46d6      	mov	lr, sl
 8001068:	000c      	movs	r4, r1
 800106a:	0309      	lsls	r1, r1, #12
 800106c:	b5c0      	push	{r6, r7, lr}
 800106e:	0a49      	lsrs	r1, r1, #9
 8001070:	0f47      	lsrs	r7, r0, #29
 8001072:	005e      	lsls	r6, r3, #1
 8001074:	4339      	orrs	r1, r7
 8001076:	031f      	lsls	r7, r3, #12
 8001078:	0fdb      	lsrs	r3, r3, #31
 800107a:	469c      	mov	ip, r3
 800107c:	0065      	lsls	r5, r4, #1
 800107e:	0a7b      	lsrs	r3, r7, #9
 8001080:	0f57      	lsrs	r7, r2, #29
 8001082:	431f      	orrs	r7, r3
 8001084:	0d6d      	lsrs	r5, r5, #21
 8001086:	0fe4      	lsrs	r4, r4, #31
 8001088:	0d76      	lsrs	r6, r6, #21
 800108a:	46a1      	mov	r9, r4
 800108c:	00c0      	lsls	r0, r0, #3
 800108e:	46b8      	mov	r8, r7
 8001090:	00d2      	lsls	r2, r2, #3
 8001092:	1bab      	subs	r3, r5, r6
 8001094:	4564      	cmp	r4, ip
 8001096:	d07b      	beq.n	8001190 <__aeabi_dadd+0x130>
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd5f      	ble.n	800115c <__aeabi_dadd+0xfc>
 800109c:	2e00      	cmp	r6, #0
 800109e:	d000      	beq.n	80010a2 <__aeabi_dadd+0x42>
 80010a0:	e0a4      	b.n	80011ec <__aeabi_dadd+0x18c>
 80010a2:	003e      	movs	r6, r7
 80010a4:	4316      	orrs	r6, r2
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x4a>
 80010a8:	e112      	b.n	80012d0 <__aeabi_dadd+0x270>
 80010aa:	1e5e      	subs	r6, r3, #1
 80010ac:	2e00      	cmp	r6, #0
 80010ae:	d000      	beq.n	80010b2 <__aeabi_dadd+0x52>
 80010b0:	e19e      	b.n	80013f0 <__aeabi_dadd+0x390>
 80010b2:	1a87      	subs	r7, r0, r2
 80010b4:	4643      	mov	r3, r8
 80010b6:	42b8      	cmp	r0, r7
 80010b8:	4180      	sbcs	r0, r0
 80010ba:	2501      	movs	r5, #1
 80010bc:	1ac9      	subs	r1, r1, r3
 80010be:	4240      	negs	r0, r0
 80010c0:	1a09      	subs	r1, r1, r0
 80010c2:	020b      	lsls	r3, r1, #8
 80010c4:	d400      	bmi.n	80010c8 <__aeabi_dadd+0x68>
 80010c6:	e131      	b.n	800132c <__aeabi_dadd+0x2cc>
 80010c8:	0249      	lsls	r1, r1, #9
 80010ca:	0a4e      	lsrs	r6, r1, #9
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	d100      	bne.n	80010d2 <__aeabi_dadd+0x72>
 80010d0:	e16e      	b.n	80013b0 <__aeabi_dadd+0x350>
 80010d2:	0030      	movs	r0, r6
 80010d4:	f001 fdc8 	bl	8002c68 <__clzsi2>
 80010d8:	0003      	movs	r3, r0
 80010da:	3b08      	subs	r3, #8
 80010dc:	2b1f      	cmp	r3, #31
 80010de:	dd00      	ble.n	80010e2 <__aeabi_dadd+0x82>
 80010e0:	e161      	b.n	80013a6 <__aeabi_dadd+0x346>
 80010e2:	2220      	movs	r2, #32
 80010e4:	0039      	movs	r1, r7
 80010e6:	1ad2      	subs	r2, r2, r3
 80010e8:	409e      	lsls	r6, r3
 80010ea:	40d1      	lsrs	r1, r2
 80010ec:	409f      	lsls	r7, r3
 80010ee:	430e      	orrs	r6, r1
 80010f0:	429d      	cmp	r5, r3
 80010f2:	dd00      	ble.n	80010f6 <__aeabi_dadd+0x96>
 80010f4:	e151      	b.n	800139a <__aeabi_dadd+0x33a>
 80010f6:	1b5d      	subs	r5, r3, r5
 80010f8:	1c6b      	adds	r3, r5, #1
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	dd00      	ble.n	8001100 <__aeabi_dadd+0xa0>
 80010fe:	e17c      	b.n	80013fa <__aeabi_dadd+0x39a>
 8001100:	2120      	movs	r1, #32
 8001102:	1ac9      	subs	r1, r1, r3
 8001104:	003d      	movs	r5, r7
 8001106:	0030      	movs	r0, r6
 8001108:	408f      	lsls	r7, r1
 800110a:	4088      	lsls	r0, r1
 800110c:	40dd      	lsrs	r5, r3
 800110e:	1e79      	subs	r1, r7, #1
 8001110:	418f      	sbcs	r7, r1
 8001112:	0031      	movs	r1, r6
 8001114:	2207      	movs	r2, #7
 8001116:	4328      	orrs	r0, r5
 8001118:	40d9      	lsrs	r1, r3
 800111a:	2500      	movs	r5, #0
 800111c:	4307      	orrs	r7, r0
 800111e:	403a      	ands	r2, r7
 8001120:	2a00      	cmp	r2, #0
 8001122:	d009      	beq.n	8001138 <__aeabi_dadd+0xd8>
 8001124:	230f      	movs	r3, #15
 8001126:	403b      	ands	r3, r7
 8001128:	2b04      	cmp	r3, #4
 800112a:	d005      	beq.n	8001138 <__aeabi_dadd+0xd8>
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	42bb      	cmp	r3, r7
 8001130:	41bf      	sbcs	r7, r7
 8001132:	427f      	negs	r7, r7
 8001134:	19c9      	adds	r1, r1, r7
 8001136:	001f      	movs	r7, r3
 8001138:	020b      	lsls	r3, r1, #8
 800113a:	d400      	bmi.n	800113e <__aeabi_dadd+0xde>
 800113c:	e226      	b.n	800158c <__aeabi_dadd+0x52c>
 800113e:	1c6a      	adds	r2, r5, #1
 8001140:	4bc6      	ldr	r3, [pc, #792]	; (800145c <__aeabi_dadd+0x3fc>)
 8001142:	0555      	lsls	r5, r2, #21
 8001144:	0d6d      	lsrs	r5, r5, #21
 8001146:	429a      	cmp	r2, r3
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0xec>
 800114a:	e106      	b.n	800135a <__aeabi_dadd+0x2fa>
 800114c:	4ac4      	ldr	r2, [pc, #784]	; (8001460 <__aeabi_dadd+0x400>)
 800114e:	08ff      	lsrs	r7, r7, #3
 8001150:	400a      	ands	r2, r1
 8001152:	0753      	lsls	r3, r2, #29
 8001154:	0252      	lsls	r2, r2, #9
 8001156:	433b      	orrs	r3, r7
 8001158:	0b12      	lsrs	r2, r2, #12
 800115a:	e08e      	b.n	800127a <__aeabi_dadd+0x21a>
 800115c:	2b00      	cmp	r3, #0
 800115e:	d000      	beq.n	8001162 <__aeabi_dadd+0x102>
 8001160:	e0b8      	b.n	80012d4 <__aeabi_dadd+0x274>
 8001162:	1c6b      	adds	r3, r5, #1
 8001164:	055b      	lsls	r3, r3, #21
 8001166:	0d5b      	lsrs	r3, r3, #21
 8001168:	2b01      	cmp	r3, #1
 800116a:	dc00      	bgt.n	800116e <__aeabi_dadd+0x10e>
 800116c:	e130      	b.n	80013d0 <__aeabi_dadd+0x370>
 800116e:	1a87      	subs	r7, r0, r2
 8001170:	4643      	mov	r3, r8
 8001172:	42b8      	cmp	r0, r7
 8001174:	41b6      	sbcs	r6, r6
 8001176:	1acb      	subs	r3, r1, r3
 8001178:	4276      	negs	r6, r6
 800117a:	1b9e      	subs	r6, r3, r6
 800117c:	0233      	lsls	r3, r6, #8
 800117e:	d500      	bpl.n	8001182 <__aeabi_dadd+0x122>
 8001180:	e14c      	b.n	800141c <__aeabi_dadd+0x3bc>
 8001182:	003b      	movs	r3, r7
 8001184:	4333      	orrs	r3, r6
 8001186:	d1a1      	bne.n	80010cc <__aeabi_dadd+0x6c>
 8001188:	2200      	movs	r2, #0
 800118a:	2400      	movs	r4, #0
 800118c:	2500      	movs	r5, #0
 800118e:	e070      	b.n	8001272 <__aeabi_dadd+0x212>
 8001190:	2b00      	cmp	r3, #0
 8001192:	dc00      	bgt.n	8001196 <__aeabi_dadd+0x136>
 8001194:	e0e5      	b.n	8001362 <__aeabi_dadd+0x302>
 8001196:	2e00      	cmp	r6, #0
 8001198:	d100      	bne.n	800119c <__aeabi_dadd+0x13c>
 800119a:	e083      	b.n	80012a4 <__aeabi_dadd+0x244>
 800119c:	4eaf      	ldr	r6, [pc, #700]	; (800145c <__aeabi_dadd+0x3fc>)
 800119e:	42b5      	cmp	r5, r6
 80011a0:	d060      	beq.n	8001264 <__aeabi_dadd+0x204>
 80011a2:	2680      	movs	r6, #128	; 0x80
 80011a4:	0436      	lsls	r6, r6, #16
 80011a6:	4337      	orrs	r7, r6
 80011a8:	46b8      	mov	r8, r7
 80011aa:	2b38      	cmp	r3, #56	; 0x38
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_dadd+0x150>
 80011ae:	e13e      	b.n	800142e <__aeabi_dadd+0x3ce>
 80011b0:	4643      	mov	r3, r8
 80011b2:	4313      	orrs	r3, r2
 80011b4:	001f      	movs	r7, r3
 80011b6:	1e7a      	subs	r2, r7, #1
 80011b8:	4197      	sbcs	r7, r2
 80011ba:	183f      	adds	r7, r7, r0
 80011bc:	4287      	cmp	r7, r0
 80011be:	4180      	sbcs	r0, r0
 80011c0:	4240      	negs	r0, r0
 80011c2:	1809      	adds	r1, r1, r0
 80011c4:	020b      	lsls	r3, r1, #8
 80011c6:	d400      	bmi.n	80011ca <__aeabi_dadd+0x16a>
 80011c8:	e0b0      	b.n	800132c <__aeabi_dadd+0x2cc>
 80011ca:	4ba4      	ldr	r3, [pc, #656]	; (800145c <__aeabi_dadd+0x3fc>)
 80011cc:	3501      	adds	r5, #1
 80011ce:	429d      	cmp	r5, r3
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dadd+0x174>
 80011d2:	e0c3      	b.n	800135c <__aeabi_dadd+0x2fc>
 80011d4:	4aa2      	ldr	r2, [pc, #648]	; (8001460 <__aeabi_dadd+0x400>)
 80011d6:	087b      	lsrs	r3, r7, #1
 80011d8:	400a      	ands	r2, r1
 80011da:	2101      	movs	r1, #1
 80011dc:	400f      	ands	r7, r1
 80011de:	431f      	orrs	r7, r3
 80011e0:	0851      	lsrs	r1, r2, #1
 80011e2:	07d3      	lsls	r3, r2, #31
 80011e4:	2207      	movs	r2, #7
 80011e6:	431f      	orrs	r7, r3
 80011e8:	403a      	ands	r2, r7
 80011ea:	e799      	b.n	8001120 <__aeabi_dadd+0xc0>
 80011ec:	4e9b      	ldr	r6, [pc, #620]	; (800145c <__aeabi_dadd+0x3fc>)
 80011ee:	42b5      	cmp	r5, r6
 80011f0:	d038      	beq.n	8001264 <__aeabi_dadd+0x204>
 80011f2:	2680      	movs	r6, #128	; 0x80
 80011f4:	0436      	lsls	r6, r6, #16
 80011f6:	4337      	orrs	r7, r6
 80011f8:	46b8      	mov	r8, r7
 80011fa:	2b38      	cmp	r3, #56	; 0x38
 80011fc:	dd00      	ble.n	8001200 <__aeabi_dadd+0x1a0>
 80011fe:	e0dc      	b.n	80013ba <__aeabi_dadd+0x35a>
 8001200:	2b1f      	cmp	r3, #31
 8001202:	dc00      	bgt.n	8001206 <__aeabi_dadd+0x1a6>
 8001204:	e130      	b.n	8001468 <__aeabi_dadd+0x408>
 8001206:	001e      	movs	r6, r3
 8001208:	4647      	mov	r7, r8
 800120a:	3e20      	subs	r6, #32
 800120c:	40f7      	lsrs	r7, r6
 800120e:	46bc      	mov	ip, r7
 8001210:	2b20      	cmp	r3, #32
 8001212:	d004      	beq.n	800121e <__aeabi_dadd+0x1be>
 8001214:	2640      	movs	r6, #64	; 0x40
 8001216:	1af3      	subs	r3, r6, r3
 8001218:	4646      	mov	r6, r8
 800121a:	409e      	lsls	r6, r3
 800121c:	4332      	orrs	r2, r6
 800121e:	0017      	movs	r7, r2
 8001220:	4663      	mov	r3, ip
 8001222:	1e7a      	subs	r2, r7, #1
 8001224:	4197      	sbcs	r7, r2
 8001226:	431f      	orrs	r7, r3
 8001228:	e0cc      	b.n	80013c4 <__aeabi_dadd+0x364>
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x1d0>
 800122e:	e204      	b.n	800163a <__aeabi_dadd+0x5da>
 8001230:	4643      	mov	r3, r8
 8001232:	4313      	orrs	r3, r2
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0x1d8>
 8001236:	e159      	b.n	80014ec <__aeabi_dadd+0x48c>
 8001238:	074b      	lsls	r3, r1, #29
 800123a:	08c0      	lsrs	r0, r0, #3
 800123c:	4318      	orrs	r0, r3
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	08c9      	lsrs	r1, r1, #3
 8001242:	031b      	lsls	r3, r3, #12
 8001244:	4219      	tst	r1, r3
 8001246:	d008      	beq.n	800125a <__aeabi_dadd+0x1fa>
 8001248:	4645      	mov	r5, r8
 800124a:	08ed      	lsrs	r5, r5, #3
 800124c:	421d      	tst	r5, r3
 800124e:	d104      	bne.n	800125a <__aeabi_dadd+0x1fa>
 8001250:	4643      	mov	r3, r8
 8001252:	08d0      	lsrs	r0, r2, #3
 8001254:	0759      	lsls	r1, r3, #29
 8001256:	4308      	orrs	r0, r1
 8001258:	0029      	movs	r1, r5
 800125a:	0f42      	lsrs	r2, r0, #29
 800125c:	00c9      	lsls	r1, r1, #3
 800125e:	4d7f      	ldr	r5, [pc, #508]	; (800145c <__aeabi_dadd+0x3fc>)
 8001260:	4311      	orrs	r1, r2
 8001262:	00c0      	lsls	r0, r0, #3
 8001264:	074b      	lsls	r3, r1, #29
 8001266:	08ca      	lsrs	r2, r1, #3
 8001268:	497c      	ldr	r1, [pc, #496]	; (800145c <__aeabi_dadd+0x3fc>)
 800126a:	08c0      	lsrs	r0, r0, #3
 800126c:	4303      	orrs	r3, r0
 800126e:	428d      	cmp	r5, r1
 8001270:	d068      	beq.n	8001344 <__aeabi_dadd+0x2e4>
 8001272:	0312      	lsls	r2, r2, #12
 8001274:	056d      	lsls	r5, r5, #21
 8001276:	0b12      	lsrs	r2, r2, #12
 8001278:	0d6d      	lsrs	r5, r5, #21
 800127a:	2100      	movs	r1, #0
 800127c:	0312      	lsls	r2, r2, #12
 800127e:	0018      	movs	r0, r3
 8001280:	0b13      	lsrs	r3, r2, #12
 8001282:	0d0a      	lsrs	r2, r1, #20
 8001284:	0512      	lsls	r2, r2, #20
 8001286:	431a      	orrs	r2, r3
 8001288:	4b76      	ldr	r3, [pc, #472]	; (8001464 <__aeabi_dadd+0x404>)
 800128a:	052d      	lsls	r5, r5, #20
 800128c:	4013      	ands	r3, r2
 800128e:	432b      	orrs	r3, r5
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	07e4      	lsls	r4, r4, #31
 8001294:	085b      	lsrs	r3, r3, #1
 8001296:	4323      	orrs	r3, r4
 8001298:	0019      	movs	r1, r3
 800129a:	bc1c      	pop	{r2, r3, r4}
 800129c:	4690      	mov	r8, r2
 800129e:	4699      	mov	r9, r3
 80012a0:	46a2      	mov	sl, r4
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a4:	003e      	movs	r6, r7
 80012a6:	4316      	orrs	r6, r2
 80012a8:	d012      	beq.n	80012d0 <__aeabi_dadd+0x270>
 80012aa:	1e5e      	subs	r6, r3, #1
 80012ac:	2e00      	cmp	r6, #0
 80012ae:	d000      	beq.n	80012b2 <__aeabi_dadd+0x252>
 80012b0:	e100      	b.n	80014b4 <__aeabi_dadd+0x454>
 80012b2:	1887      	adds	r7, r0, r2
 80012b4:	4287      	cmp	r7, r0
 80012b6:	4180      	sbcs	r0, r0
 80012b8:	4441      	add	r1, r8
 80012ba:	4240      	negs	r0, r0
 80012bc:	1809      	adds	r1, r1, r0
 80012be:	2501      	movs	r5, #1
 80012c0:	020b      	lsls	r3, r1, #8
 80012c2:	d533      	bpl.n	800132c <__aeabi_dadd+0x2cc>
 80012c4:	2502      	movs	r5, #2
 80012c6:	e785      	b.n	80011d4 <__aeabi_dadd+0x174>
 80012c8:	4664      	mov	r4, ip
 80012ca:	0033      	movs	r3, r6
 80012cc:	4641      	mov	r1, r8
 80012ce:	0010      	movs	r0, r2
 80012d0:	001d      	movs	r5, r3
 80012d2:	e7c7      	b.n	8001264 <__aeabi_dadd+0x204>
 80012d4:	2d00      	cmp	r5, #0
 80012d6:	d000      	beq.n	80012da <__aeabi_dadd+0x27a>
 80012d8:	e0da      	b.n	8001490 <__aeabi_dadd+0x430>
 80012da:	000c      	movs	r4, r1
 80012dc:	4304      	orrs	r4, r0
 80012de:	d0f3      	beq.n	80012c8 <__aeabi_dadd+0x268>
 80012e0:	1c5c      	adds	r4, r3, #1
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dadd+0x286>
 80012e4:	e19f      	b.n	8001626 <__aeabi_dadd+0x5c6>
 80012e6:	4c5d      	ldr	r4, [pc, #372]	; (800145c <__aeabi_dadd+0x3fc>)
 80012e8:	42a6      	cmp	r6, r4
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x28e>
 80012ec:	e12f      	b.n	800154e <__aeabi_dadd+0x4ee>
 80012ee:	43db      	mvns	r3, r3
 80012f0:	2b38      	cmp	r3, #56	; 0x38
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_dadd+0x296>
 80012f4:	e166      	b.n	80015c4 <__aeabi_dadd+0x564>
 80012f6:	2b1f      	cmp	r3, #31
 80012f8:	dd00      	ble.n	80012fc <__aeabi_dadd+0x29c>
 80012fa:	e183      	b.n	8001604 <__aeabi_dadd+0x5a4>
 80012fc:	2420      	movs	r4, #32
 80012fe:	0005      	movs	r5, r0
 8001300:	1ae4      	subs	r4, r4, r3
 8001302:	000f      	movs	r7, r1
 8001304:	40dd      	lsrs	r5, r3
 8001306:	40d9      	lsrs	r1, r3
 8001308:	40a0      	lsls	r0, r4
 800130a:	4643      	mov	r3, r8
 800130c:	40a7      	lsls	r7, r4
 800130e:	1a5b      	subs	r3, r3, r1
 8001310:	1e44      	subs	r4, r0, #1
 8001312:	41a0      	sbcs	r0, r4
 8001314:	4698      	mov	r8, r3
 8001316:	432f      	orrs	r7, r5
 8001318:	4338      	orrs	r0, r7
 800131a:	1a17      	subs	r7, r2, r0
 800131c:	42ba      	cmp	r2, r7
 800131e:	4192      	sbcs	r2, r2
 8001320:	4643      	mov	r3, r8
 8001322:	4252      	negs	r2, r2
 8001324:	1a99      	subs	r1, r3, r2
 8001326:	4664      	mov	r4, ip
 8001328:	0035      	movs	r5, r6
 800132a:	e6ca      	b.n	80010c2 <__aeabi_dadd+0x62>
 800132c:	2207      	movs	r2, #7
 800132e:	403a      	ands	r2, r7
 8001330:	2a00      	cmp	r2, #0
 8001332:	d000      	beq.n	8001336 <__aeabi_dadd+0x2d6>
 8001334:	e6f6      	b.n	8001124 <__aeabi_dadd+0xc4>
 8001336:	074b      	lsls	r3, r1, #29
 8001338:	08ca      	lsrs	r2, r1, #3
 800133a:	4948      	ldr	r1, [pc, #288]	; (800145c <__aeabi_dadd+0x3fc>)
 800133c:	08ff      	lsrs	r7, r7, #3
 800133e:	433b      	orrs	r3, r7
 8001340:	428d      	cmp	r5, r1
 8001342:	d196      	bne.n	8001272 <__aeabi_dadd+0x212>
 8001344:	0019      	movs	r1, r3
 8001346:	4311      	orrs	r1, r2
 8001348:	d100      	bne.n	800134c <__aeabi_dadd+0x2ec>
 800134a:	e19e      	b.n	800168a <__aeabi_dadd+0x62a>
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0309      	lsls	r1, r1, #12
 8001350:	430a      	orrs	r2, r1
 8001352:	0312      	lsls	r2, r2, #12
 8001354:	0b12      	lsrs	r2, r2, #12
 8001356:	4d41      	ldr	r5, [pc, #260]	; (800145c <__aeabi_dadd+0x3fc>)
 8001358:	e78f      	b.n	800127a <__aeabi_dadd+0x21a>
 800135a:	0015      	movs	r5, r2
 800135c:	2200      	movs	r2, #0
 800135e:	2300      	movs	r3, #0
 8001360:	e78b      	b.n	800127a <__aeabi_dadd+0x21a>
 8001362:	2b00      	cmp	r3, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_dadd+0x308>
 8001366:	e0c7      	b.n	80014f8 <__aeabi_dadd+0x498>
 8001368:	1c6b      	adds	r3, r5, #1
 800136a:	055f      	lsls	r7, r3, #21
 800136c:	0d7f      	lsrs	r7, r7, #21
 800136e:	2f01      	cmp	r7, #1
 8001370:	dc00      	bgt.n	8001374 <__aeabi_dadd+0x314>
 8001372:	e0f1      	b.n	8001558 <__aeabi_dadd+0x4f8>
 8001374:	4d39      	ldr	r5, [pc, #228]	; (800145c <__aeabi_dadd+0x3fc>)
 8001376:	42ab      	cmp	r3, r5
 8001378:	d100      	bne.n	800137c <__aeabi_dadd+0x31c>
 800137a:	e0b9      	b.n	80014f0 <__aeabi_dadd+0x490>
 800137c:	1885      	adds	r5, r0, r2
 800137e:	000a      	movs	r2, r1
 8001380:	4285      	cmp	r5, r0
 8001382:	4189      	sbcs	r1, r1
 8001384:	4442      	add	r2, r8
 8001386:	4249      	negs	r1, r1
 8001388:	1851      	adds	r1, r2, r1
 800138a:	2207      	movs	r2, #7
 800138c:	07cf      	lsls	r7, r1, #31
 800138e:	086d      	lsrs	r5, r5, #1
 8001390:	432f      	orrs	r7, r5
 8001392:	0849      	lsrs	r1, r1, #1
 8001394:	403a      	ands	r2, r7
 8001396:	001d      	movs	r5, r3
 8001398:	e6c2      	b.n	8001120 <__aeabi_dadd+0xc0>
 800139a:	2207      	movs	r2, #7
 800139c:	4930      	ldr	r1, [pc, #192]	; (8001460 <__aeabi_dadd+0x400>)
 800139e:	1aed      	subs	r5, r5, r3
 80013a0:	4031      	ands	r1, r6
 80013a2:	403a      	ands	r2, r7
 80013a4:	e6bc      	b.n	8001120 <__aeabi_dadd+0xc0>
 80013a6:	003e      	movs	r6, r7
 80013a8:	3828      	subs	r0, #40	; 0x28
 80013aa:	4086      	lsls	r6, r0
 80013ac:	2700      	movs	r7, #0
 80013ae:	e69f      	b.n	80010f0 <__aeabi_dadd+0x90>
 80013b0:	0038      	movs	r0, r7
 80013b2:	f001 fc59 	bl	8002c68 <__clzsi2>
 80013b6:	3020      	adds	r0, #32
 80013b8:	e68e      	b.n	80010d8 <__aeabi_dadd+0x78>
 80013ba:	4643      	mov	r3, r8
 80013bc:	4313      	orrs	r3, r2
 80013be:	001f      	movs	r7, r3
 80013c0:	1e7a      	subs	r2, r7, #1
 80013c2:	4197      	sbcs	r7, r2
 80013c4:	1bc7      	subs	r7, r0, r7
 80013c6:	42b8      	cmp	r0, r7
 80013c8:	4180      	sbcs	r0, r0
 80013ca:	4240      	negs	r0, r0
 80013cc:	1a09      	subs	r1, r1, r0
 80013ce:	e678      	b.n	80010c2 <__aeabi_dadd+0x62>
 80013d0:	000e      	movs	r6, r1
 80013d2:	003b      	movs	r3, r7
 80013d4:	4306      	orrs	r6, r0
 80013d6:	4313      	orrs	r3, r2
 80013d8:	2d00      	cmp	r5, #0
 80013da:	d161      	bne.n	80014a0 <__aeabi_dadd+0x440>
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d000      	beq.n	80013e2 <__aeabi_dadd+0x382>
 80013e0:	e0f4      	b.n	80015cc <__aeabi_dadd+0x56c>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dadd+0x388>
 80013e6:	e11b      	b.n	8001620 <__aeabi_dadd+0x5c0>
 80013e8:	4664      	mov	r4, ip
 80013ea:	0039      	movs	r1, r7
 80013ec:	0010      	movs	r0, r2
 80013ee:	e739      	b.n	8001264 <__aeabi_dadd+0x204>
 80013f0:	4f1a      	ldr	r7, [pc, #104]	; (800145c <__aeabi_dadd+0x3fc>)
 80013f2:	42bb      	cmp	r3, r7
 80013f4:	d07a      	beq.n	80014ec <__aeabi_dadd+0x48c>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e6ff      	b.n	80011fa <__aeabi_dadd+0x19a>
 80013fa:	0030      	movs	r0, r6
 80013fc:	3d1f      	subs	r5, #31
 80013fe:	40e8      	lsrs	r0, r5
 8001400:	2b20      	cmp	r3, #32
 8001402:	d003      	beq.n	800140c <__aeabi_dadd+0x3ac>
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	1acb      	subs	r3, r1, r3
 8001408:	409e      	lsls	r6, r3
 800140a:	4337      	orrs	r7, r6
 800140c:	1e7b      	subs	r3, r7, #1
 800140e:	419f      	sbcs	r7, r3
 8001410:	2207      	movs	r2, #7
 8001412:	4307      	orrs	r7, r0
 8001414:	403a      	ands	r2, r7
 8001416:	2100      	movs	r1, #0
 8001418:	2500      	movs	r5, #0
 800141a:	e789      	b.n	8001330 <__aeabi_dadd+0x2d0>
 800141c:	1a17      	subs	r7, r2, r0
 800141e:	4643      	mov	r3, r8
 8001420:	42ba      	cmp	r2, r7
 8001422:	41b6      	sbcs	r6, r6
 8001424:	1a59      	subs	r1, r3, r1
 8001426:	4276      	negs	r6, r6
 8001428:	1b8e      	subs	r6, r1, r6
 800142a:	4664      	mov	r4, ip
 800142c:	e64e      	b.n	80010cc <__aeabi_dadd+0x6c>
 800142e:	2b1f      	cmp	r3, #31
 8001430:	dd00      	ble.n	8001434 <__aeabi_dadd+0x3d4>
 8001432:	e0ad      	b.n	8001590 <__aeabi_dadd+0x530>
 8001434:	2620      	movs	r6, #32
 8001436:	4647      	mov	r7, r8
 8001438:	1af6      	subs	r6, r6, r3
 800143a:	40b7      	lsls	r7, r6
 800143c:	46b9      	mov	r9, r7
 800143e:	0017      	movs	r7, r2
 8001440:	46b2      	mov	sl, r6
 8001442:	40df      	lsrs	r7, r3
 8001444:	464e      	mov	r6, r9
 8001446:	433e      	orrs	r6, r7
 8001448:	0037      	movs	r7, r6
 800144a:	4656      	mov	r6, sl
 800144c:	40b2      	lsls	r2, r6
 800144e:	1e56      	subs	r6, r2, #1
 8001450:	41b2      	sbcs	r2, r6
 8001452:	4317      	orrs	r7, r2
 8001454:	4642      	mov	r2, r8
 8001456:	40da      	lsrs	r2, r3
 8001458:	1889      	adds	r1, r1, r2
 800145a:	e6ae      	b.n	80011ba <__aeabi_dadd+0x15a>
 800145c:	000007ff 	.word	0x000007ff
 8001460:	ff7fffff 	.word	0xff7fffff
 8001464:	800fffff 	.word	0x800fffff
 8001468:	2620      	movs	r6, #32
 800146a:	4647      	mov	r7, r8
 800146c:	1af6      	subs	r6, r6, r3
 800146e:	40b7      	lsls	r7, r6
 8001470:	46b9      	mov	r9, r7
 8001472:	0017      	movs	r7, r2
 8001474:	46b2      	mov	sl, r6
 8001476:	40df      	lsrs	r7, r3
 8001478:	464e      	mov	r6, r9
 800147a:	433e      	orrs	r6, r7
 800147c:	0037      	movs	r7, r6
 800147e:	4656      	mov	r6, sl
 8001480:	40b2      	lsls	r2, r6
 8001482:	1e56      	subs	r6, r2, #1
 8001484:	41b2      	sbcs	r2, r6
 8001486:	4317      	orrs	r7, r2
 8001488:	4642      	mov	r2, r8
 800148a:	40da      	lsrs	r2, r3
 800148c:	1a89      	subs	r1, r1, r2
 800148e:	e799      	b.n	80013c4 <__aeabi_dadd+0x364>
 8001490:	4c7f      	ldr	r4, [pc, #508]	; (8001690 <__aeabi_dadd+0x630>)
 8001492:	42a6      	cmp	r6, r4
 8001494:	d05b      	beq.n	800154e <__aeabi_dadd+0x4ee>
 8001496:	2480      	movs	r4, #128	; 0x80
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	425b      	negs	r3, r3
 800149c:	4321      	orrs	r1, r4
 800149e:	e727      	b.n	80012f0 <__aeabi_dadd+0x290>
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	d10c      	bne.n	80014be <__aeabi_dadd+0x45e>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x44a>
 80014a8:	e0cb      	b.n	8001642 <__aeabi_dadd+0x5e2>
 80014aa:	4664      	mov	r4, ip
 80014ac:	0039      	movs	r1, r7
 80014ae:	0010      	movs	r0, r2
 80014b0:	4d77      	ldr	r5, [pc, #476]	; (8001690 <__aeabi_dadd+0x630>)
 80014b2:	e6d7      	b.n	8001264 <__aeabi_dadd+0x204>
 80014b4:	4f76      	ldr	r7, [pc, #472]	; (8001690 <__aeabi_dadd+0x630>)
 80014b6:	42bb      	cmp	r3, r7
 80014b8:	d018      	beq.n	80014ec <__aeabi_dadd+0x48c>
 80014ba:	0033      	movs	r3, r6
 80014bc:	e675      	b.n	80011aa <__aeabi_dadd+0x14a>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d014      	beq.n	80014ec <__aeabi_dadd+0x48c>
 80014c2:	074b      	lsls	r3, r1, #29
 80014c4:	08c0      	lsrs	r0, r0, #3
 80014c6:	4318      	orrs	r0, r3
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	08c9      	lsrs	r1, r1, #3
 80014cc:	031b      	lsls	r3, r3, #12
 80014ce:	4219      	tst	r1, r3
 80014d0:	d007      	beq.n	80014e2 <__aeabi_dadd+0x482>
 80014d2:	08fc      	lsrs	r4, r7, #3
 80014d4:	421c      	tst	r4, r3
 80014d6:	d104      	bne.n	80014e2 <__aeabi_dadd+0x482>
 80014d8:	0779      	lsls	r1, r7, #29
 80014da:	08d0      	lsrs	r0, r2, #3
 80014dc:	4308      	orrs	r0, r1
 80014de:	46e1      	mov	r9, ip
 80014e0:	0021      	movs	r1, r4
 80014e2:	464c      	mov	r4, r9
 80014e4:	0f42      	lsrs	r2, r0, #29
 80014e6:	00c9      	lsls	r1, r1, #3
 80014e8:	4311      	orrs	r1, r2
 80014ea:	00c0      	lsls	r0, r0, #3
 80014ec:	4d68      	ldr	r5, [pc, #416]	; (8001690 <__aeabi_dadd+0x630>)
 80014ee:	e6b9      	b.n	8001264 <__aeabi_dadd+0x204>
 80014f0:	001d      	movs	r5, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	2300      	movs	r3, #0
 80014f6:	e6c0      	b.n	800127a <__aeabi_dadd+0x21a>
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d15b      	bne.n	80015b4 <__aeabi_dadd+0x554>
 80014fc:	000d      	movs	r5, r1
 80014fe:	4305      	orrs	r5, r0
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x4a4>
 8001502:	e6e2      	b.n	80012ca <__aeabi_dadd+0x26a>
 8001504:	1c5d      	adds	r5, r3, #1
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x4aa>
 8001508:	e0b0      	b.n	800166c <__aeabi_dadd+0x60c>
 800150a:	4d61      	ldr	r5, [pc, #388]	; (8001690 <__aeabi_dadd+0x630>)
 800150c:	42ae      	cmp	r6, r5
 800150e:	d01f      	beq.n	8001550 <__aeabi_dadd+0x4f0>
 8001510:	43db      	mvns	r3, r3
 8001512:	2b38      	cmp	r3, #56	; 0x38
 8001514:	dc71      	bgt.n	80015fa <__aeabi_dadd+0x59a>
 8001516:	2b1f      	cmp	r3, #31
 8001518:	dd00      	ble.n	800151c <__aeabi_dadd+0x4bc>
 800151a:	e096      	b.n	800164a <__aeabi_dadd+0x5ea>
 800151c:	2520      	movs	r5, #32
 800151e:	000f      	movs	r7, r1
 8001520:	1aed      	subs	r5, r5, r3
 8001522:	40af      	lsls	r7, r5
 8001524:	46b9      	mov	r9, r7
 8001526:	0007      	movs	r7, r0
 8001528:	46aa      	mov	sl, r5
 800152a:	40df      	lsrs	r7, r3
 800152c:	464d      	mov	r5, r9
 800152e:	433d      	orrs	r5, r7
 8001530:	002f      	movs	r7, r5
 8001532:	4655      	mov	r5, sl
 8001534:	40a8      	lsls	r0, r5
 8001536:	40d9      	lsrs	r1, r3
 8001538:	1e45      	subs	r5, r0, #1
 800153a:	41a8      	sbcs	r0, r5
 800153c:	4488      	add	r8, r1
 800153e:	4307      	orrs	r7, r0
 8001540:	18bf      	adds	r7, r7, r2
 8001542:	4297      	cmp	r7, r2
 8001544:	4192      	sbcs	r2, r2
 8001546:	4251      	negs	r1, r2
 8001548:	4441      	add	r1, r8
 800154a:	0035      	movs	r5, r6
 800154c:	e63a      	b.n	80011c4 <__aeabi_dadd+0x164>
 800154e:	4664      	mov	r4, ip
 8001550:	0035      	movs	r5, r6
 8001552:	4641      	mov	r1, r8
 8001554:	0010      	movs	r0, r2
 8001556:	e685      	b.n	8001264 <__aeabi_dadd+0x204>
 8001558:	000b      	movs	r3, r1
 800155a:	4303      	orrs	r3, r0
 800155c:	2d00      	cmp	r5, #0
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x502>
 8001560:	e663      	b.n	800122a <__aeabi_dadd+0x1ca>
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f5      	beq.n	8001552 <__aeabi_dadd+0x4f2>
 8001566:	4643      	mov	r3, r8
 8001568:	4313      	orrs	r3, r2
 800156a:	d100      	bne.n	800156e <__aeabi_dadd+0x50e>
 800156c:	e67a      	b.n	8001264 <__aeabi_dadd+0x204>
 800156e:	1887      	adds	r7, r0, r2
 8001570:	4287      	cmp	r7, r0
 8001572:	4180      	sbcs	r0, r0
 8001574:	2207      	movs	r2, #7
 8001576:	4441      	add	r1, r8
 8001578:	4240      	negs	r0, r0
 800157a:	1809      	adds	r1, r1, r0
 800157c:	403a      	ands	r2, r7
 800157e:	020b      	lsls	r3, r1, #8
 8001580:	d400      	bmi.n	8001584 <__aeabi_dadd+0x524>
 8001582:	e6d5      	b.n	8001330 <__aeabi_dadd+0x2d0>
 8001584:	4b43      	ldr	r3, [pc, #268]	; (8001694 <__aeabi_dadd+0x634>)
 8001586:	3501      	adds	r5, #1
 8001588:	4019      	ands	r1, r3
 800158a:	e5c9      	b.n	8001120 <__aeabi_dadd+0xc0>
 800158c:	0038      	movs	r0, r7
 800158e:	e669      	b.n	8001264 <__aeabi_dadd+0x204>
 8001590:	001e      	movs	r6, r3
 8001592:	4647      	mov	r7, r8
 8001594:	3e20      	subs	r6, #32
 8001596:	40f7      	lsrs	r7, r6
 8001598:	46bc      	mov	ip, r7
 800159a:	2b20      	cmp	r3, #32
 800159c:	d004      	beq.n	80015a8 <__aeabi_dadd+0x548>
 800159e:	2640      	movs	r6, #64	; 0x40
 80015a0:	1af3      	subs	r3, r6, r3
 80015a2:	4646      	mov	r6, r8
 80015a4:	409e      	lsls	r6, r3
 80015a6:	4332      	orrs	r2, r6
 80015a8:	0017      	movs	r7, r2
 80015aa:	4663      	mov	r3, ip
 80015ac:	1e7a      	subs	r2, r7, #1
 80015ae:	4197      	sbcs	r7, r2
 80015b0:	431f      	orrs	r7, r3
 80015b2:	e602      	b.n	80011ba <__aeabi_dadd+0x15a>
 80015b4:	4d36      	ldr	r5, [pc, #216]	; (8001690 <__aeabi_dadd+0x630>)
 80015b6:	42ae      	cmp	r6, r5
 80015b8:	d0ca      	beq.n	8001550 <__aeabi_dadd+0x4f0>
 80015ba:	2580      	movs	r5, #128	; 0x80
 80015bc:	042d      	lsls	r5, r5, #16
 80015be:	425b      	negs	r3, r3
 80015c0:	4329      	orrs	r1, r5
 80015c2:	e7a6      	b.n	8001512 <__aeabi_dadd+0x4b2>
 80015c4:	4308      	orrs	r0, r1
 80015c6:	1e41      	subs	r1, r0, #1
 80015c8:	4188      	sbcs	r0, r1
 80015ca:	e6a6      	b.n	800131a <__aeabi_dadd+0x2ba>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0x572>
 80015d0:	e648      	b.n	8001264 <__aeabi_dadd+0x204>
 80015d2:	1a87      	subs	r7, r0, r2
 80015d4:	4643      	mov	r3, r8
 80015d6:	42b8      	cmp	r0, r7
 80015d8:	41b6      	sbcs	r6, r6
 80015da:	1acb      	subs	r3, r1, r3
 80015dc:	4276      	negs	r6, r6
 80015de:	1b9e      	subs	r6, r3, r6
 80015e0:	0233      	lsls	r3, r6, #8
 80015e2:	d54b      	bpl.n	800167c <__aeabi_dadd+0x61c>
 80015e4:	1a17      	subs	r7, r2, r0
 80015e6:	4643      	mov	r3, r8
 80015e8:	42ba      	cmp	r2, r7
 80015ea:	4192      	sbcs	r2, r2
 80015ec:	1a59      	subs	r1, r3, r1
 80015ee:	4252      	negs	r2, r2
 80015f0:	1a89      	subs	r1, r1, r2
 80015f2:	2207      	movs	r2, #7
 80015f4:	4664      	mov	r4, ip
 80015f6:	403a      	ands	r2, r7
 80015f8:	e592      	b.n	8001120 <__aeabi_dadd+0xc0>
 80015fa:	4301      	orrs	r1, r0
 80015fc:	000f      	movs	r7, r1
 80015fe:	1e79      	subs	r1, r7, #1
 8001600:	418f      	sbcs	r7, r1
 8001602:	e79d      	b.n	8001540 <__aeabi_dadd+0x4e0>
 8001604:	001c      	movs	r4, r3
 8001606:	000f      	movs	r7, r1
 8001608:	3c20      	subs	r4, #32
 800160a:	40e7      	lsrs	r7, r4
 800160c:	2b20      	cmp	r3, #32
 800160e:	d003      	beq.n	8001618 <__aeabi_dadd+0x5b8>
 8001610:	2440      	movs	r4, #64	; 0x40
 8001612:	1ae3      	subs	r3, r4, r3
 8001614:	4099      	lsls	r1, r3
 8001616:	4308      	orrs	r0, r1
 8001618:	1e41      	subs	r1, r0, #1
 800161a:	4188      	sbcs	r0, r1
 800161c:	4338      	orrs	r0, r7
 800161e:	e67c      	b.n	800131a <__aeabi_dadd+0x2ba>
 8001620:	2200      	movs	r2, #0
 8001622:	2400      	movs	r4, #0
 8001624:	e625      	b.n	8001272 <__aeabi_dadd+0x212>
 8001626:	1a17      	subs	r7, r2, r0
 8001628:	4643      	mov	r3, r8
 800162a:	42ba      	cmp	r2, r7
 800162c:	4192      	sbcs	r2, r2
 800162e:	1a59      	subs	r1, r3, r1
 8001630:	4252      	negs	r2, r2
 8001632:	1a89      	subs	r1, r1, r2
 8001634:	4664      	mov	r4, ip
 8001636:	0035      	movs	r5, r6
 8001638:	e543      	b.n	80010c2 <__aeabi_dadd+0x62>
 800163a:	4641      	mov	r1, r8
 800163c:	0010      	movs	r0, r2
 800163e:	4d14      	ldr	r5, [pc, #80]	; (8001690 <__aeabi_dadd+0x630>)
 8001640:	e610      	b.n	8001264 <__aeabi_dadd+0x204>
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	2400      	movs	r4, #0
 8001646:	0312      	lsls	r2, r2, #12
 8001648:	e680      	b.n	800134c <__aeabi_dadd+0x2ec>
 800164a:	001d      	movs	r5, r3
 800164c:	000f      	movs	r7, r1
 800164e:	3d20      	subs	r5, #32
 8001650:	40ef      	lsrs	r7, r5
 8001652:	46bc      	mov	ip, r7
 8001654:	2b20      	cmp	r3, #32
 8001656:	d003      	beq.n	8001660 <__aeabi_dadd+0x600>
 8001658:	2540      	movs	r5, #64	; 0x40
 800165a:	1aeb      	subs	r3, r5, r3
 800165c:	4099      	lsls	r1, r3
 800165e:	4308      	orrs	r0, r1
 8001660:	0007      	movs	r7, r0
 8001662:	4663      	mov	r3, ip
 8001664:	1e78      	subs	r0, r7, #1
 8001666:	4187      	sbcs	r7, r0
 8001668:	431f      	orrs	r7, r3
 800166a:	e769      	b.n	8001540 <__aeabi_dadd+0x4e0>
 800166c:	1887      	adds	r7, r0, r2
 800166e:	4297      	cmp	r7, r2
 8001670:	419b      	sbcs	r3, r3
 8001672:	4441      	add	r1, r8
 8001674:	425b      	negs	r3, r3
 8001676:	18c9      	adds	r1, r1, r3
 8001678:	0035      	movs	r5, r6
 800167a:	e5a3      	b.n	80011c4 <__aeabi_dadd+0x164>
 800167c:	003b      	movs	r3, r7
 800167e:	4333      	orrs	r3, r6
 8001680:	d0ce      	beq.n	8001620 <__aeabi_dadd+0x5c0>
 8001682:	2207      	movs	r2, #7
 8001684:	0031      	movs	r1, r6
 8001686:	403a      	ands	r2, r7
 8001688:	e652      	b.n	8001330 <__aeabi_dadd+0x2d0>
 800168a:	2300      	movs	r3, #0
 800168c:	001a      	movs	r2, r3
 800168e:	e5f4      	b.n	800127a <__aeabi_dadd+0x21a>
 8001690:	000007ff 	.word	0x000007ff
 8001694:	ff7fffff 	.word	0xff7fffff

08001698 <__aeabi_ddiv>:
 8001698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169a:	4657      	mov	r7, sl
 800169c:	46de      	mov	lr, fp
 800169e:	464e      	mov	r6, r9
 80016a0:	4645      	mov	r5, r8
 80016a2:	b5e0      	push	{r5, r6, r7, lr}
 80016a4:	4683      	mov	fp, r0
 80016a6:	0007      	movs	r7, r0
 80016a8:	030e      	lsls	r6, r1, #12
 80016aa:	0048      	lsls	r0, r1, #1
 80016ac:	b085      	sub	sp, #20
 80016ae:	4692      	mov	sl, r2
 80016b0:	001c      	movs	r4, r3
 80016b2:	0b36      	lsrs	r6, r6, #12
 80016b4:	0d40      	lsrs	r0, r0, #21
 80016b6:	0fcd      	lsrs	r5, r1, #31
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d100      	bne.n	80016be <__aeabi_ddiv+0x26>
 80016bc:	e09d      	b.n	80017fa <__aeabi_ddiv+0x162>
 80016be:	4b95      	ldr	r3, [pc, #596]	; (8001914 <__aeabi_ddiv+0x27c>)
 80016c0:	4298      	cmp	r0, r3
 80016c2:	d039      	beq.n	8001738 <__aeabi_ddiv+0xa0>
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	00f6      	lsls	r6, r6, #3
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431e      	orrs	r6, r3
 80016cc:	4a92      	ldr	r2, [pc, #584]	; (8001918 <__aeabi_ddiv+0x280>)
 80016ce:	0f7b      	lsrs	r3, r7, #29
 80016d0:	4333      	orrs	r3, r6
 80016d2:	4699      	mov	r9, r3
 80016d4:	4694      	mov	ip, r2
 80016d6:	0003      	movs	r3, r0
 80016d8:	4463      	add	r3, ip
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2300      	movs	r3, #0
 80016de:	2600      	movs	r6, #0
 80016e0:	00ff      	lsls	r7, r7, #3
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	0323      	lsls	r3, r4, #12
 80016e6:	0b1b      	lsrs	r3, r3, #12
 80016e8:	4698      	mov	r8, r3
 80016ea:	0063      	lsls	r3, r4, #1
 80016ec:	0fe4      	lsrs	r4, r4, #31
 80016ee:	4652      	mov	r2, sl
 80016f0:	0d5b      	lsrs	r3, r3, #21
 80016f2:	9401      	str	r4, [sp, #4]
 80016f4:	d100      	bne.n	80016f8 <__aeabi_ddiv+0x60>
 80016f6:	e0b3      	b.n	8001860 <__aeabi_ddiv+0x1c8>
 80016f8:	4986      	ldr	r1, [pc, #536]	; (8001914 <__aeabi_ddiv+0x27c>)
 80016fa:	428b      	cmp	r3, r1
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x68>
 80016fe:	e09e      	b.n	800183e <__aeabi_ddiv+0x1a6>
 8001700:	4642      	mov	r2, r8
 8001702:	00d1      	lsls	r1, r2, #3
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	0412      	lsls	r2, r2, #16
 8001708:	430a      	orrs	r2, r1
 800170a:	4651      	mov	r1, sl
 800170c:	0f49      	lsrs	r1, r1, #29
 800170e:	4311      	orrs	r1, r2
 8001710:	468b      	mov	fp, r1
 8001712:	4981      	ldr	r1, [pc, #516]	; (8001918 <__aeabi_ddiv+0x280>)
 8001714:	4652      	mov	r2, sl
 8001716:	468c      	mov	ip, r1
 8001718:	9900      	ldr	r1, [sp, #0]
 800171a:	4463      	add	r3, ip
 800171c:	1acb      	subs	r3, r1, r3
 800171e:	2100      	movs	r1, #0
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	002b      	movs	r3, r5
 8001726:	4063      	eors	r3, r4
 8001728:	469a      	mov	sl, r3
 800172a:	2e0f      	cmp	r6, #15
 800172c:	d900      	bls.n	8001730 <__aeabi_ddiv+0x98>
 800172e:	e105      	b.n	800193c <__aeabi_ddiv+0x2a4>
 8001730:	4b7a      	ldr	r3, [pc, #488]	; (800191c <__aeabi_ddiv+0x284>)
 8001732:	00b6      	lsls	r6, r6, #2
 8001734:	599b      	ldr	r3, [r3, r6]
 8001736:	469f      	mov	pc, r3
 8001738:	465b      	mov	r3, fp
 800173a:	4333      	orrs	r3, r6
 800173c:	4699      	mov	r9, r3
 800173e:	d000      	beq.n	8001742 <__aeabi_ddiv+0xaa>
 8001740:	e0b8      	b.n	80018b4 <__aeabi_ddiv+0x21c>
 8001742:	2302      	movs	r3, #2
 8001744:	2608      	movs	r6, #8
 8001746:	2700      	movs	r7, #0
 8001748:	9000      	str	r0, [sp, #0]
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	e7ca      	b.n	80016e4 <__aeabi_ddiv+0x4c>
 800174e:	46cb      	mov	fp, r9
 8001750:	003a      	movs	r2, r7
 8001752:	9902      	ldr	r1, [sp, #8]
 8001754:	9501      	str	r5, [sp, #4]
 8001756:	9b01      	ldr	r3, [sp, #4]
 8001758:	469a      	mov	sl, r3
 800175a:	2902      	cmp	r1, #2
 800175c:	d027      	beq.n	80017ae <__aeabi_ddiv+0x116>
 800175e:	2903      	cmp	r1, #3
 8001760:	d100      	bne.n	8001764 <__aeabi_ddiv+0xcc>
 8001762:	e280      	b.n	8001c66 <__aeabi_ddiv+0x5ce>
 8001764:	2901      	cmp	r1, #1
 8001766:	d044      	beq.n	80017f2 <__aeabi_ddiv+0x15a>
 8001768:	496d      	ldr	r1, [pc, #436]	; (8001920 <__aeabi_ddiv+0x288>)
 800176a:	9b00      	ldr	r3, [sp, #0]
 800176c:	468c      	mov	ip, r1
 800176e:	4463      	add	r3, ip
 8001770:	001c      	movs	r4, r3
 8001772:	2c00      	cmp	r4, #0
 8001774:	dd38      	ble.n	80017e8 <__aeabi_ddiv+0x150>
 8001776:	0753      	lsls	r3, r2, #29
 8001778:	d000      	beq.n	800177c <__aeabi_ddiv+0xe4>
 800177a:	e213      	b.n	8001ba4 <__aeabi_ddiv+0x50c>
 800177c:	08d2      	lsrs	r2, r2, #3
 800177e:	465b      	mov	r3, fp
 8001780:	01db      	lsls	r3, r3, #7
 8001782:	d509      	bpl.n	8001798 <__aeabi_ddiv+0x100>
 8001784:	4659      	mov	r1, fp
 8001786:	4b67      	ldr	r3, [pc, #412]	; (8001924 <__aeabi_ddiv+0x28c>)
 8001788:	4019      	ands	r1, r3
 800178a:	468b      	mov	fp, r1
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	00c9      	lsls	r1, r1, #3
 8001790:	468c      	mov	ip, r1
 8001792:	9b00      	ldr	r3, [sp, #0]
 8001794:	4463      	add	r3, ip
 8001796:	001c      	movs	r4, r3
 8001798:	4b63      	ldr	r3, [pc, #396]	; (8001928 <__aeabi_ddiv+0x290>)
 800179a:	429c      	cmp	r4, r3
 800179c:	dc07      	bgt.n	80017ae <__aeabi_ddiv+0x116>
 800179e:	465b      	mov	r3, fp
 80017a0:	0564      	lsls	r4, r4, #21
 80017a2:	075f      	lsls	r7, r3, #29
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4317      	orrs	r7, r2
 80017a8:	0b1b      	lsrs	r3, r3, #12
 80017aa:	0d62      	lsrs	r2, r4, #21
 80017ac:	e002      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2700      	movs	r7, #0
 80017b2:	4a58      	ldr	r2, [pc, #352]	; (8001914 <__aeabi_ddiv+0x27c>)
 80017b4:	2100      	movs	r1, #0
 80017b6:	031b      	lsls	r3, r3, #12
 80017b8:	0b1c      	lsrs	r4, r3, #12
 80017ba:	0d0b      	lsrs	r3, r1, #20
 80017bc:	051b      	lsls	r3, r3, #20
 80017be:	4323      	orrs	r3, r4
 80017c0:	0514      	lsls	r4, r2, #20
 80017c2:	4a5a      	ldr	r2, [pc, #360]	; (800192c <__aeabi_ddiv+0x294>)
 80017c4:	0038      	movs	r0, r7
 80017c6:	4013      	ands	r3, r2
 80017c8:	431c      	orrs	r4, r3
 80017ca:	4653      	mov	r3, sl
 80017cc:	0064      	lsls	r4, r4, #1
 80017ce:	07db      	lsls	r3, r3, #31
 80017d0:	0864      	lsrs	r4, r4, #1
 80017d2:	431c      	orrs	r4, r3
 80017d4:	0021      	movs	r1, r4
 80017d6:	b005      	add	sp, #20
 80017d8:	bc3c      	pop	{r2, r3, r4, r5}
 80017da:	4690      	mov	r8, r2
 80017dc:	4699      	mov	r9, r3
 80017de:	46a2      	mov	sl, r4
 80017e0:	46ab      	mov	fp, r5
 80017e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e4:	2201      	movs	r2, #1
 80017e6:	4252      	negs	r2, r2
 80017e8:	2301      	movs	r3, #1
 80017ea:	1b1b      	subs	r3, r3, r4
 80017ec:	2b38      	cmp	r3, #56	; 0x38
 80017ee:	dc00      	bgt.n	80017f2 <__aeabi_ddiv+0x15a>
 80017f0:	e1ad      	b.n	8001b4e <__aeabi_ddiv+0x4b6>
 80017f2:	2200      	movs	r2, #0
 80017f4:	2300      	movs	r3, #0
 80017f6:	2700      	movs	r7, #0
 80017f8:	e7dc      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 80017fa:	465b      	mov	r3, fp
 80017fc:	4333      	orrs	r3, r6
 80017fe:	4699      	mov	r9, r3
 8001800:	d05e      	beq.n	80018c0 <__aeabi_ddiv+0x228>
 8001802:	2e00      	cmp	r6, #0
 8001804:	d100      	bne.n	8001808 <__aeabi_ddiv+0x170>
 8001806:	e18a      	b.n	8001b1e <__aeabi_ddiv+0x486>
 8001808:	0030      	movs	r0, r6
 800180a:	f001 fa2d 	bl	8002c68 <__clzsi2>
 800180e:	0003      	movs	r3, r0
 8001810:	3b0b      	subs	r3, #11
 8001812:	2b1c      	cmp	r3, #28
 8001814:	dd00      	ble.n	8001818 <__aeabi_ddiv+0x180>
 8001816:	e17b      	b.n	8001b10 <__aeabi_ddiv+0x478>
 8001818:	221d      	movs	r2, #29
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	465a      	mov	r2, fp
 800181e:	0001      	movs	r1, r0
 8001820:	40da      	lsrs	r2, r3
 8001822:	3908      	subs	r1, #8
 8001824:	408e      	lsls	r6, r1
 8001826:	0013      	movs	r3, r2
 8001828:	465f      	mov	r7, fp
 800182a:	4333      	orrs	r3, r6
 800182c:	4699      	mov	r9, r3
 800182e:	408f      	lsls	r7, r1
 8001830:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <__aeabi_ddiv+0x298>)
 8001832:	2600      	movs	r6, #0
 8001834:	1a1b      	subs	r3, r3, r0
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	e752      	b.n	80016e4 <__aeabi_ddiv+0x4c>
 800183e:	4641      	mov	r1, r8
 8001840:	4653      	mov	r3, sl
 8001842:	430b      	orrs	r3, r1
 8001844:	493b      	ldr	r1, [pc, #236]	; (8001934 <__aeabi_ddiv+0x29c>)
 8001846:	469b      	mov	fp, r3
 8001848:	468c      	mov	ip, r1
 800184a:	9b00      	ldr	r3, [sp, #0]
 800184c:	4463      	add	r3, ip
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	465b      	mov	r3, fp
 8001852:	2b00      	cmp	r3, #0
 8001854:	d13b      	bne.n	80018ce <__aeabi_ddiv+0x236>
 8001856:	2302      	movs	r3, #2
 8001858:	2200      	movs	r2, #0
 800185a:	431e      	orrs	r6, r3
 800185c:	2102      	movs	r1, #2
 800185e:	e761      	b.n	8001724 <__aeabi_ddiv+0x8c>
 8001860:	4643      	mov	r3, r8
 8001862:	4313      	orrs	r3, r2
 8001864:	469b      	mov	fp, r3
 8001866:	d037      	beq.n	80018d8 <__aeabi_ddiv+0x240>
 8001868:	4643      	mov	r3, r8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d100      	bne.n	8001870 <__aeabi_ddiv+0x1d8>
 800186e:	e162      	b.n	8001b36 <__aeabi_ddiv+0x49e>
 8001870:	4640      	mov	r0, r8
 8001872:	f001 f9f9 	bl	8002c68 <__clzsi2>
 8001876:	0003      	movs	r3, r0
 8001878:	3b0b      	subs	r3, #11
 800187a:	2b1c      	cmp	r3, #28
 800187c:	dd00      	ble.n	8001880 <__aeabi_ddiv+0x1e8>
 800187e:	e153      	b.n	8001b28 <__aeabi_ddiv+0x490>
 8001880:	0002      	movs	r2, r0
 8001882:	4641      	mov	r1, r8
 8001884:	3a08      	subs	r2, #8
 8001886:	4091      	lsls	r1, r2
 8001888:	4688      	mov	r8, r1
 800188a:	211d      	movs	r1, #29
 800188c:	1acb      	subs	r3, r1, r3
 800188e:	4651      	mov	r1, sl
 8001890:	40d9      	lsrs	r1, r3
 8001892:	000b      	movs	r3, r1
 8001894:	4641      	mov	r1, r8
 8001896:	430b      	orrs	r3, r1
 8001898:	469b      	mov	fp, r3
 800189a:	4653      	mov	r3, sl
 800189c:	4093      	lsls	r3, r2
 800189e:	001a      	movs	r2, r3
 80018a0:	9b00      	ldr	r3, [sp, #0]
 80018a2:	4925      	ldr	r1, [pc, #148]	; (8001938 <__aeabi_ddiv+0x2a0>)
 80018a4:	469c      	mov	ip, r3
 80018a6:	4460      	add	r0, ip
 80018a8:	0003      	movs	r3, r0
 80018aa:	468c      	mov	ip, r1
 80018ac:	4463      	add	r3, ip
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2100      	movs	r1, #0
 80018b2:	e737      	b.n	8001724 <__aeabi_ddiv+0x8c>
 80018b4:	2303      	movs	r3, #3
 80018b6:	46b1      	mov	r9, r6
 80018b8:	9000      	str	r0, [sp, #0]
 80018ba:	260c      	movs	r6, #12
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	e711      	b.n	80016e4 <__aeabi_ddiv+0x4c>
 80018c0:	2300      	movs	r3, #0
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	2604      	movs	r6, #4
 80018c8:	2700      	movs	r7, #0
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	e70a      	b.n	80016e4 <__aeabi_ddiv+0x4c>
 80018ce:	2303      	movs	r3, #3
 80018d0:	46c3      	mov	fp, r8
 80018d2:	431e      	orrs	r6, r3
 80018d4:	2103      	movs	r1, #3
 80018d6:	e725      	b.n	8001724 <__aeabi_ddiv+0x8c>
 80018d8:	3301      	adds	r3, #1
 80018da:	431e      	orrs	r6, r3
 80018dc:	2200      	movs	r2, #0
 80018de:	2101      	movs	r1, #1
 80018e0:	e720      	b.n	8001724 <__aeabi_ddiv+0x8c>
 80018e2:	2300      	movs	r3, #0
 80018e4:	469a      	mov	sl, r3
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	2700      	movs	r7, #0
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <__aeabi_ddiv+0x27c>)
 80018ee:	e761      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	4649      	mov	r1, r9
 80018f4:	031b      	lsls	r3, r3, #12
 80018f6:	4219      	tst	r1, r3
 80018f8:	d100      	bne.n	80018fc <__aeabi_ddiv+0x264>
 80018fa:	e0e2      	b.n	8001ac2 <__aeabi_ddiv+0x42a>
 80018fc:	4659      	mov	r1, fp
 80018fe:	4219      	tst	r1, r3
 8001900:	d000      	beq.n	8001904 <__aeabi_ddiv+0x26c>
 8001902:	e0de      	b.n	8001ac2 <__aeabi_ddiv+0x42a>
 8001904:	430b      	orrs	r3, r1
 8001906:	031b      	lsls	r3, r3, #12
 8001908:	0017      	movs	r7, r2
 800190a:	0b1b      	lsrs	r3, r3, #12
 800190c:	46a2      	mov	sl, r4
 800190e:	4a01      	ldr	r2, [pc, #4]	; (8001914 <__aeabi_ddiv+0x27c>)
 8001910:	e750      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	000007ff 	.word	0x000007ff
 8001918:	fffffc01 	.word	0xfffffc01
 800191c:	08005d0c 	.word	0x08005d0c
 8001920:	000003ff 	.word	0x000003ff
 8001924:	feffffff 	.word	0xfeffffff
 8001928:	000007fe 	.word	0x000007fe
 800192c:	800fffff 	.word	0x800fffff
 8001930:	fffffc0d 	.word	0xfffffc0d
 8001934:	fffff801 	.word	0xfffff801
 8001938:	000003f3 	.word	0x000003f3
 800193c:	45d9      	cmp	r9, fp
 800193e:	d900      	bls.n	8001942 <__aeabi_ddiv+0x2aa>
 8001940:	e0cb      	b.n	8001ada <__aeabi_ddiv+0x442>
 8001942:	d100      	bne.n	8001946 <__aeabi_ddiv+0x2ae>
 8001944:	e0c6      	b.n	8001ad4 <__aeabi_ddiv+0x43c>
 8001946:	003c      	movs	r4, r7
 8001948:	4648      	mov	r0, r9
 800194a:	2700      	movs	r7, #0
 800194c:	9b00      	ldr	r3, [sp, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	465b      	mov	r3, fp
 8001954:	0e16      	lsrs	r6, r2, #24
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	431e      	orrs	r6, r3
 800195a:	0213      	lsls	r3, r2, #8
 800195c:	4698      	mov	r8, r3
 800195e:	0433      	lsls	r3, r6, #16
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	4699      	mov	r9, r3
 8001964:	0c31      	lsrs	r1, r6, #16
 8001966:	9101      	str	r1, [sp, #4]
 8001968:	f7fe fc54 	bl	8000214 <__aeabi_uidivmod>
 800196c:	464a      	mov	r2, r9
 800196e:	4342      	muls	r2, r0
 8001970:	040b      	lsls	r3, r1, #16
 8001972:	0c21      	lsrs	r1, r4, #16
 8001974:	0005      	movs	r5, r0
 8001976:	4319      	orrs	r1, r3
 8001978:	428a      	cmp	r2, r1
 800197a:	d907      	bls.n	800198c <__aeabi_ddiv+0x2f4>
 800197c:	1989      	adds	r1, r1, r6
 800197e:	3d01      	subs	r5, #1
 8001980:	428e      	cmp	r6, r1
 8001982:	d803      	bhi.n	800198c <__aeabi_ddiv+0x2f4>
 8001984:	428a      	cmp	r2, r1
 8001986:	d901      	bls.n	800198c <__aeabi_ddiv+0x2f4>
 8001988:	1e85      	subs	r5, r0, #2
 800198a:	1989      	adds	r1, r1, r6
 800198c:	1a88      	subs	r0, r1, r2
 800198e:	9901      	ldr	r1, [sp, #4]
 8001990:	f7fe fc40 	bl	8000214 <__aeabi_uidivmod>
 8001994:	0409      	lsls	r1, r1, #16
 8001996:	468c      	mov	ip, r1
 8001998:	464a      	mov	r2, r9
 800199a:	0421      	lsls	r1, r4, #16
 800199c:	4664      	mov	r4, ip
 800199e:	4342      	muls	r2, r0
 80019a0:	0c09      	lsrs	r1, r1, #16
 80019a2:	0003      	movs	r3, r0
 80019a4:	4321      	orrs	r1, r4
 80019a6:	428a      	cmp	r2, r1
 80019a8:	d904      	bls.n	80019b4 <__aeabi_ddiv+0x31c>
 80019aa:	1989      	adds	r1, r1, r6
 80019ac:	3b01      	subs	r3, #1
 80019ae:	428e      	cmp	r6, r1
 80019b0:	d800      	bhi.n	80019b4 <__aeabi_ddiv+0x31c>
 80019b2:	e0f1      	b.n	8001b98 <__aeabi_ddiv+0x500>
 80019b4:	042d      	lsls	r5, r5, #16
 80019b6:	431d      	orrs	r5, r3
 80019b8:	46ab      	mov	fp, r5
 80019ba:	4643      	mov	r3, r8
 80019bc:	1a89      	subs	r1, r1, r2
 80019be:	4642      	mov	r2, r8
 80019c0:	0c28      	lsrs	r0, r5, #16
 80019c2:	0412      	lsls	r2, r2, #16
 80019c4:	0c1d      	lsrs	r5, r3, #16
 80019c6:	465b      	mov	r3, fp
 80019c8:	0c14      	lsrs	r4, r2, #16
 80019ca:	0022      	movs	r2, r4
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	435a      	muls	r2, r3
 80019d2:	9403      	str	r4, [sp, #12]
 80019d4:	436b      	muls	r3, r5
 80019d6:	4344      	muls	r4, r0
 80019d8:	9502      	str	r5, [sp, #8]
 80019da:	4368      	muls	r0, r5
 80019dc:	191b      	adds	r3, r3, r4
 80019de:	0c15      	lsrs	r5, r2, #16
 80019e0:	18eb      	adds	r3, r5, r3
 80019e2:	429c      	cmp	r4, r3
 80019e4:	d903      	bls.n	80019ee <__aeabi_ddiv+0x356>
 80019e6:	2480      	movs	r4, #128	; 0x80
 80019e8:	0264      	lsls	r4, r4, #9
 80019ea:	46a4      	mov	ip, r4
 80019ec:	4460      	add	r0, ip
 80019ee:	0c1c      	lsrs	r4, r3, #16
 80019f0:	0415      	lsls	r5, r2, #16
 80019f2:	041b      	lsls	r3, r3, #16
 80019f4:	0c2d      	lsrs	r5, r5, #16
 80019f6:	1820      	adds	r0, r4, r0
 80019f8:	195d      	adds	r5, r3, r5
 80019fa:	4281      	cmp	r1, r0
 80019fc:	d377      	bcc.n	8001aee <__aeabi_ddiv+0x456>
 80019fe:	d073      	beq.n	8001ae8 <__aeabi_ddiv+0x450>
 8001a00:	1a0c      	subs	r4, r1, r0
 8001a02:	4aa2      	ldr	r2, [pc, #648]	; (8001c8c <__aeabi_ddiv+0x5f4>)
 8001a04:	1b7d      	subs	r5, r7, r5
 8001a06:	42af      	cmp	r7, r5
 8001a08:	41bf      	sbcs	r7, r7
 8001a0a:	4694      	mov	ip, r2
 8001a0c:	9b00      	ldr	r3, [sp, #0]
 8001a0e:	427f      	negs	r7, r7
 8001a10:	4463      	add	r3, ip
 8001a12:	1be0      	subs	r0, r4, r7
 8001a14:	001c      	movs	r4, r3
 8001a16:	4286      	cmp	r6, r0
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x384>
 8001a1a:	e0db      	b.n	8001bd4 <__aeabi_ddiv+0x53c>
 8001a1c:	9901      	ldr	r1, [sp, #4]
 8001a1e:	f7fe fbf9 	bl	8000214 <__aeabi_uidivmod>
 8001a22:	464a      	mov	r2, r9
 8001a24:	4342      	muls	r2, r0
 8001a26:	040b      	lsls	r3, r1, #16
 8001a28:	0c29      	lsrs	r1, r5, #16
 8001a2a:	0007      	movs	r7, r0
 8001a2c:	4319      	orrs	r1, r3
 8001a2e:	428a      	cmp	r2, r1
 8001a30:	d907      	bls.n	8001a42 <__aeabi_ddiv+0x3aa>
 8001a32:	1989      	adds	r1, r1, r6
 8001a34:	3f01      	subs	r7, #1
 8001a36:	428e      	cmp	r6, r1
 8001a38:	d803      	bhi.n	8001a42 <__aeabi_ddiv+0x3aa>
 8001a3a:	428a      	cmp	r2, r1
 8001a3c:	d901      	bls.n	8001a42 <__aeabi_ddiv+0x3aa>
 8001a3e:	1e87      	subs	r7, r0, #2
 8001a40:	1989      	adds	r1, r1, r6
 8001a42:	1a88      	subs	r0, r1, r2
 8001a44:	9901      	ldr	r1, [sp, #4]
 8001a46:	f7fe fbe5 	bl	8000214 <__aeabi_uidivmod>
 8001a4a:	0409      	lsls	r1, r1, #16
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	4689      	mov	r9, r1
 8001a50:	0429      	lsls	r1, r5, #16
 8001a52:	464d      	mov	r5, r9
 8001a54:	4342      	muls	r2, r0
 8001a56:	0c09      	lsrs	r1, r1, #16
 8001a58:	0003      	movs	r3, r0
 8001a5a:	4329      	orrs	r1, r5
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	d907      	bls.n	8001a70 <__aeabi_ddiv+0x3d8>
 8001a60:	1989      	adds	r1, r1, r6
 8001a62:	3b01      	subs	r3, #1
 8001a64:	428e      	cmp	r6, r1
 8001a66:	d803      	bhi.n	8001a70 <__aeabi_ddiv+0x3d8>
 8001a68:	428a      	cmp	r2, r1
 8001a6a:	d901      	bls.n	8001a70 <__aeabi_ddiv+0x3d8>
 8001a6c:	1e83      	subs	r3, r0, #2
 8001a6e:	1989      	adds	r1, r1, r6
 8001a70:	043f      	lsls	r7, r7, #16
 8001a72:	1a89      	subs	r1, r1, r2
 8001a74:	003a      	movs	r2, r7
 8001a76:	9f03      	ldr	r7, [sp, #12]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	0038      	movs	r0, r7
 8001a7c:	0413      	lsls	r3, r2, #16
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	4358      	muls	r0, r3
 8001a82:	4681      	mov	r9, r0
 8001a84:	9802      	ldr	r0, [sp, #8]
 8001a86:	0c15      	lsrs	r5, r2, #16
 8001a88:	436f      	muls	r7, r5
 8001a8a:	4343      	muls	r3, r0
 8001a8c:	4345      	muls	r5, r0
 8001a8e:	4648      	mov	r0, r9
 8001a90:	0c00      	lsrs	r0, r0, #16
 8001a92:	4684      	mov	ip, r0
 8001a94:	19db      	adds	r3, r3, r7
 8001a96:	4463      	add	r3, ip
 8001a98:	429f      	cmp	r7, r3
 8001a9a:	d903      	bls.n	8001aa4 <__aeabi_ddiv+0x40c>
 8001a9c:	2080      	movs	r0, #128	; 0x80
 8001a9e:	0240      	lsls	r0, r0, #9
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	4465      	add	r5, ip
 8001aa4:	4648      	mov	r0, r9
 8001aa6:	0c1f      	lsrs	r7, r3, #16
 8001aa8:	0400      	lsls	r0, r0, #16
 8001aaa:	041b      	lsls	r3, r3, #16
 8001aac:	0c00      	lsrs	r0, r0, #16
 8001aae:	197d      	adds	r5, r7, r5
 8001ab0:	1818      	adds	r0, r3, r0
 8001ab2:	42a9      	cmp	r1, r5
 8001ab4:	d200      	bcs.n	8001ab8 <__aeabi_ddiv+0x420>
 8001ab6:	e084      	b.n	8001bc2 <__aeabi_ddiv+0x52a>
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x424>
 8001aba:	e07f      	b.n	8001bbc <__aeabi_ddiv+0x524>
 8001abc:	2301      	movs	r3, #1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	e657      	b.n	8001772 <__aeabi_ddiv+0xda>
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	464a      	mov	r2, r9
 8001ac6:	031b      	lsls	r3, r3, #12
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	0b1b      	lsrs	r3, r3, #12
 8001ace:	46aa      	mov	sl, r5
 8001ad0:	4a6f      	ldr	r2, [pc, #444]	; (8001c90 <__aeabi_ddiv+0x5f8>)
 8001ad2:	e66f      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 8001ad4:	42ba      	cmp	r2, r7
 8001ad6:	d900      	bls.n	8001ada <__aeabi_ddiv+0x442>
 8001ad8:	e735      	b.n	8001946 <__aeabi_ddiv+0x2ae>
 8001ada:	464b      	mov	r3, r9
 8001adc:	07dc      	lsls	r4, r3, #31
 8001ade:	0858      	lsrs	r0, r3, #1
 8001ae0:	087b      	lsrs	r3, r7, #1
 8001ae2:	431c      	orrs	r4, r3
 8001ae4:	07ff      	lsls	r7, r7, #31
 8001ae6:	e734      	b.n	8001952 <__aeabi_ddiv+0x2ba>
 8001ae8:	2400      	movs	r4, #0
 8001aea:	42af      	cmp	r7, r5
 8001aec:	d289      	bcs.n	8001a02 <__aeabi_ddiv+0x36a>
 8001aee:	4447      	add	r7, r8
 8001af0:	4547      	cmp	r7, r8
 8001af2:	41a4      	sbcs	r4, r4
 8001af4:	465b      	mov	r3, fp
 8001af6:	4264      	negs	r4, r4
 8001af8:	19a4      	adds	r4, r4, r6
 8001afa:	1864      	adds	r4, r4, r1
 8001afc:	3b01      	subs	r3, #1
 8001afe:	42a6      	cmp	r6, r4
 8001b00:	d21e      	bcs.n	8001b40 <__aeabi_ddiv+0x4a8>
 8001b02:	42a0      	cmp	r0, r4
 8001b04:	d86d      	bhi.n	8001be2 <__aeabi_ddiv+0x54a>
 8001b06:	d100      	bne.n	8001b0a <__aeabi_ddiv+0x472>
 8001b08:	e0b6      	b.n	8001c78 <__aeabi_ddiv+0x5e0>
 8001b0a:	1a24      	subs	r4, r4, r0
 8001b0c:	469b      	mov	fp, r3
 8001b0e:	e778      	b.n	8001a02 <__aeabi_ddiv+0x36a>
 8001b10:	0003      	movs	r3, r0
 8001b12:	465a      	mov	r2, fp
 8001b14:	3b28      	subs	r3, #40	; 0x28
 8001b16:	409a      	lsls	r2, r3
 8001b18:	2700      	movs	r7, #0
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	e688      	b.n	8001830 <__aeabi_ddiv+0x198>
 8001b1e:	4658      	mov	r0, fp
 8001b20:	f001 f8a2 	bl	8002c68 <__clzsi2>
 8001b24:	3020      	adds	r0, #32
 8001b26:	e672      	b.n	800180e <__aeabi_ddiv+0x176>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	4652      	mov	r2, sl
 8001b2c:	3b28      	subs	r3, #40	; 0x28
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	4693      	mov	fp, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	e6b4      	b.n	80018a0 <__aeabi_ddiv+0x208>
 8001b36:	4650      	mov	r0, sl
 8001b38:	f001 f896 	bl	8002c68 <__clzsi2>
 8001b3c:	3020      	adds	r0, #32
 8001b3e:	e69a      	b.n	8001876 <__aeabi_ddiv+0x1de>
 8001b40:	42a6      	cmp	r6, r4
 8001b42:	d1e2      	bne.n	8001b0a <__aeabi_ddiv+0x472>
 8001b44:	45b8      	cmp	r8, r7
 8001b46:	d9dc      	bls.n	8001b02 <__aeabi_ddiv+0x46a>
 8001b48:	1a34      	subs	r4, r6, r0
 8001b4a:	469b      	mov	fp, r3
 8001b4c:	e759      	b.n	8001a02 <__aeabi_ddiv+0x36a>
 8001b4e:	2b1f      	cmp	r3, #31
 8001b50:	dc65      	bgt.n	8001c1e <__aeabi_ddiv+0x586>
 8001b52:	4c50      	ldr	r4, [pc, #320]	; (8001c94 <__aeabi_ddiv+0x5fc>)
 8001b54:	9900      	ldr	r1, [sp, #0]
 8001b56:	46a4      	mov	ip, r4
 8001b58:	465c      	mov	r4, fp
 8001b5a:	4461      	add	r1, ip
 8001b5c:	0008      	movs	r0, r1
 8001b5e:	408c      	lsls	r4, r1
 8001b60:	0011      	movs	r1, r2
 8001b62:	4082      	lsls	r2, r0
 8001b64:	40d9      	lsrs	r1, r3
 8001b66:	1e50      	subs	r0, r2, #1
 8001b68:	4182      	sbcs	r2, r0
 8001b6a:	430c      	orrs	r4, r1
 8001b6c:	4314      	orrs	r4, r2
 8001b6e:	465a      	mov	r2, fp
 8001b70:	40da      	lsrs	r2, r3
 8001b72:	0013      	movs	r3, r2
 8001b74:	0762      	lsls	r2, r4, #29
 8001b76:	d009      	beq.n	8001b8c <__aeabi_ddiv+0x4f4>
 8001b78:	220f      	movs	r2, #15
 8001b7a:	4022      	ands	r2, r4
 8001b7c:	2a04      	cmp	r2, #4
 8001b7e:	d005      	beq.n	8001b8c <__aeabi_ddiv+0x4f4>
 8001b80:	0022      	movs	r2, r4
 8001b82:	1d14      	adds	r4, r2, #4
 8001b84:	4294      	cmp	r4, r2
 8001b86:	4189      	sbcs	r1, r1
 8001b88:	4249      	negs	r1, r1
 8001b8a:	185b      	adds	r3, r3, r1
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	d562      	bpl.n	8001c56 <__aeabi_ddiv+0x5be>
 8001b90:	2201      	movs	r2, #1
 8001b92:	2300      	movs	r3, #0
 8001b94:	2700      	movs	r7, #0
 8001b96:	e60d      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 8001b98:	428a      	cmp	r2, r1
 8001b9a:	d800      	bhi.n	8001b9e <__aeabi_ddiv+0x506>
 8001b9c:	e70a      	b.n	80019b4 <__aeabi_ddiv+0x31c>
 8001b9e:	1e83      	subs	r3, r0, #2
 8001ba0:	1989      	adds	r1, r1, r6
 8001ba2:	e707      	b.n	80019b4 <__aeabi_ddiv+0x31c>
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d100      	bne.n	8001bae <__aeabi_ddiv+0x516>
 8001bac:	e5e6      	b.n	800177c <__aeabi_ddiv+0xe4>
 8001bae:	1d17      	adds	r7, r2, #4
 8001bb0:	4297      	cmp	r7, r2
 8001bb2:	4192      	sbcs	r2, r2
 8001bb4:	4253      	negs	r3, r2
 8001bb6:	449b      	add	fp, r3
 8001bb8:	08fa      	lsrs	r2, r7, #3
 8001bba:	e5e0      	b.n	800177e <__aeabi_ddiv+0xe6>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_ddiv+0x52a>
 8001bc0:	e5d7      	b.n	8001772 <__aeabi_ddiv+0xda>
 8001bc2:	1871      	adds	r1, r6, r1
 8001bc4:	1e53      	subs	r3, r2, #1
 8001bc6:	42b1      	cmp	r1, r6
 8001bc8:	d327      	bcc.n	8001c1a <__aeabi_ddiv+0x582>
 8001bca:	42a9      	cmp	r1, r5
 8001bcc:	d315      	bcc.n	8001bfa <__aeabi_ddiv+0x562>
 8001bce:	d058      	beq.n	8001c82 <__aeabi_ddiv+0x5ea>
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	e773      	b.n	8001abc <__aeabi_ddiv+0x424>
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dc00      	bgt.n	8001bda <__aeabi_ddiv+0x542>
 8001bd8:	e604      	b.n	80017e4 <__aeabi_ddiv+0x14c>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	449b      	add	fp, r3
 8001be0:	e5cd      	b.n	800177e <__aeabi_ddiv+0xe6>
 8001be2:	2302      	movs	r3, #2
 8001be4:	4447      	add	r7, r8
 8001be6:	4547      	cmp	r7, r8
 8001be8:	4189      	sbcs	r1, r1
 8001bea:	425b      	negs	r3, r3
 8001bec:	469c      	mov	ip, r3
 8001bee:	4249      	negs	r1, r1
 8001bf0:	1989      	adds	r1, r1, r6
 8001bf2:	190c      	adds	r4, r1, r4
 8001bf4:	44e3      	add	fp, ip
 8001bf6:	1a24      	subs	r4, r4, r0
 8001bf8:	e703      	b.n	8001a02 <__aeabi_ddiv+0x36a>
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	005f      	lsls	r7, r3, #1
 8001bfe:	4547      	cmp	r7, r8
 8001c00:	419b      	sbcs	r3, r3
 8001c02:	46b8      	mov	r8, r7
 8001c04:	425b      	negs	r3, r3
 8001c06:	199e      	adds	r6, r3, r6
 8001c08:	3a02      	subs	r2, #2
 8001c0a:	1989      	adds	r1, r1, r6
 8001c0c:	42a9      	cmp	r1, r5
 8001c0e:	d000      	beq.n	8001c12 <__aeabi_ddiv+0x57a>
 8001c10:	e754      	b.n	8001abc <__aeabi_ddiv+0x424>
 8001c12:	4540      	cmp	r0, r8
 8001c14:	d000      	beq.n	8001c18 <__aeabi_ddiv+0x580>
 8001c16:	e751      	b.n	8001abc <__aeabi_ddiv+0x424>
 8001c18:	e5ab      	b.n	8001772 <__aeabi_ddiv+0xda>
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	e7f6      	b.n	8001c0c <__aeabi_ddiv+0x574>
 8001c1e:	211f      	movs	r1, #31
 8001c20:	465f      	mov	r7, fp
 8001c22:	4249      	negs	r1, r1
 8001c24:	1b0c      	subs	r4, r1, r4
 8001c26:	40e7      	lsrs	r7, r4
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d007      	beq.n	8001c3c <__aeabi_ddiv+0x5a4>
 8001c2c:	491a      	ldr	r1, [pc, #104]	; (8001c98 <__aeabi_ddiv+0x600>)
 8001c2e:	9b00      	ldr	r3, [sp, #0]
 8001c30:	468c      	mov	ip, r1
 8001c32:	4463      	add	r3, ip
 8001c34:	0018      	movs	r0, r3
 8001c36:	465b      	mov	r3, fp
 8001c38:	4083      	lsls	r3, r0
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	1e50      	subs	r0, r2, #1
 8001c3e:	4182      	sbcs	r2, r0
 8001c40:	433a      	orrs	r2, r7
 8001c42:	2707      	movs	r7, #7
 8001c44:	2300      	movs	r3, #0
 8001c46:	4017      	ands	r7, r2
 8001c48:	d009      	beq.n	8001c5e <__aeabi_ddiv+0x5c6>
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4011      	ands	r1, r2
 8001c50:	0014      	movs	r4, r2
 8001c52:	2904      	cmp	r1, #4
 8001c54:	d195      	bne.n	8001b82 <__aeabi_ddiv+0x4ea>
 8001c56:	0022      	movs	r2, r4
 8001c58:	075f      	lsls	r7, r3, #29
 8001c5a:	025b      	lsls	r3, r3, #9
 8001c5c:	0b1b      	lsrs	r3, r3, #12
 8001c5e:	08d2      	lsrs	r2, r2, #3
 8001c60:	4317      	orrs	r7, r2
 8001c62:	2200      	movs	r2, #0
 8001c64:	e5a6      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	4659      	mov	r1, fp
 8001c6a:	031b      	lsls	r3, r3, #12
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	031b      	lsls	r3, r3, #12
 8001c70:	0017      	movs	r7, r2
 8001c72:	0b1b      	lsrs	r3, r3, #12
 8001c74:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <__aeabi_ddiv+0x5f8>)
 8001c76:	e59d      	b.n	80017b4 <__aeabi_ddiv+0x11c>
 8001c78:	42bd      	cmp	r5, r7
 8001c7a:	d8b2      	bhi.n	8001be2 <__aeabi_ddiv+0x54a>
 8001c7c:	469b      	mov	fp, r3
 8001c7e:	2400      	movs	r4, #0
 8001c80:	e6bf      	b.n	8001a02 <__aeabi_ddiv+0x36a>
 8001c82:	4580      	cmp	r8, r0
 8001c84:	d3b9      	bcc.n	8001bfa <__aeabi_ddiv+0x562>
 8001c86:	001a      	movs	r2, r3
 8001c88:	e7c3      	b.n	8001c12 <__aeabi_ddiv+0x57a>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	000003ff 	.word	0x000003ff
 8001c90:	000007ff 	.word	0x000007ff
 8001c94:	0000041e 	.word	0x0000041e
 8001c98:	0000043e 	.word	0x0000043e

08001c9c <__eqdf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	4684      	mov	ip, r0
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	4680      	mov	r8, r0
 8001caa:	4e19      	ldr	r6, [pc, #100]	; (8001d10 <__eqdf2+0x74>)
 8001cac:	0318      	lsls	r0, r3, #12
 8001cae:	030f      	lsls	r7, r1, #12
 8001cb0:	004d      	lsls	r5, r1, #1
 8001cb2:	0b00      	lsrs	r0, r0, #12
 8001cb4:	005c      	lsls	r4, r3, #1
 8001cb6:	4682      	mov	sl, r0
 8001cb8:	0b3f      	lsrs	r7, r7, #12
 8001cba:	0d6d      	lsrs	r5, r5, #21
 8001cbc:	0fc9      	lsrs	r1, r1, #31
 8001cbe:	4691      	mov	r9, r2
 8001cc0:	0d64      	lsrs	r4, r4, #21
 8001cc2:	0fdb      	lsrs	r3, r3, #31
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	42b5      	cmp	r5, r6
 8001cc8:	d00a      	beq.n	8001ce0 <__eqdf2+0x44>
 8001cca:	42b4      	cmp	r4, r6
 8001ccc:	d003      	beq.n	8001cd6 <__eqdf2+0x3a>
 8001cce:	42a5      	cmp	r5, r4
 8001cd0:	d101      	bne.n	8001cd6 <__eqdf2+0x3a>
 8001cd2:	4557      	cmp	r7, sl
 8001cd4:	d00c      	beq.n	8001cf0 <__eqdf2+0x54>
 8001cd6:	bc1c      	pop	{r2, r3, r4}
 8001cd8:	4690      	mov	r8, r2
 8001cda:	4699      	mov	r9, r3
 8001cdc:	46a2      	mov	sl, r4
 8001cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce0:	4666      	mov	r6, ip
 8001ce2:	433e      	orrs	r6, r7
 8001ce4:	d1f7      	bne.n	8001cd6 <__eqdf2+0x3a>
 8001ce6:	42ac      	cmp	r4, r5
 8001ce8:	d1f5      	bne.n	8001cd6 <__eqdf2+0x3a>
 8001cea:	4654      	mov	r4, sl
 8001cec:	4314      	orrs	r4, r2
 8001cee:	d1f2      	bne.n	8001cd6 <__eqdf2+0x3a>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	45c8      	cmp	r8, r9
 8001cf4:	d1ef      	bne.n	8001cd6 <__eqdf2+0x3a>
 8001cf6:	4299      	cmp	r1, r3
 8001cf8:	d007      	beq.n	8001d0a <__eqdf2+0x6e>
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	d1eb      	bne.n	8001cd6 <__eqdf2+0x3a>
 8001cfe:	4663      	mov	r3, ip
 8001d00:	431f      	orrs	r7, r3
 8001d02:	0038      	movs	r0, r7
 8001d04:	1e47      	subs	r7, r0, #1
 8001d06:	41b8      	sbcs	r0, r7
 8001d08:	e7e5      	b.n	8001cd6 <__eqdf2+0x3a>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e7e3      	b.n	8001cd6 <__eqdf2+0x3a>
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	000007ff 	.word	0x000007ff

08001d14 <__gedf2>:
 8001d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d16:	464f      	mov	r7, r9
 8001d18:	4646      	mov	r6, r8
 8001d1a:	46d6      	mov	lr, sl
 8001d1c:	004d      	lsls	r5, r1, #1
 8001d1e:	b5c0      	push	{r6, r7, lr}
 8001d20:	030e      	lsls	r6, r1, #12
 8001d22:	0fc9      	lsrs	r1, r1, #31
 8001d24:	468a      	mov	sl, r1
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <__gedf2+0xc4>)
 8001d28:	031f      	lsls	r7, r3, #12
 8001d2a:	005c      	lsls	r4, r3, #1
 8001d2c:	4680      	mov	r8, r0
 8001d2e:	0b36      	lsrs	r6, r6, #12
 8001d30:	0d6d      	lsrs	r5, r5, #21
 8001d32:	4691      	mov	r9, r2
 8001d34:	0b3f      	lsrs	r7, r7, #12
 8001d36:	0d64      	lsrs	r4, r4, #21
 8001d38:	0fdb      	lsrs	r3, r3, #31
 8001d3a:	428d      	cmp	r5, r1
 8001d3c:	d01e      	beq.n	8001d7c <__gedf2+0x68>
 8001d3e:	428c      	cmp	r4, r1
 8001d40:	d016      	beq.n	8001d70 <__gedf2+0x5c>
 8001d42:	2d00      	cmp	r5, #0
 8001d44:	d11e      	bne.n	8001d84 <__gedf2+0x70>
 8001d46:	4330      	orrs	r0, r6
 8001d48:	4684      	mov	ip, r0
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	d101      	bne.n	8001d52 <__gedf2+0x3e>
 8001d4e:	433a      	orrs	r2, r7
 8001d50:	d023      	beq.n	8001d9a <__gedf2+0x86>
 8001d52:	4662      	mov	r2, ip
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d01a      	beq.n	8001d8e <__gedf2+0x7a>
 8001d58:	459a      	cmp	sl, r3
 8001d5a:	d029      	beq.n	8001db0 <__gedf2+0x9c>
 8001d5c:	4651      	mov	r1, sl
 8001d5e:	2002      	movs	r0, #2
 8001d60:	3901      	subs	r1, #1
 8001d62:	4008      	ands	r0, r1
 8001d64:	3801      	subs	r0, #1
 8001d66:	bc1c      	pop	{r2, r3, r4}
 8001d68:	4690      	mov	r8, r2
 8001d6a:	4699      	mov	r9, r3
 8001d6c:	46a2      	mov	sl, r4
 8001d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d70:	0039      	movs	r1, r7
 8001d72:	4311      	orrs	r1, r2
 8001d74:	d0e5      	beq.n	8001d42 <__gedf2+0x2e>
 8001d76:	2002      	movs	r0, #2
 8001d78:	4240      	negs	r0, r0
 8001d7a:	e7f4      	b.n	8001d66 <__gedf2+0x52>
 8001d7c:	4330      	orrs	r0, r6
 8001d7e:	d1fa      	bne.n	8001d76 <__gedf2+0x62>
 8001d80:	42ac      	cmp	r4, r5
 8001d82:	d00f      	beq.n	8001da4 <__gedf2+0x90>
 8001d84:	2c00      	cmp	r4, #0
 8001d86:	d10f      	bne.n	8001da8 <__gedf2+0x94>
 8001d88:	433a      	orrs	r2, r7
 8001d8a:	d0e7      	beq.n	8001d5c <__gedf2+0x48>
 8001d8c:	e00c      	b.n	8001da8 <__gedf2+0x94>
 8001d8e:	2201      	movs	r2, #1
 8001d90:	3b01      	subs	r3, #1
 8001d92:	4393      	bics	r3, r2
 8001d94:	0018      	movs	r0, r3
 8001d96:	3001      	adds	r0, #1
 8001d98:	e7e5      	b.n	8001d66 <__gedf2+0x52>
 8001d9a:	4663      	mov	r3, ip
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0e1      	beq.n	8001d66 <__gedf2+0x52>
 8001da2:	e7db      	b.n	8001d5c <__gedf2+0x48>
 8001da4:	433a      	orrs	r2, r7
 8001da6:	d1e6      	bne.n	8001d76 <__gedf2+0x62>
 8001da8:	459a      	cmp	sl, r3
 8001daa:	d1d7      	bne.n	8001d5c <__gedf2+0x48>
 8001dac:	42a5      	cmp	r5, r4
 8001dae:	dcd5      	bgt.n	8001d5c <__gedf2+0x48>
 8001db0:	42a5      	cmp	r5, r4
 8001db2:	db05      	blt.n	8001dc0 <__gedf2+0xac>
 8001db4:	42be      	cmp	r6, r7
 8001db6:	d8d1      	bhi.n	8001d5c <__gedf2+0x48>
 8001db8:	d008      	beq.n	8001dcc <__gedf2+0xb8>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	42be      	cmp	r6, r7
 8001dbe:	d2d2      	bcs.n	8001d66 <__gedf2+0x52>
 8001dc0:	4650      	mov	r0, sl
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	3801      	subs	r0, #1
 8001dc6:	4398      	bics	r0, r3
 8001dc8:	3001      	adds	r0, #1
 8001dca:	e7cc      	b.n	8001d66 <__gedf2+0x52>
 8001dcc:	45c8      	cmp	r8, r9
 8001dce:	d8c5      	bhi.n	8001d5c <__gedf2+0x48>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	45c8      	cmp	r8, r9
 8001dd4:	d3f4      	bcc.n	8001dc0 <__gedf2+0xac>
 8001dd6:	e7c6      	b.n	8001d66 <__gedf2+0x52>
 8001dd8:	000007ff 	.word	0x000007ff

08001ddc <__ledf2>:
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	464f      	mov	r7, r9
 8001de0:	4646      	mov	r6, r8
 8001de2:	46d6      	mov	lr, sl
 8001de4:	004d      	lsls	r5, r1, #1
 8001de6:	b5c0      	push	{r6, r7, lr}
 8001de8:	030e      	lsls	r6, r1, #12
 8001dea:	0fc9      	lsrs	r1, r1, #31
 8001dec:	468a      	mov	sl, r1
 8001dee:	492e      	ldr	r1, [pc, #184]	; (8001ea8 <__ledf2+0xcc>)
 8001df0:	031f      	lsls	r7, r3, #12
 8001df2:	005c      	lsls	r4, r3, #1
 8001df4:	4680      	mov	r8, r0
 8001df6:	0b36      	lsrs	r6, r6, #12
 8001df8:	0d6d      	lsrs	r5, r5, #21
 8001dfa:	4691      	mov	r9, r2
 8001dfc:	0b3f      	lsrs	r7, r7, #12
 8001dfe:	0d64      	lsrs	r4, r4, #21
 8001e00:	0fdb      	lsrs	r3, r3, #31
 8001e02:	428d      	cmp	r5, r1
 8001e04:	d018      	beq.n	8001e38 <__ledf2+0x5c>
 8001e06:	428c      	cmp	r4, r1
 8001e08:	d011      	beq.n	8001e2e <__ledf2+0x52>
 8001e0a:	2d00      	cmp	r5, #0
 8001e0c:	d118      	bne.n	8001e40 <__ledf2+0x64>
 8001e0e:	4330      	orrs	r0, r6
 8001e10:	4684      	mov	ip, r0
 8001e12:	2c00      	cmp	r4, #0
 8001e14:	d11e      	bne.n	8001e54 <__ledf2+0x78>
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d11c      	bne.n	8001e54 <__ledf2+0x78>
 8001e1a:	4663      	mov	r3, ip
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d030      	beq.n	8001e84 <__ledf2+0xa8>
 8001e22:	4651      	mov	r1, sl
 8001e24:	2002      	movs	r0, #2
 8001e26:	3901      	subs	r1, #1
 8001e28:	4008      	ands	r0, r1
 8001e2a:	3801      	subs	r0, #1
 8001e2c:	e02a      	b.n	8001e84 <__ledf2+0xa8>
 8001e2e:	0039      	movs	r1, r7
 8001e30:	4311      	orrs	r1, r2
 8001e32:	d0ea      	beq.n	8001e0a <__ledf2+0x2e>
 8001e34:	2002      	movs	r0, #2
 8001e36:	e025      	b.n	8001e84 <__ledf2+0xa8>
 8001e38:	4330      	orrs	r0, r6
 8001e3a:	d1fb      	bne.n	8001e34 <__ledf2+0x58>
 8001e3c:	42ac      	cmp	r4, r5
 8001e3e:	d026      	beq.n	8001e8e <__ledf2+0xb2>
 8001e40:	2c00      	cmp	r4, #0
 8001e42:	d126      	bne.n	8001e92 <__ledf2+0xb6>
 8001e44:	433a      	orrs	r2, r7
 8001e46:	d124      	bne.n	8001e92 <__ledf2+0xb6>
 8001e48:	4651      	mov	r1, sl
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	3901      	subs	r1, #1
 8001e4e:	4008      	ands	r0, r1
 8001e50:	3801      	subs	r0, #1
 8001e52:	e017      	b.n	8001e84 <__ledf2+0xa8>
 8001e54:	4662      	mov	r2, ip
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d00f      	beq.n	8001e7a <__ledf2+0x9e>
 8001e5a:	459a      	cmp	sl, r3
 8001e5c:	d1e1      	bne.n	8001e22 <__ledf2+0x46>
 8001e5e:	42a5      	cmp	r5, r4
 8001e60:	db05      	blt.n	8001e6e <__ledf2+0x92>
 8001e62:	42be      	cmp	r6, r7
 8001e64:	d8dd      	bhi.n	8001e22 <__ledf2+0x46>
 8001e66:	d019      	beq.n	8001e9c <__ledf2+0xc0>
 8001e68:	2000      	movs	r0, #0
 8001e6a:	42be      	cmp	r6, r7
 8001e6c:	d20a      	bcs.n	8001e84 <__ledf2+0xa8>
 8001e6e:	4650      	mov	r0, sl
 8001e70:	2301      	movs	r3, #1
 8001e72:	3801      	subs	r0, #1
 8001e74:	4398      	bics	r0, r3
 8001e76:	3001      	adds	r0, #1
 8001e78:	e004      	b.n	8001e84 <__ledf2+0xa8>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	4393      	bics	r3, r2
 8001e80:	0018      	movs	r0, r3
 8001e82:	3001      	adds	r0, #1
 8001e84:	bc1c      	pop	{r2, r3, r4}
 8001e86:	4690      	mov	r8, r2
 8001e88:	4699      	mov	r9, r3
 8001e8a:	46a2      	mov	sl, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	433a      	orrs	r2, r7
 8001e90:	d1d0      	bne.n	8001e34 <__ledf2+0x58>
 8001e92:	459a      	cmp	sl, r3
 8001e94:	d1c5      	bne.n	8001e22 <__ledf2+0x46>
 8001e96:	42a5      	cmp	r5, r4
 8001e98:	dcc3      	bgt.n	8001e22 <__ledf2+0x46>
 8001e9a:	e7e0      	b.n	8001e5e <__ledf2+0x82>
 8001e9c:	45c8      	cmp	r8, r9
 8001e9e:	d8c0      	bhi.n	8001e22 <__ledf2+0x46>
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	45c8      	cmp	r8, r9
 8001ea4:	d3e3      	bcc.n	8001e6e <__ledf2+0x92>
 8001ea6:	e7ed      	b.n	8001e84 <__ledf2+0xa8>
 8001ea8:	000007ff 	.word	0x000007ff

08001eac <__aeabi_dmul>:
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	4657      	mov	r7, sl
 8001eb0:	46de      	mov	lr, fp
 8001eb2:	464e      	mov	r6, r9
 8001eb4:	4645      	mov	r5, r8
 8001eb6:	b5e0      	push	{r5, r6, r7, lr}
 8001eb8:	4683      	mov	fp, r0
 8001eba:	0006      	movs	r6, r0
 8001ebc:	030f      	lsls	r7, r1, #12
 8001ebe:	0048      	lsls	r0, r1, #1
 8001ec0:	b087      	sub	sp, #28
 8001ec2:	4692      	mov	sl, r2
 8001ec4:	001d      	movs	r5, r3
 8001ec6:	0b3f      	lsrs	r7, r7, #12
 8001ec8:	0d40      	lsrs	r0, r0, #21
 8001eca:	0fcc      	lsrs	r4, r1, #31
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dmul+0x26>
 8001ed0:	e06f      	b.n	8001fb2 <__aeabi_dmul+0x106>
 8001ed2:	4bde      	ldr	r3, [pc, #888]	; (800224c <__aeabi_dmul+0x3a0>)
 8001ed4:	4298      	cmp	r0, r3
 8001ed6:	d038      	beq.n	8001f4a <__aeabi_dmul+0x9e>
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	00ff      	lsls	r7, r7, #3
 8001edc:	041b      	lsls	r3, r3, #16
 8001ede:	431f      	orrs	r7, r3
 8001ee0:	0f73      	lsrs	r3, r6, #29
 8001ee2:	433b      	orrs	r3, r7
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	4bda      	ldr	r3, [pc, #872]	; (8002250 <__aeabi_dmul+0x3a4>)
 8001ee8:	2700      	movs	r7, #0
 8001eea:	4699      	mov	r9, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	469b      	mov	fp, r3
 8001ef0:	00f6      	lsls	r6, r6, #3
 8001ef2:	4481      	add	r9, r0
 8001ef4:	032b      	lsls	r3, r5, #12
 8001ef6:	0069      	lsls	r1, r5, #1
 8001ef8:	0b1b      	lsrs	r3, r3, #12
 8001efa:	4652      	mov	r2, sl
 8001efc:	4698      	mov	r8, r3
 8001efe:	0d49      	lsrs	r1, r1, #21
 8001f00:	0fed      	lsrs	r5, r5, #31
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dmul+0x5c>
 8001f06:	e085      	b.n	8002014 <__aeabi_dmul+0x168>
 8001f08:	4bd0      	ldr	r3, [pc, #832]	; (800224c <__aeabi_dmul+0x3a0>)
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_dmul+0x64>
 8001f0e:	e073      	b.n	8001ff8 <__aeabi_dmul+0x14c>
 8001f10:	4643      	mov	r3, r8
 8001f12:	00da      	lsls	r2, r3, #3
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	48cc      	ldr	r0, [pc, #816]	; (8002250 <__aeabi_dmul+0x3a4>)
 8001f1e:	0f52      	lsrs	r2, r2, #29
 8001f20:	4684      	mov	ip, r0
 8001f22:	4313      	orrs	r3, r2
 8001f24:	4652      	mov	r2, sl
 8001f26:	2000      	movs	r0, #0
 8001f28:	4461      	add	r1, ip
 8001f2a:	00d2      	lsls	r2, r2, #3
 8001f2c:	4489      	add	r9, r1
 8001f2e:	0021      	movs	r1, r4
 8001f30:	4069      	eors	r1, r5
 8001f32:	9100      	str	r1, [sp, #0]
 8001f34:	468c      	mov	ip, r1
 8001f36:	2101      	movs	r1, #1
 8001f38:	4449      	add	r1, r9
 8001f3a:	468a      	mov	sl, r1
 8001f3c:	2f0f      	cmp	r7, #15
 8001f3e:	d900      	bls.n	8001f42 <__aeabi_dmul+0x96>
 8001f40:	e090      	b.n	8002064 <__aeabi_dmul+0x1b8>
 8001f42:	49c4      	ldr	r1, [pc, #784]	; (8002254 <__aeabi_dmul+0x3a8>)
 8001f44:	00bf      	lsls	r7, r7, #2
 8001f46:	59cf      	ldr	r7, [r1, r7]
 8001f48:	46bf      	mov	pc, r7
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	433b      	orrs	r3, r7
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dmul+0xa8>
 8001f52:	e16a      	b.n	800222a <__aeabi_dmul+0x37e>
 8001f54:	2302      	movs	r3, #2
 8001f56:	2708      	movs	r7, #8
 8001f58:	2600      	movs	r6, #0
 8001f5a:	4681      	mov	r9, r0
 8001f5c:	469b      	mov	fp, r3
 8001f5e:	e7c9      	b.n	8001ef4 <__aeabi_dmul+0x48>
 8001f60:	0032      	movs	r2, r6
 8001f62:	4658      	mov	r0, fp
 8001f64:	9b01      	ldr	r3, [sp, #4]
 8001f66:	4661      	mov	r1, ip
 8001f68:	9100      	str	r1, [sp, #0]
 8001f6a:	2802      	cmp	r0, #2
 8001f6c:	d100      	bne.n	8001f70 <__aeabi_dmul+0xc4>
 8001f6e:	e075      	b.n	800205c <__aeabi_dmul+0x1b0>
 8001f70:	2803      	cmp	r0, #3
 8001f72:	d100      	bne.n	8001f76 <__aeabi_dmul+0xca>
 8001f74:	e1fe      	b.n	8002374 <__aeabi_dmul+0x4c8>
 8001f76:	2801      	cmp	r0, #1
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dmul+0xd0>
 8001f7a:	e12c      	b.n	80021d6 <__aeabi_dmul+0x32a>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2700      	movs	r7, #0
 8001f80:	2600      	movs	r6, #0
 8001f82:	2500      	movs	r5, #0
 8001f84:	033f      	lsls	r7, r7, #12
 8001f86:	0d2a      	lsrs	r2, r5, #20
 8001f88:	0b3f      	lsrs	r7, r7, #12
 8001f8a:	48b3      	ldr	r0, [pc, #716]	; (8002258 <__aeabi_dmul+0x3ac>)
 8001f8c:	0512      	lsls	r2, r2, #20
 8001f8e:	433a      	orrs	r2, r7
 8001f90:	4002      	ands	r2, r0
 8001f92:	051b      	lsls	r3, r3, #20
 8001f94:	4313      	orrs	r3, r2
 8001f96:	9a00      	ldr	r2, [sp, #0]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	07d1      	lsls	r1, r2, #31
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	430b      	orrs	r3, r1
 8001fa0:	0030      	movs	r0, r6
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	b007      	add	sp, #28
 8001fa6:	bc3c      	pop	{r2, r3, r4, r5}
 8001fa8:	4690      	mov	r8, r2
 8001faa:	4699      	mov	r9, r3
 8001fac:	46a2      	mov	sl, r4
 8001fae:	46ab      	mov	fp, r5
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb2:	465b      	mov	r3, fp
 8001fb4:	433b      	orrs	r3, r7
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dmul+0x110>
 8001fba:	e12f      	b.n	800221c <__aeabi_dmul+0x370>
 8001fbc:	2f00      	cmp	r7, #0
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dmul+0x116>
 8001fc0:	e1a5      	b.n	800230e <__aeabi_dmul+0x462>
 8001fc2:	0038      	movs	r0, r7
 8001fc4:	f000 fe50 	bl	8002c68 <__clzsi2>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3b0b      	subs	r3, #11
 8001fcc:	2b1c      	cmp	r3, #28
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dmul+0x126>
 8001fd0:	e196      	b.n	8002300 <__aeabi_dmul+0x454>
 8001fd2:	221d      	movs	r2, #29
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	465a      	mov	r2, fp
 8001fd8:	0001      	movs	r1, r0
 8001fda:	40da      	lsrs	r2, r3
 8001fdc:	465e      	mov	r6, fp
 8001fde:	3908      	subs	r1, #8
 8001fe0:	408f      	lsls	r7, r1
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	408e      	lsls	r6, r1
 8001fe6:	433b      	orrs	r3, r7
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	4b9c      	ldr	r3, [pc, #624]	; (800225c <__aeabi_dmul+0x3b0>)
 8001fec:	2700      	movs	r7, #0
 8001fee:	1a1b      	subs	r3, r3, r0
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	469b      	mov	fp, r3
 8001ff6:	e77d      	b.n	8001ef4 <__aeabi_dmul+0x48>
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	4993      	ldr	r1, [pc, #588]	; (800224c <__aeabi_dmul+0x3a0>)
 8002000:	468c      	mov	ip, r1
 8002002:	44e1      	add	r9, ip
 8002004:	2b00      	cmp	r3, #0
 8002006:	d000      	beq.n	800200a <__aeabi_dmul+0x15e>
 8002008:	e11a      	b.n	8002240 <__aeabi_dmul+0x394>
 800200a:	2202      	movs	r2, #2
 800200c:	2002      	movs	r0, #2
 800200e:	4317      	orrs	r7, r2
 8002010:	2200      	movs	r2, #0
 8002012:	e78c      	b.n	8001f2e <__aeabi_dmul+0x82>
 8002014:	4313      	orrs	r3, r2
 8002016:	d100      	bne.n	800201a <__aeabi_dmul+0x16e>
 8002018:	e10d      	b.n	8002236 <__aeabi_dmul+0x38a>
 800201a:	4643      	mov	r3, r8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d100      	bne.n	8002022 <__aeabi_dmul+0x176>
 8002020:	e181      	b.n	8002326 <__aeabi_dmul+0x47a>
 8002022:	4640      	mov	r0, r8
 8002024:	f000 fe20 	bl	8002c68 <__clzsi2>
 8002028:	0002      	movs	r2, r0
 800202a:	3a0b      	subs	r2, #11
 800202c:	2a1c      	cmp	r2, #28
 800202e:	dd00      	ble.n	8002032 <__aeabi_dmul+0x186>
 8002030:	e172      	b.n	8002318 <__aeabi_dmul+0x46c>
 8002032:	0001      	movs	r1, r0
 8002034:	4643      	mov	r3, r8
 8002036:	3908      	subs	r1, #8
 8002038:	408b      	lsls	r3, r1
 800203a:	4698      	mov	r8, r3
 800203c:	231d      	movs	r3, #29
 800203e:	1a9a      	subs	r2, r3, r2
 8002040:	4653      	mov	r3, sl
 8002042:	40d3      	lsrs	r3, r2
 8002044:	001a      	movs	r2, r3
 8002046:	4643      	mov	r3, r8
 8002048:	4313      	orrs	r3, r2
 800204a:	4652      	mov	r2, sl
 800204c:	408a      	lsls	r2, r1
 800204e:	4649      	mov	r1, r9
 8002050:	1a08      	subs	r0, r1, r0
 8002052:	4982      	ldr	r1, [pc, #520]	; (800225c <__aeabi_dmul+0x3b0>)
 8002054:	4689      	mov	r9, r1
 8002056:	4481      	add	r9, r0
 8002058:	2000      	movs	r0, #0
 800205a:	e768      	b.n	8001f2e <__aeabi_dmul+0x82>
 800205c:	4b7b      	ldr	r3, [pc, #492]	; (800224c <__aeabi_dmul+0x3a0>)
 800205e:	2700      	movs	r7, #0
 8002060:	2600      	movs	r6, #0
 8002062:	e78e      	b.n	8001f82 <__aeabi_dmul+0xd6>
 8002064:	0c14      	lsrs	r4, r2, #16
 8002066:	0412      	lsls	r2, r2, #16
 8002068:	0c12      	lsrs	r2, r2, #16
 800206a:	0011      	movs	r1, r2
 800206c:	0c37      	lsrs	r7, r6, #16
 800206e:	0436      	lsls	r6, r6, #16
 8002070:	0c35      	lsrs	r5, r6, #16
 8002072:	4379      	muls	r1, r7
 8002074:	0028      	movs	r0, r5
 8002076:	468c      	mov	ip, r1
 8002078:	002e      	movs	r6, r5
 800207a:	4360      	muls	r0, r4
 800207c:	4460      	add	r0, ip
 800207e:	4683      	mov	fp, r0
 8002080:	4356      	muls	r6, r2
 8002082:	0021      	movs	r1, r4
 8002084:	0c30      	lsrs	r0, r6, #16
 8002086:	4680      	mov	r8, r0
 8002088:	4658      	mov	r0, fp
 800208a:	4379      	muls	r1, r7
 800208c:	4440      	add	r0, r8
 800208e:	9102      	str	r1, [sp, #8]
 8002090:	4584      	cmp	ip, r0
 8002092:	d906      	bls.n	80020a2 <__aeabi_dmul+0x1f6>
 8002094:	4688      	mov	r8, r1
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0249      	lsls	r1, r1, #9
 800209a:	468c      	mov	ip, r1
 800209c:	44e0      	add	r8, ip
 800209e:	4641      	mov	r1, r8
 80020a0:	9102      	str	r1, [sp, #8]
 80020a2:	0436      	lsls	r6, r6, #16
 80020a4:	0c01      	lsrs	r1, r0, #16
 80020a6:	0c36      	lsrs	r6, r6, #16
 80020a8:	0400      	lsls	r0, r0, #16
 80020aa:	468b      	mov	fp, r1
 80020ac:	1981      	adds	r1, r0, r6
 80020ae:	0c1e      	lsrs	r6, r3, #16
 80020b0:	041b      	lsls	r3, r3, #16
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	9103      	str	r1, [sp, #12]
 80020b6:	0019      	movs	r1, r3
 80020b8:	4379      	muls	r1, r7
 80020ba:	468c      	mov	ip, r1
 80020bc:	0028      	movs	r0, r5
 80020be:	4375      	muls	r5, r6
 80020c0:	4465      	add	r5, ip
 80020c2:	46a8      	mov	r8, r5
 80020c4:	4358      	muls	r0, r3
 80020c6:	0c05      	lsrs	r5, r0, #16
 80020c8:	4445      	add	r5, r8
 80020ca:	4377      	muls	r7, r6
 80020cc:	42a9      	cmp	r1, r5
 80020ce:	d903      	bls.n	80020d8 <__aeabi_dmul+0x22c>
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0249      	lsls	r1, r1, #9
 80020d4:	468c      	mov	ip, r1
 80020d6:	4467      	add	r7, ip
 80020d8:	0c29      	lsrs	r1, r5, #16
 80020da:	468c      	mov	ip, r1
 80020dc:	0039      	movs	r1, r7
 80020de:	0400      	lsls	r0, r0, #16
 80020e0:	0c00      	lsrs	r0, r0, #16
 80020e2:	042d      	lsls	r5, r5, #16
 80020e4:	182d      	adds	r5, r5, r0
 80020e6:	4461      	add	r1, ip
 80020e8:	44ab      	add	fp, r5
 80020ea:	9105      	str	r1, [sp, #20]
 80020ec:	4659      	mov	r1, fp
 80020ee:	9104      	str	r1, [sp, #16]
 80020f0:	9901      	ldr	r1, [sp, #4]
 80020f2:	040f      	lsls	r7, r1, #16
 80020f4:	0c3f      	lsrs	r7, r7, #16
 80020f6:	0c08      	lsrs	r0, r1, #16
 80020f8:	0039      	movs	r1, r7
 80020fa:	4351      	muls	r1, r2
 80020fc:	4342      	muls	r2, r0
 80020fe:	4690      	mov	r8, r2
 8002100:	0002      	movs	r2, r0
 8002102:	468c      	mov	ip, r1
 8002104:	0c09      	lsrs	r1, r1, #16
 8002106:	468b      	mov	fp, r1
 8002108:	4362      	muls	r2, r4
 800210a:	437c      	muls	r4, r7
 800210c:	4444      	add	r4, r8
 800210e:	445c      	add	r4, fp
 8002110:	45a0      	cmp	r8, r4
 8002112:	d903      	bls.n	800211c <__aeabi_dmul+0x270>
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	0249      	lsls	r1, r1, #9
 8002118:	4688      	mov	r8, r1
 800211a:	4442      	add	r2, r8
 800211c:	0c21      	lsrs	r1, r4, #16
 800211e:	4688      	mov	r8, r1
 8002120:	4661      	mov	r1, ip
 8002122:	0409      	lsls	r1, r1, #16
 8002124:	0c09      	lsrs	r1, r1, #16
 8002126:	468c      	mov	ip, r1
 8002128:	0039      	movs	r1, r7
 800212a:	4359      	muls	r1, r3
 800212c:	4343      	muls	r3, r0
 800212e:	4370      	muls	r0, r6
 8002130:	437e      	muls	r6, r7
 8002132:	0c0f      	lsrs	r7, r1, #16
 8002134:	18f6      	adds	r6, r6, r3
 8002136:	0424      	lsls	r4, r4, #16
 8002138:	19be      	adds	r6, r7, r6
 800213a:	4464      	add	r4, ip
 800213c:	4442      	add	r2, r8
 800213e:	468c      	mov	ip, r1
 8002140:	42b3      	cmp	r3, r6
 8002142:	d903      	bls.n	800214c <__aeabi_dmul+0x2a0>
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	4698      	mov	r8, r3
 800214a:	4440      	add	r0, r8
 800214c:	9b02      	ldr	r3, [sp, #8]
 800214e:	4661      	mov	r1, ip
 8002150:	4698      	mov	r8, r3
 8002152:	9b04      	ldr	r3, [sp, #16]
 8002154:	0437      	lsls	r7, r6, #16
 8002156:	4443      	add	r3, r8
 8002158:	469b      	mov	fp, r3
 800215a:	45ab      	cmp	fp, r5
 800215c:	41ad      	sbcs	r5, r5
 800215e:	426b      	negs	r3, r5
 8002160:	040d      	lsls	r5, r1, #16
 8002162:	9905      	ldr	r1, [sp, #20]
 8002164:	0c2d      	lsrs	r5, r5, #16
 8002166:	468c      	mov	ip, r1
 8002168:	197f      	adds	r7, r7, r5
 800216a:	4467      	add	r7, ip
 800216c:	18fd      	adds	r5, r7, r3
 800216e:	46a8      	mov	r8, r5
 8002170:	465d      	mov	r5, fp
 8002172:	192d      	adds	r5, r5, r4
 8002174:	42a5      	cmp	r5, r4
 8002176:	41a4      	sbcs	r4, r4
 8002178:	4693      	mov	fp, r2
 800217a:	4264      	negs	r4, r4
 800217c:	46a4      	mov	ip, r4
 800217e:	44c3      	add	fp, r8
 8002180:	44dc      	add	ip, fp
 8002182:	428f      	cmp	r7, r1
 8002184:	41bf      	sbcs	r7, r7
 8002186:	4598      	cmp	r8, r3
 8002188:	419b      	sbcs	r3, r3
 800218a:	4593      	cmp	fp, r2
 800218c:	4192      	sbcs	r2, r2
 800218e:	45a4      	cmp	ip, r4
 8002190:	41a4      	sbcs	r4, r4
 8002192:	425b      	negs	r3, r3
 8002194:	427f      	negs	r7, r7
 8002196:	431f      	orrs	r7, r3
 8002198:	0c36      	lsrs	r6, r6, #16
 800219a:	4252      	negs	r2, r2
 800219c:	4264      	negs	r4, r4
 800219e:	19bf      	adds	r7, r7, r6
 80021a0:	4322      	orrs	r2, r4
 80021a2:	18bf      	adds	r7, r7, r2
 80021a4:	4662      	mov	r2, ip
 80021a6:	1838      	adds	r0, r7, r0
 80021a8:	0243      	lsls	r3, r0, #9
 80021aa:	0dd2      	lsrs	r2, r2, #23
 80021ac:	9903      	ldr	r1, [sp, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	026a      	lsls	r2, r5, #9
 80021b2:	430a      	orrs	r2, r1
 80021b4:	1e50      	subs	r0, r2, #1
 80021b6:	4182      	sbcs	r2, r0
 80021b8:	4661      	mov	r1, ip
 80021ba:	0ded      	lsrs	r5, r5, #23
 80021bc:	432a      	orrs	r2, r5
 80021be:	024e      	lsls	r6, r1, #9
 80021c0:	4332      	orrs	r2, r6
 80021c2:	01d9      	lsls	r1, r3, #7
 80021c4:	d400      	bmi.n	80021c8 <__aeabi_dmul+0x31c>
 80021c6:	e0b3      	b.n	8002330 <__aeabi_dmul+0x484>
 80021c8:	2601      	movs	r6, #1
 80021ca:	0850      	lsrs	r0, r2, #1
 80021cc:	4032      	ands	r2, r6
 80021ce:	4302      	orrs	r2, r0
 80021d0:	07de      	lsls	r6, r3, #31
 80021d2:	4332      	orrs	r2, r6
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	4c22      	ldr	r4, [pc, #136]	; (8002260 <__aeabi_dmul+0x3b4>)
 80021d8:	4454      	add	r4, sl
 80021da:	2c00      	cmp	r4, #0
 80021dc:	dd62      	ble.n	80022a4 <__aeabi_dmul+0x3f8>
 80021de:	0751      	lsls	r1, r2, #29
 80021e0:	d009      	beq.n	80021f6 <__aeabi_dmul+0x34a>
 80021e2:	200f      	movs	r0, #15
 80021e4:	4010      	ands	r0, r2
 80021e6:	2804      	cmp	r0, #4
 80021e8:	d005      	beq.n	80021f6 <__aeabi_dmul+0x34a>
 80021ea:	1d10      	adds	r0, r2, #4
 80021ec:	4290      	cmp	r0, r2
 80021ee:	4192      	sbcs	r2, r2
 80021f0:	4252      	negs	r2, r2
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	0002      	movs	r2, r0
 80021f6:	01d9      	lsls	r1, r3, #7
 80021f8:	d504      	bpl.n	8002204 <__aeabi_dmul+0x358>
 80021fa:	2480      	movs	r4, #128	; 0x80
 80021fc:	4819      	ldr	r0, [pc, #100]	; (8002264 <__aeabi_dmul+0x3b8>)
 80021fe:	00e4      	lsls	r4, r4, #3
 8002200:	4003      	ands	r3, r0
 8002202:	4454      	add	r4, sl
 8002204:	4818      	ldr	r0, [pc, #96]	; (8002268 <__aeabi_dmul+0x3bc>)
 8002206:	4284      	cmp	r4, r0
 8002208:	dd00      	ble.n	800220c <__aeabi_dmul+0x360>
 800220a:	e727      	b.n	800205c <__aeabi_dmul+0x1b0>
 800220c:	075e      	lsls	r6, r3, #29
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	08d2      	lsrs	r2, r2, #3
 8002212:	0b1f      	lsrs	r7, r3, #12
 8002214:	0563      	lsls	r3, r4, #21
 8002216:	4316      	orrs	r6, r2
 8002218:	0d5b      	lsrs	r3, r3, #21
 800221a:	e6b2      	b.n	8001f82 <__aeabi_dmul+0xd6>
 800221c:	2300      	movs	r3, #0
 800221e:	4699      	mov	r9, r3
 8002220:	3301      	adds	r3, #1
 8002222:	2704      	movs	r7, #4
 8002224:	2600      	movs	r6, #0
 8002226:	469b      	mov	fp, r3
 8002228:	e664      	b.n	8001ef4 <__aeabi_dmul+0x48>
 800222a:	2303      	movs	r3, #3
 800222c:	9701      	str	r7, [sp, #4]
 800222e:	4681      	mov	r9, r0
 8002230:	270c      	movs	r7, #12
 8002232:	469b      	mov	fp, r3
 8002234:	e65e      	b.n	8001ef4 <__aeabi_dmul+0x48>
 8002236:	2201      	movs	r2, #1
 8002238:	2001      	movs	r0, #1
 800223a:	4317      	orrs	r7, r2
 800223c:	2200      	movs	r2, #0
 800223e:	e676      	b.n	8001f2e <__aeabi_dmul+0x82>
 8002240:	2303      	movs	r3, #3
 8002242:	2003      	movs	r0, #3
 8002244:	431f      	orrs	r7, r3
 8002246:	4643      	mov	r3, r8
 8002248:	e671      	b.n	8001f2e <__aeabi_dmul+0x82>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	000007ff 	.word	0x000007ff
 8002250:	fffffc01 	.word	0xfffffc01
 8002254:	08005d4c 	.word	0x08005d4c
 8002258:	800fffff 	.word	0x800fffff
 800225c:	fffffc0d 	.word	0xfffffc0d
 8002260:	000003ff 	.word	0x000003ff
 8002264:	feffffff 	.word	0xfeffffff
 8002268:	000007fe 	.word	0x000007fe
 800226c:	2300      	movs	r3, #0
 800226e:	2780      	movs	r7, #128	; 0x80
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	033f      	lsls	r7, r7, #12
 8002274:	2600      	movs	r6, #0
 8002276:	4b43      	ldr	r3, [pc, #268]	; (8002384 <__aeabi_dmul+0x4d8>)
 8002278:	e683      	b.n	8001f82 <__aeabi_dmul+0xd6>
 800227a:	9b01      	ldr	r3, [sp, #4]
 800227c:	0032      	movs	r2, r6
 800227e:	46a4      	mov	ip, r4
 8002280:	4658      	mov	r0, fp
 8002282:	e670      	b.n	8001f66 <__aeabi_dmul+0xba>
 8002284:	46ac      	mov	ip, r5
 8002286:	e66e      	b.n	8001f66 <__aeabi_dmul+0xba>
 8002288:	2780      	movs	r7, #128	; 0x80
 800228a:	9901      	ldr	r1, [sp, #4]
 800228c:	033f      	lsls	r7, r7, #12
 800228e:	4239      	tst	r1, r7
 8002290:	d02d      	beq.n	80022ee <__aeabi_dmul+0x442>
 8002292:	423b      	tst	r3, r7
 8002294:	d12b      	bne.n	80022ee <__aeabi_dmul+0x442>
 8002296:	431f      	orrs	r7, r3
 8002298:	033f      	lsls	r7, r7, #12
 800229a:	0b3f      	lsrs	r7, r7, #12
 800229c:	9500      	str	r5, [sp, #0]
 800229e:	0016      	movs	r6, r2
 80022a0:	4b38      	ldr	r3, [pc, #224]	; (8002384 <__aeabi_dmul+0x4d8>)
 80022a2:	e66e      	b.n	8001f82 <__aeabi_dmul+0xd6>
 80022a4:	2501      	movs	r5, #1
 80022a6:	1b2d      	subs	r5, r5, r4
 80022a8:	2d38      	cmp	r5, #56	; 0x38
 80022aa:	dd00      	ble.n	80022ae <__aeabi_dmul+0x402>
 80022ac:	e666      	b.n	8001f7c <__aeabi_dmul+0xd0>
 80022ae:	2d1f      	cmp	r5, #31
 80022b0:	dc40      	bgt.n	8002334 <__aeabi_dmul+0x488>
 80022b2:	4835      	ldr	r0, [pc, #212]	; (8002388 <__aeabi_dmul+0x4dc>)
 80022b4:	001c      	movs	r4, r3
 80022b6:	4450      	add	r0, sl
 80022b8:	0016      	movs	r6, r2
 80022ba:	4082      	lsls	r2, r0
 80022bc:	4084      	lsls	r4, r0
 80022be:	40ee      	lsrs	r6, r5
 80022c0:	1e50      	subs	r0, r2, #1
 80022c2:	4182      	sbcs	r2, r0
 80022c4:	4334      	orrs	r4, r6
 80022c6:	4314      	orrs	r4, r2
 80022c8:	40eb      	lsrs	r3, r5
 80022ca:	0762      	lsls	r2, r4, #29
 80022cc:	d009      	beq.n	80022e2 <__aeabi_dmul+0x436>
 80022ce:	220f      	movs	r2, #15
 80022d0:	4022      	ands	r2, r4
 80022d2:	2a04      	cmp	r2, #4
 80022d4:	d005      	beq.n	80022e2 <__aeabi_dmul+0x436>
 80022d6:	0022      	movs	r2, r4
 80022d8:	1d14      	adds	r4, r2, #4
 80022da:	4294      	cmp	r4, r2
 80022dc:	4180      	sbcs	r0, r0
 80022de:	4240      	negs	r0, r0
 80022e0:	181b      	adds	r3, r3, r0
 80022e2:	021a      	lsls	r2, r3, #8
 80022e4:	d53e      	bpl.n	8002364 <__aeabi_dmul+0x4b8>
 80022e6:	2301      	movs	r3, #1
 80022e8:	2700      	movs	r7, #0
 80022ea:	2600      	movs	r6, #0
 80022ec:	e649      	b.n	8001f82 <__aeabi_dmul+0xd6>
 80022ee:	2780      	movs	r7, #128	; 0x80
 80022f0:	9b01      	ldr	r3, [sp, #4]
 80022f2:	033f      	lsls	r7, r7, #12
 80022f4:	431f      	orrs	r7, r3
 80022f6:	033f      	lsls	r7, r7, #12
 80022f8:	0b3f      	lsrs	r7, r7, #12
 80022fa:	9400      	str	r4, [sp, #0]
 80022fc:	4b21      	ldr	r3, [pc, #132]	; (8002384 <__aeabi_dmul+0x4d8>)
 80022fe:	e640      	b.n	8001f82 <__aeabi_dmul+0xd6>
 8002300:	0003      	movs	r3, r0
 8002302:	465a      	mov	r2, fp
 8002304:	3b28      	subs	r3, #40	; 0x28
 8002306:	409a      	lsls	r2, r3
 8002308:	2600      	movs	r6, #0
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	e66d      	b.n	8001fea <__aeabi_dmul+0x13e>
 800230e:	4658      	mov	r0, fp
 8002310:	f000 fcaa 	bl	8002c68 <__clzsi2>
 8002314:	3020      	adds	r0, #32
 8002316:	e657      	b.n	8001fc8 <__aeabi_dmul+0x11c>
 8002318:	0003      	movs	r3, r0
 800231a:	4652      	mov	r2, sl
 800231c:	3b28      	subs	r3, #40	; 0x28
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	2200      	movs	r2, #0
 8002324:	e693      	b.n	800204e <__aeabi_dmul+0x1a2>
 8002326:	4650      	mov	r0, sl
 8002328:	f000 fc9e 	bl	8002c68 <__clzsi2>
 800232c:	3020      	adds	r0, #32
 800232e:	e67b      	b.n	8002028 <__aeabi_dmul+0x17c>
 8002330:	46ca      	mov	sl, r9
 8002332:	e750      	b.n	80021d6 <__aeabi_dmul+0x32a>
 8002334:	201f      	movs	r0, #31
 8002336:	001e      	movs	r6, r3
 8002338:	4240      	negs	r0, r0
 800233a:	1b04      	subs	r4, r0, r4
 800233c:	40e6      	lsrs	r6, r4
 800233e:	2d20      	cmp	r5, #32
 8002340:	d003      	beq.n	800234a <__aeabi_dmul+0x49e>
 8002342:	4c12      	ldr	r4, [pc, #72]	; (800238c <__aeabi_dmul+0x4e0>)
 8002344:	4454      	add	r4, sl
 8002346:	40a3      	lsls	r3, r4
 8002348:	431a      	orrs	r2, r3
 800234a:	1e50      	subs	r0, r2, #1
 800234c:	4182      	sbcs	r2, r0
 800234e:	4332      	orrs	r2, r6
 8002350:	2607      	movs	r6, #7
 8002352:	2700      	movs	r7, #0
 8002354:	4016      	ands	r6, r2
 8002356:	d009      	beq.n	800236c <__aeabi_dmul+0x4c0>
 8002358:	200f      	movs	r0, #15
 800235a:	2300      	movs	r3, #0
 800235c:	4010      	ands	r0, r2
 800235e:	0014      	movs	r4, r2
 8002360:	2804      	cmp	r0, #4
 8002362:	d1b9      	bne.n	80022d8 <__aeabi_dmul+0x42c>
 8002364:	0022      	movs	r2, r4
 8002366:	075e      	lsls	r6, r3, #29
 8002368:	025b      	lsls	r3, r3, #9
 800236a:	0b1f      	lsrs	r7, r3, #12
 800236c:	08d2      	lsrs	r2, r2, #3
 800236e:	4316      	orrs	r6, r2
 8002370:	2300      	movs	r3, #0
 8002372:	e606      	b.n	8001f82 <__aeabi_dmul+0xd6>
 8002374:	2780      	movs	r7, #128	; 0x80
 8002376:	033f      	lsls	r7, r7, #12
 8002378:	431f      	orrs	r7, r3
 800237a:	033f      	lsls	r7, r7, #12
 800237c:	0b3f      	lsrs	r7, r7, #12
 800237e:	0016      	movs	r6, r2
 8002380:	4b00      	ldr	r3, [pc, #0]	; (8002384 <__aeabi_dmul+0x4d8>)
 8002382:	e5fe      	b.n	8001f82 <__aeabi_dmul+0xd6>
 8002384:	000007ff 	.word	0x000007ff
 8002388:	0000041e 	.word	0x0000041e
 800238c:	0000043e 	.word	0x0000043e

08002390 <__aeabi_dsub>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	4657      	mov	r7, sl
 8002394:	464e      	mov	r6, r9
 8002396:	4645      	mov	r5, r8
 8002398:	46de      	mov	lr, fp
 800239a:	000c      	movs	r4, r1
 800239c:	0309      	lsls	r1, r1, #12
 800239e:	b5e0      	push	{r5, r6, r7, lr}
 80023a0:	0a49      	lsrs	r1, r1, #9
 80023a2:	0f46      	lsrs	r6, r0, #29
 80023a4:	005f      	lsls	r7, r3, #1
 80023a6:	4331      	orrs	r1, r6
 80023a8:	031e      	lsls	r6, r3, #12
 80023aa:	0fdb      	lsrs	r3, r3, #31
 80023ac:	0a76      	lsrs	r6, r6, #9
 80023ae:	469b      	mov	fp, r3
 80023b0:	0f53      	lsrs	r3, r2, #29
 80023b2:	4333      	orrs	r3, r6
 80023b4:	4ec8      	ldr	r6, [pc, #800]	; (80026d8 <__aeabi_dsub+0x348>)
 80023b6:	0065      	lsls	r5, r4, #1
 80023b8:	00c0      	lsls	r0, r0, #3
 80023ba:	0fe4      	lsrs	r4, r4, #31
 80023bc:	00d2      	lsls	r2, r2, #3
 80023be:	0d6d      	lsrs	r5, r5, #21
 80023c0:	46a2      	mov	sl, r4
 80023c2:	4681      	mov	r9, r0
 80023c4:	0d7f      	lsrs	r7, r7, #21
 80023c6:	469c      	mov	ip, r3
 80023c8:	4690      	mov	r8, r2
 80023ca:	42b7      	cmp	r7, r6
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x40>
 80023ce:	e0b9      	b.n	8002544 <__aeabi_dsub+0x1b4>
 80023d0:	465b      	mov	r3, fp
 80023d2:	2601      	movs	r6, #1
 80023d4:	4073      	eors	r3, r6
 80023d6:	469b      	mov	fp, r3
 80023d8:	1bee      	subs	r6, r5, r7
 80023da:	45a3      	cmp	fp, r4
 80023dc:	d100      	bne.n	80023e0 <__aeabi_dsub+0x50>
 80023de:	e083      	b.n	80024e8 <__aeabi_dsub+0x158>
 80023e0:	2e00      	cmp	r6, #0
 80023e2:	dd63      	ble.n	80024ac <__aeabi_dsub+0x11c>
 80023e4:	2f00      	cmp	r7, #0
 80023e6:	d000      	beq.n	80023ea <__aeabi_dsub+0x5a>
 80023e8:	e0b1      	b.n	800254e <__aeabi_dsub+0x1be>
 80023ea:	4663      	mov	r3, ip
 80023ec:	4313      	orrs	r3, r2
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x62>
 80023f0:	e123      	b.n	800263a <__aeabi_dsub+0x2aa>
 80023f2:	1e73      	subs	r3, r6, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d000      	beq.n	80023fa <__aeabi_dsub+0x6a>
 80023f8:	e1ba      	b.n	8002770 <__aeabi_dsub+0x3e0>
 80023fa:	1a86      	subs	r6, r0, r2
 80023fc:	4663      	mov	r3, ip
 80023fe:	42b0      	cmp	r0, r6
 8002400:	4180      	sbcs	r0, r0
 8002402:	2501      	movs	r5, #1
 8002404:	1ac9      	subs	r1, r1, r3
 8002406:	4240      	negs	r0, r0
 8002408:	1a09      	subs	r1, r1, r0
 800240a:	020b      	lsls	r3, r1, #8
 800240c:	d400      	bmi.n	8002410 <__aeabi_dsub+0x80>
 800240e:	e147      	b.n	80026a0 <__aeabi_dsub+0x310>
 8002410:	0249      	lsls	r1, r1, #9
 8002412:	0a4b      	lsrs	r3, r1, #9
 8002414:	4698      	mov	r8, r3
 8002416:	4643      	mov	r3, r8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d100      	bne.n	800241e <__aeabi_dsub+0x8e>
 800241c:	e189      	b.n	8002732 <__aeabi_dsub+0x3a2>
 800241e:	4640      	mov	r0, r8
 8002420:	f000 fc22 	bl	8002c68 <__clzsi2>
 8002424:	0003      	movs	r3, r0
 8002426:	3b08      	subs	r3, #8
 8002428:	2b1f      	cmp	r3, #31
 800242a:	dd00      	ble.n	800242e <__aeabi_dsub+0x9e>
 800242c:	e17c      	b.n	8002728 <__aeabi_dsub+0x398>
 800242e:	2220      	movs	r2, #32
 8002430:	0030      	movs	r0, r6
 8002432:	1ad2      	subs	r2, r2, r3
 8002434:	4641      	mov	r1, r8
 8002436:	40d0      	lsrs	r0, r2
 8002438:	4099      	lsls	r1, r3
 800243a:	0002      	movs	r2, r0
 800243c:	409e      	lsls	r6, r3
 800243e:	430a      	orrs	r2, r1
 8002440:	429d      	cmp	r5, r3
 8002442:	dd00      	ble.n	8002446 <__aeabi_dsub+0xb6>
 8002444:	e16a      	b.n	800271c <__aeabi_dsub+0x38c>
 8002446:	1b5d      	subs	r5, r3, r5
 8002448:	1c6b      	adds	r3, r5, #1
 800244a:	2b1f      	cmp	r3, #31
 800244c:	dd00      	ble.n	8002450 <__aeabi_dsub+0xc0>
 800244e:	e194      	b.n	800277a <__aeabi_dsub+0x3ea>
 8002450:	2120      	movs	r1, #32
 8002452:	0010      	movs	r0, r2
 8002454:	0035      	movs	r5, r6
 8002456:	1ac9      	subs	r1, r1, r3
 8002458:	408e      	lsls	r6, r1
 800245a:	40da      	lsrs	r2, r3
 800245c:	4088      	lsls	r0, r1
 800245e:	40dd      	lsrs	r5, r3
 8002460:	1e71      	subs	r1, r6, #1
 8002462:	418e      	sbcs	r6, r1
 8002464:	0011      	movs	r1, r2
 8002466:	2207      	movs	r2, #7
 8002468:	4328      	orrs	r0, r5
 800246a:	2500      	movs	r5, #0
 800246c:	4306      	orrs	r6, r0
 800246e:	4032      	ands	r2, r6
 8002470:	2a00      	cmp	r2, #0
 8002472:	d009      	beq.n	8002488 <__aeabi_dsub+0xf8>
 8002474:	230f      	movs	r3, #15
 8002476:	4033      	ands	r3, r6
 8002478:	2b04      	cmp	r3, #4
 800247a:	d005      	beq.n	8002488 <__aeabi_dsub+0xf8>
 800247c:	1d33      	adds	r3, r6, #4
 800247e:	42b3      	cmp	r3, r6
 8002480:	41b6      	sbcs	r6, r6
 8002482:	4276      	negs	r6, r6
 8002484:	1989      	adds	r1, r1, r6
 8002486:	001e      	movs	r6, r3
 8002488:	020b      	lsls	r3, r1, #8
 800248a:	d400      	bmi.n	800248e <__aeabi_dsub+0xfe>
 800248c:	e23d      	b.n	800290a <__aeabi_dsub+0x57a>
 800248e:	1c6a      	adds	r2, r5, #1
 8002490:	4b91      	ldr	r3, [pc, #580]	; (80026d8 <__aeabi_dsub+0x348>)
 8002492:	0555      	lsls	r5, r2, #21
 8002494:	0d6d      	lsrs	r5, r5, #21
 8002496:	429a      	cmp	r2, r3
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x10c>
 800249a:	e119      	b.n	80026d0 <__aeabi_dsub+0x340>
 800249c:	4a8f      	ldr	r2, [pc, #572]	; (80026dc <__aeabi_dsub+0x34c>)
 800249e:	08f6      	lsrs	r6, r6, #3
 80024a0:	400a      	ands	r2, r1
 80024a2:	0757      	lsls	r7, r2, #29
 80024a4:	0252      	lsls	r2, r2, #9
 80024a6:	4337      	orrs	r7, r6
 80024a8:	0b12      	lsrs	r2, r2, #12
 80024aa:	e09b      	b.n	80025e4 <__aeabi_dsub+0x254>
 80024ac:	2e00      	cmp	r6, #0
 80024ae:	d000      	beq.n	80024b2 <__aeabi_dsub+0x122>
 80024b0:	e0c5      	b.n	800263e <__aeabi_dsub+0x2ae>
 80024b2:	1c6e      	adds	r6, r5, #1
 80024b4:	0576      	lsls	r6, r6, #21
 80024b6:	0d76      	lsrs	r6, r6, #21
 80024b8:	2e01      	cmp	r6, #1
 80024ba:	dc00      	bgt.n	80024be <__aeabi_dsub+0x12e>
 80024bc:	e148      	b.n	8002750 <__aeabi_dsub+0x3c0>
 80024be:	4667      	mov	r7, ip
 80024c0:	1a86      	subs	r6, r0, r2
 80024c2:	1bcb      	subs	r3, r1, r7
 80024c4:	42b0      	cmp	r0, r6
 80024c6:	41bf      	sbcs	r7, r7
 80024c8:	427f      	negs	r7, r7
 80024ca:	46b8      	mov	r8, r7
 80024cc:	001f      	movs	r7, r3
 80024ce:	4643      	mov	r3, r8
 80024d0:	1aff      	subs	r7, r7, r3
 80024d2:	003b      	movs	r3, r7
 80024d4:	46b8      	mov	r8, r7
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	d500      	bpl.n	80024dc <__aeabi_dsub+0x14c>
 80024da:	e15f      	b.n	800279c <__aeabi_dsub+0x40c>
 80024dc:	4337      	orrs	r7, r6
 80024de:	d19a      	bne.n	8002416 <__aeabi_dsub+0x86>
 80024e0:	2200      	movs	r2, #0
 80024e2:	2400      	movs	r4, #0
 80024e4:	2500      	movs	r5, #0
 80024e6:	e079      	b.n	80025dc <__aeabi_dsub+0x24c>
 80024e8:	2e00      	cmp	r6, #0
 80024ea:	dc00      	bgt.n	80024ee <__aeabi_dsub+0x15e>
 80024ec:	e0fa      	b.n	80026e4 <__aeabi_dsub+0x354>
 80024ee:	2f00      	cmp	r7, #0
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x164>
 80024f2:	e08d      	b.n	8002610 <__aeabi_dsub+0x280>
 80024f4:	4b78      	ldr	r3, [pc, #480]	; (80026d8 <__aeabi_dsub+0x348>)
 80024f6:	429d      	cmp	r5, r3
 80024f8:	d067      	beq.n	80025ca <__aeabi_dsub+0x23a>
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	4667      	mov	r7, ip
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431f      	orrs	r7, r3
 8002502:	46bc      	mov	ip, r7
 8002504:	2e38      	cmp	r6, #56	; 0x38
 8002506:	dc00      	bgt.n	800250a <__aeabi_dsub+0x17a>
 8002508:	e152      	b.n	80027b0 <__aeabi_dsub+0x420>
 800250a:	4663      	mov	r3, ip
 800250c:	4313      	orrs	r3, r2
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	4193      	sbcs	r3, r2
 8002512:	181e      	adds	r6, r3, r0
 8002514:	4286      	cmp	r6, r0
 8002516:	4180      	sbcs	r0, r0
 8002518:	4240      	negs	r0, r0
 800251a:	1809      	adds	r1, r1, r0
 800251c:	020b      	lsls	r3, r1, #8
 800251e:	d400      	bmi.n	8002522 <__aeabi_dsub+0x192>
 8002520:	e0be      	b.n	80026a0 <__aeabi_dsub+0x310>
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <__aeabi_dsub+0x348>)
 8002524:	3501      	adds	r5, #1
 8002526:	429d      	cmp	r5, r3
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x19c>
 800252a:	e0d2      	b.n	80026d2 <__aeabi_dsub+0x342>
 800252c:	4a6b      	ldr	r2, [pc, #428]	; (80026dc <__aeabi_dsub+0x34c>)
 800252e:	0873      	lsrs	r3, r6, #1
 8002530:	400a      	ands	r2, r1
 8002532:	2101      	movs	r1, #1
 8002534:	400e      	ands	r6, r1
 8002536:	431e      	orrs	r6, r3
 8002538:	0851      	lsrs	r1, r2, #1
 800253a:	07d3      	lsls	r3, r2, #31
 800253c:	2207      	movs	r2, #7
 800253e:	431e      	orrs	r6, r3
 8002540:	4032      	ands	r2, r6
 8002542:	e795      	b.n	8002470 <__aeabi_dsub+0xe0>
 8002544:	001e      	movs	r6, r3
 8002546:	4316      	orrs	r6, r2
 8002548:	d000      	beq.n	800254c <__aeabi_dsub+0x1bc>
 800254a:	e745      	b.n	80023d8 <__aeabi_dsub+0x48>
 800254c:	e740      	b.n	80023d0 <__aeabi_dsub+0x40>
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <__aeabi_dsub+0x348>)
 8002550:	429d      	cmp	r5, r3
 8002552:	d03a      	beq.n	80025ca <__aeabi_dsub+0x23a>
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	4667      	mov	r7, ip
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431f      	orrs	r7, r3
 800255c:	46bc      	mov	ip, r7
 800255e:	2e38      	cmp	r6, #56	; 0x38
 8002560:	dd00      	ble.n	8002564 <__aeabi_dsub+0x1d4>
 8002562:	e0eb      	b.n	800273c <__aeabi_dsub+0x3ac>
 8002564:	2e1f      	cmp	r6, #31
 8002566:	dc00      	bgt.n	800256a <__aeabi_dsub+0x1da>
 8002568:	e13a      	b.n	80027e0 <__aeabi_dsub+0x450>
 800256a:	0033      	movs	r3, r6
 800256c:	4667      	mov	r7, ip
 800256e:	3b20      	subs	r3, #32
 8002570:	40df      	lsrs	r7, r3
 8002572:	003b      	movs	r3, r7
 8002574:	2e20      	cmp	r6, #32
 8002576:	d005      	beq.n	8002584 <__aeabi_dsub+0x1f4>
 8002578:	2740      	movs	r7, #64	; 0x40
 800257a:	1bbf      	subs	r7, r7, r6
 800257c:	4666      	mov	r6, ip
 800257e:	40be      	lsls	r6, r7
 8002580:	4332      	orrs	r2, r6
 8002582:	4690      	mov	r8, r2
 8002584:	4646      	mov	r6, r8
 8002586:	1e72      	subs	r2, r6, #1
 8002588:	4196      	sbcs	r6, r2
 800258a:	4333      	orrs	r3, r6
 800258c:	e0da      	b.n	8002744 <__aeabi_dsub+0x3b4>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x204>
 8002592:	e214      	b.n	80029be <__aeabi_dsub+0x62e>
 8002594:	4663      	mov	r3, ip
 8002596:	4313      	orrs	r3, r2
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x20c>
 800259a:	e168      	b.n	800286e <__aeabi_dsub+0x4de>
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	074e      	lsls	r6, r1, #29
 80025a0:	08c0      	lsrs	r0, r0, #3
 80025a2:	08c9      	lsrs	r1, r1, #3
 80025a4:	031b      	lsls	r3, r3, #12
 80025a6:	4306      	orrs	r6, r0
 80025a8:	4219      	tst	r1, r3
 80025aa:	d008      	beq.n	80025be <__aeabi_dsub+0x22e>
 80025ac:	4660      	mov	r0, ip
 80025ae:	08c0      	lsrs	r0, r0, #3
 80025b0:	4218      	tst	r0, r3
 80025b2:	d104      	bne.n	80025be <__aeabi_dsub+0x22e>
 80025b4:	4663      	mov	r3, ip
 80025b6:	0001      	movs	r1, r0
 80025b8:	08d2      	lsrs	r2, r2, #3
 80025ba:	075e      	lsls	r6, r3, #29
 80025bc:	4316      	orrs	r6, r2
 80025be:	00f3      	lsls	r3, r6, #3
 80025c0:	4699      	mov	r9, r3
 80025c2:	00c9      	lsls	r1, r1, #3
 80025c4:	0f72      	lsrs	r2, r6, #29
 80025c6:	4d44      	ldr	r5, [pc, #272]	; (80026d8 <__aeabi_dsub+0x348>)
 80025c8:	4311      	orrs	r1, r2
 80025ca:	464b      	mov	r3, r9
 80025cc:	08de      	lsrs	r6, r3, #3
 80025ce:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <__aeabi_dsub+0x348>)
 80025d0:	074f      	lsls	r7, r1, #29
 80025d2:	4337      	orrs	r7, r6
 80025d4:	08ca      	lsrs	r2, r1, #3
 80025d6:	429d      	cmp	r5, r3
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x24c>
 80025da:	e06e      	b.n	80026ba <__aeabi_dsub+0x32a>
 80025dc:	0312      	lsls	r2, r2, #12
 80025de:	056d      	lsls	r5, r5, #21
 80025e0:	0b12      	lsrs	r2, r2, #12
 80025e2:	0d6d      	lsrs	r5, r5, #21
 80025e4:	2100      	movs	r1, #0
 80025e6:	0312      	lsls	r2, r2, #12
 80025e8:	0b13      	lsrs	r3, r2, #12
 80025ea:	0d0a      	lsrs	r2, r1, #20
 80025ec:	0512      	lsls	r2, r2, #20
 80025ee:	431a      	orrs	r2, r3
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <__aeabi_dsub+0x350>)
 80025f2:	052d      	lsls	r5, r5, #20
 80025f4:	4013      	ands	r3, r2
 80025f6:	432b      	orrs	r3, r5
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	07e4      	lsls	r4, r4, #31
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	4323      	orrs	r3, r4
 8002600:	0038      	movs	r0, r7
 8002602:	0019      	movs	r1, r3
 8002604:	bc3c      	pop	{r2, r3, r4, r5}
 8002606:	4690      	mov	r8, r2
 8002608:	4699      	mov	r9, r3
 800260a:	46a2      	mov	sl, r4
 800260c:	46ab      	mov	fp, r5
 800260e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002610:	4663      	mov	r3, ip
 8002612:	4313      	orrs	r3, r2
 8002614:	d011      	beq.n	800263a <__aeabi_dsub+0x2aa>
 8002616:	1e73      	subs	r3, r6, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d000      	beq.n	800261e <__aeabi_dsub+0x28e>
 800261c:	e107      	b.n	800282e <__aeabi_dsub+0x49e>
 800261e:	1886      	adds	r6, r0, r2
 8002620:	4286      	cmp	r6, r0
 8002622:	4180      	sbcs	r0, r0
 8002624:	4461      	add	r1, ip
 8002626:	4240      	negs	r0, r0
 8002628:	1809      	adds	r1, r1, r0
 800262a:	2501      	movs	r5, #1
 800262c:	020b      	lsls	r3, r1, #8
 800262e:	d537      	bpl.n	80026a0 <__aeabi_dsub+0x310>
 8002630:	2502      	movs	r5, #2
 8002632:	e77b      	b.n	800252c <__aeabi_dsub+0x19c>
 8002634:	003e      	movs	r6, r7
 8002636:	4661      	mov	r1, ip
 8002638:	4691      	mov	r9, r2
 800263a:	0035      	movs	r5, r6
 800263c:	e7c5      	b.n	80025ca <__aeabi_dsub+0x23a>
 800263e:	465c      	mov	r4, fp
 8002640:	2d00      	cmp	r5, #0
 8002642:	d000      	beq.n	8002646 <__aeabi_dsub+0x2b6>
 8002644:	e0e1      	b.n	800280a <__aeabi_dsub+0x47a>
 8002646:	000b      	movs	r3, r1
 8002648:	4303      	orrs	r3, r0
 800264a:	d0f3      	beq.n	8002634 <__aeabi_dsub+0x2a4>
 800264c:	1c73      	adds	r3, r6, #1
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x2c2>
 8002650:	e1ac      	b.n	80029ac <__aeabi_dsub+0x61c>
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <__aeabi_dsub+0x348>)
 8002654:	429f      	cmp	r7, r3
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0x2ca>
 8002658:	e13a      	b.n	80028d0 <__aeabi_dsub+0x540>
 800265a:	43f3      	mvns	r3, r6
 800265c:	2b38      	cmp	r3, #56	; 0x38
 800265e:	dd00      	ble.n	8002662 <__aeabi_dsub+0x2d2>
 8002660:	e16f      	b.n	8002942 <__aeabi_dsub+0x5b2>
 8002662:	2b1f      	cmp	r3, #31
 8002664:	dd00      	ble.n	8002668 <__aeabi_dsub+0x2d8>
 8002666:	e18c      	b.n	8002982 <__aeabi_dsub+0x5f2>
 8002668:	2520      	movs	r5, #32
 800266a:	000e      	movs	r6, r1
 800266c:	1aed      	subs	r5, r5, r3
 800266e:	40ae      	lsls	r6, r5
 8002670:	46b0      	mov	r8, r6
 8002672:	0006      	movs	r6, r0
 8002674:	46aa      	mov	sl, r5
 8002676:	40de      	lsrs	r6, r3
 8002678:	4645      	mov	r5, r8
 800267a:	4335      	orrs	r5, r6
 800267c:	002e      	movs	r6, r5
 800267e:	4655      	mov	r5, sl
 8002680:	40d9      	lsrs	r1, r3
 8002682:	40a8      	lsls	r0, r5
 8002684:	4663      	mov	r3, ip
 8002686:	1e45      	subs	r5, r0, #1
 8002688:	41a8      	sbcs	r0, r5
 800268a:	1a5b      	subs	r3, r3, r1
 800268c:	469c      	mov	ip, r3
 800268e:	4330      	orrs	r0, r6
 8002690:	1a16      	subs	r6, r2, r0
 8002692:	42b2      	cmp	r2, r6
 8002694:	4192      	sbcs	r2, r2
 8002696:	4663      	mov	r3, ip
 8002698:	4252      	negs	r2, r2
 800269a:	1a99      	subs	r1, r3, r2
 800269c:	003d      	movs	r5, r7
 800269e:	e6b4      	b.n	800240a <__aeabi_dsub+0x7a>
 80026a0:	2207      	movs	r2, #7
 80026a2:	4032      	ands	r2, r6
 80026a4:	2a00      	cmp	r2, #0
 80026a6:	d000      	beq.n	80026aa <__aeabi_dsub+0x31a>
 80026a8:	e6e4      	b.n	8002474 <__aeabi_dsub+0xe4>
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <__aeabi_dsub+0x348>)
 80026ac:	08f6      	lsrs	r6, r6, #3
 80026ae:	074f      	lsls	r7, r1, #29
 80026b0:	4337      	orrs	r7, r6
 80026b2:	08ca      	lsrs	r2, r1, #3
 80026b4:	429d      	cmp	r5, r3
 80026b6:	d000      	beq.n	80026ba <__aeabi_dsub+0x32a>
 80026b8:	e790      	b.n	80025dc <__aeabi_dsub+0x24c>
 80026ba:	003b      	movs	r3, r7
 80026bc:	4313      	orrs	r3, r2
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x332>
 80026c0:	e1a6      	b.n	8002a10 <__aeabi_dsub+0x680>
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	031b      	lsls	r3, r3, #12
 80026c6:	431a      	orrs	r2, r3
 80026c8:	0312      	lsls	r2, r2, #12
 80026ca:	0b12      	lsrs	r2, r2, #12
 80026cc:	4d02      	ldr	r5, [pc, #8]	; (80026d8 <__aeabi_dsub+0x348>)
 80026ce:	e789      	b.n	80025e4 <__aeabi_dsub+0x254>
 80026d0:	0015      	movs	r5, r2
 80026d2:	2200      	movs	r2, #0
 80026d4:	2700      	movs	r7, #0
 80026d6:	e785      	b.n	80025e4 <__aeabi_dsub+0x254>
 80026d8:	000007ff 	.word	0x000007ff
 80026dc:	ff7fffff 	.word	0xff7fffff
 80026e0:	800fffff 	.word	0x800fffff
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x35a>
 80026e8:	e0c7      	b.n	800287a <__aeabi_dsub+0x4ea>
 80026ea:	1c6b      	adds	r3, r5, #1
 80026ec:	055e      	lsls	r6, r3, #21
 80026ee:	0d76      	lsrs	r6, r6, #21
 80026f0:	2e01      	cmp	r6, #1
 80026f2:	dc00      	bgt.n	80026f6 <__aeabi_dsub+0x366>
 80026f4:	e0f0      	b.n	80028d8 <__aeabi_dsub+0x548>
 80026f6:	4dc8      	ldr	r5, [pc, #800]	; (8002a18 <__aeabi_dsub+0x688>)
 80026f8:	42ab      	cmp	r3, r5
 80026fa:	d100      	bne.n	80026fe <__aeabi_dsub+0x36e>
 80026fc:	e0b9      	b.n	8002872 <__aeabi_dsub+0x4e2>
 80026fe:	1885      	adds	r5, r0, r2
 8002700:	000a      	movs	r2, r1
 8002702:	4285      	cmp	r5, r0
 8002704:	4189      	sbcs	r1, r1
 8002706:	4462      	add	r2, ip
 8002708:	4249      	negs	r1, r1
 800270a:	1851      	adds	r1, r2, r1
 800270c:	2207      	movs	r2, #7
 800270e:	07ce      	lsls	r6, r1, #31
 8002710:	086d      	lsrs	r5, r5, #1
 8002712:	432e      	orrs	r6, r5
 8002714:	0849      	lsrs	r1, r1, #1
 8002716:	4032      	ands	r2, r6
 8002718:	001d      	movs	r5, r3
 800271a:	e6a9      	b.n	8002470 <__aeabi_dsub+0xe0>
 800271c:	49bf      	ldr	r1, [pc, #764]	; (8002a1c <__aeabi_dsub+0x68c>)
 800271e:	1aed      	subs	r5, r5, r3
 8002720:	4011      	ands	r1, r2
 8002722:	2207      	movs	r2, #7
 8002724:	4032      	ands	r2, r6
 8002726:	e6a3      	b.n	8002470 <__aeabi_dsub+0xe0>
 8002728:	0032      	movs	r2, r6
 800272a:	3828      	subs	r0, #40	; 0x28
 800272c:	4082      	lsls	r2, r0
 800272e:	2600      	movs	r6, #0
 8002730:	e686      	b.n	8002440 <__aeabi_dsub+0xb0>
 8002732:	0030      	movs	r0, r6
 8002734:	f000 fa98 	bl	8002c68 <__clzsi2>
 8002738:	3020      	adds	r0, #32
 800273a:	e673      	b.n	8002424 <__aeabi_dsub+0x94>
 800273c:	4663      	mov	r3, ip
 800273e:	4313      	orrs	r3, r2
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	4193      	sbcs	r3, r2
 8002744:	1ac6      	subs	r6, r0, r3
 8002746:	42b0      	cmp	r0, r6
 8002748:	4180      	sbcs	r0, r0
 800274a:	4240      	negs	r0, r0
 800274c:	1a09      	subs	r1, r1, r0
 800274e:	e65c      	b.n	800240a <__aeabi_dsub+0x7a>
 8002750:	000e      	movs	r6, r1
 8002752:	4667      	mov	r7, ip
 8002754:	4306      	orrs	r6, r0
 8002756:	4317      	orrs	r7, r2
 8002758:	2d00      	cmp	r5, #0
 800275a:	d15e      	bne.n	800281a <__aeabi_dsub+0x48a>
 800275c:	2e00      	cmp	r6, #0
 800275e:	d000      	beq.n	8002762 <__aeabi_dsub+0x3d2>
 8002760:	e0f3      	b.n	800294a <__aeabi_dsub+0x5ba>
 8002762:	2f00      	cmp	r7, #0
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x3d8>
 8002766:	e11e      	b.n	80029a6 <__aeabi_dsub+0x616>
 8002768:	465c      	mov	r4, fp
 800276a:	4661      	mov	r1, ip
 800276c:	4691      	mov	r9, r2
 800276e:	e72c      	b.n	80025ca <__aeabi_dsub+0x23a>
 8002770:	4fa9      	ldr	r7, [pc, #676]	; (8002a18 <__aeabi_dsub+0x688>)
 8002772:	42be      	cmp	r6, r7
 8002774:	d07b      	beq.n	800286e <__aeabi_dsub+0x4de>
 8002776:	001e      	movs	r6, r3
 8002778:	e6f1      	b.n	800255e <__aeabi_dsub+0x1ce>
 800277a:	0010      	movs	r0, r2
 800277c:	3d1f      	subs	r5, #31
 800277e:	40e8      	lsrs	r0, r5
 8002780:	2b20      	cmp	r3, #32
 8002782:	d003      	beq.n	800278c <__aeabi_dsub+0x3fc>
 8002784:	2140      	movs	r1, #64	; 0x40
 8002786:	1acb      	subs	r3, r1, r3
 8002788:	409a      	lsls	r2, r3
 800278a:	4316      	orrs	r6, r2
 800278c:	1e73      	subs	r3, r6, #1
 800278e:	419e      	sbcs	r6, r3
 8002790:	2207      	movs	r2, #7
 8002792:	4306      	orrs	r6, r0
 8002794:	4032      	ands	r2, r6
 8002796:	2100      	movs	r1, #0
 8002798:	2500      	movs	r5, #0
 800279a:	e783      	b.n	80026a4 <__aeabi_dsub+0x314>
 800279c:	1a16      	subs	r6, r2, r0
 800279e:	4663      	mov	r3, ip
 80027a0:	42b2      	cmp	r2, r6
 80027a2:	4180      	sbcs	r0, r0
 80027a4:	1a59      	subs	r1, r3, r1
 80027a6:	4240      	negs	r0, r0
 80027a8:	1a0b      	subs	r3, r1, r0
 80027aa:	4698      	mov	r8, r3
 80027ac:	465c      	mov	r4, fp
 80027ae:	e632      	b.n	8002416 <__aeabi_dsub+0x86>
 80027b0:	2e1f      	cmp	r6, #31
 80027b2:	dd00      	ble.n	80027b6 <__aeabi_dsub+0x426>
 80027b4:	e0ab      	b.n	800290e <__aeabi_dsub+0x57e>
 80027b6:	2720      	movs	r7, #32
 80027b8:	1bbb      	subs	r3, r7, r6
 80027ba:	469a      	mov	sl, r3
 80027bc:	4663      	mov	r3, ip
 80027be:	4657      	mov	r7, sl
 80027c0:	40bb      	lsls	r3, r7
 80027c2:	4699      	mov	r9, r3
 80027c4:	0013      	movs	r3, r2
 80027c6:	464f      	mov	r7, r9
 80027c8:	40f3      	lsrs	r3, r6
 80027ca:	431f      	orrs	r7, r3
 80027cc:	003b      	movs	r3, r7
 80027ce:	4657      	mov	r7, sl
 80027d0:	40ba      	lsls	r2, r7
 80027d2:	1e57      	subs	r7, r2, #1
 80027d4:	41ba      	sbcs	r2, r7
 80027d6:	4313      	orrs	r3, r2
 80027d8:	4662      	mov	r2, ip
 80027da:	40f2      	lsrs	r2, r6
 80027dc:	1889      	adds	r1, r1, r2
 80027de:	e698      	b.n	8002512 <__aeabi_dsub+0x182>
 80027e0:	2720      	movs	r7, #32
 80027e2:	1bbb      	subs	r3, r7, r6
 80027e4:	469a      	mov	sl, r3
 80027e6:	4663      	mov	r3, ip
 80027e8:	4657      	mov	r7, sl
 80027ea:	40bb      	lsls	r3, r7
 80027ec:	4699      	mov	r9, r3
 80027ee:	0013      	movs	r3, r2
 80027f0:	464f      	mov	r7, r9
 80027f2:	40f3      	lsrs	r3, r6
 80027f4:	431f      	orrs	r7, r3
 80027f6:	003b      	movs	r3, r7
 80027f8:	4657      	mov	r7, sl
 80027fa:	40ba      	lsls	r2, r7
 80027fc:	1e57      	subs	r7, r2, #1
 80027fe:	41ba      	sbcs	r2, r7
 8002800:	4313      	orrs	r3, r2
 8002802:	4662      	mov	r2, ip
 8002804:	40f2      	lsrs	r2, r6
 8002806:	1a89      	subs	r1, r1, r2
 8002808:	e79c      	b.n	8002744 <__aeabi_dsub+0x3b4>
 800280a:	4b83      	ldr	r3, [pc, #524]	; (8002a18 <__aeabi_dsub+0x688>)
 800280c:	429f      	cmp	r7, r3
 800280e:	d05f      	beq.n	80028d0 <__aeabi_dsub+0x540>
 8002810:	2580      	movs	r5, #128	; 0x80
 8002812:	042d      	lsls	r5, r5, #16
 8002814:	4273      	negs	r3, r6
 8002816:	4329      	orrs	r1, r5
 8002818:	e720      	b.n	800265c <__aeabi_dsub+0x2cc>
 800281a:	2e00      	cmp	r6, #0
 800281c:	d10c      	bne.n	8002838 <__aeabi_dsub+0x4a8>
 800281e:	2f00      	cmp	r7, #0
 8002820:	d100      	bne.n	8002824 <__aeabi_dsub+0x494>
 8002822:	e0d0      	b.n	80029c6 <__aeabi_dsub+0x636>
 8002824:	465c      	mov	r4, fp
 8002826:	4661      	mov	r1, ip
 8002828:	4691      	mov	r9, r2
 800282a:	4d7b      	ldr	r5, [pc, #492]	; (8002a18 <__aeabi_dsub+0x688>)
 800282c:	e6cd      	b.n	80025ca <__aeabi_dsub+0x23a>
 800282e:	4f7a      	ldr	r7, [pc, #488]	; (8002a18 <__aeabi_dsub+0x688>)
 8002830:	42be      	cmp	r6, r7
 8002832:	d01c      	beq.n	800286e <__aeabi_dsub+0x4de>
 8002834:	001e      	movs	r6, r3
 8002836:	e665      	b.n	8002504 <__aeabi_dsub+0x174>
 8002838:	2f00      	cmp	r7, #0
 800283a:	d018      	beq.n	800286e <__aeabi_dsub+0x4de>
 800283c:	08c0      	lsrs	r0, r0, #3
 800283e:	074e      	lsls	r6, r1, #29
 8002840:	4306      	orrs	r6, r0
 8002842:	2080      	movs	r0, #128	; 0x80
 8002844:	08c9      	lsrs	r1, r1, #3
 8002846:	0300      	lsls	r0, r0, #12
 8002848:	4201      	tst	r1, r0
 800284a:	d008      	beq.n	800285e <__aeabi_dsub+0x4ce>
 800284c:	4663      	mov	r3, ip
 800284e:	08dc      	lsrs	r4, r3, #3
 8002850:	4204      	tst	r4, r0
 8002852:	d104      	bne.n	800285e <__aeabi_dsub+0x4ce>
 8002854:	0021      	movs	r1, r4
 8002856:	46da      	mov	sl, fp
 8002858:	08d2      	lsrs	r2, r2, #3
 800285a:	075e      	lsls	r6, r3, #29
 800285c:	4316      	orrs	r6, r2
 800285e:	00f3      	lsls	r3, r6, #3
 8002860:	4699      	mov	r9, r3
 8002862:	2401      	movs	r4, #1
 8002864:	4653      	mov	r3, sl
 8002866:	00c9      	lsls	r1, r1, #3
 8002868:	0f72      	lsrs	r2, r6, #29
 800286a:	4311      	orrs	r1, r2
 800286c:	401c      	ands	r4, r3
 800286e:	4d6a      	ldr	r5, [pc, #424]	; (8002a18 <__aeabi_dsub+0x688>)
 8002870:	e6ab      	b.n	80025ca <__aeabi_dsub+0x23a>
 8002872:	001d      	movs	r5, r3
 8002874:	2200      	movs	r2, #0
 8002876:	2700      	movs	r7, #0
 8002878:	e6b4      	b.n	80025e4 <__aeabi_dsub+0x254>
 800287a:	2d00      	cmp	r5, #0
 800287c:	d159      	bne.n	8002932 <__aeabi_dsub+0x5a2>
 800287e:	000b      	movs	r3, r1
 8002880:	4303      	orrs	r3, r0
 8002882:	d100      	bne.n	8002886 <__aeabi_dsub+0x4f6>
 8002884:	e6d6      	b.n	8002634 <__aeabi_dsub+0x2a4>
 8002886:	1c73      	adds	r3, r6, #1
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x4fc>
 800288a:	e0b2      	b.n	80029f2 <__aeabi_dsub+0x662>
 800288c:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <__aeabi_dsub+0x688>)
 800288e:	429f      	cmp	r7, r3
 8002890:	d01e      	beq.n	80028d0 <__aeabi_dsub+0x540>
 8002892:	43f3      	mvns	r3, r6
 8002894:	2b38      	cmp	r3, #56	; 0x38
 8002896:	dc6f      	bgt.n	8002978 <__aeabi_dsub+0x5e8>
 8002898:	2b1f      	cmp	r3, #31
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0x50e>
 800289c:	e097      	b.n	80029ce <__aeabi_dsub+0x63e>
 800289e:	2520      	movs	r5, #32
 80028a0:	000e      	movs	r6, r1
 80028a2:	1aed      	subs	r5, r5, r3
 80028a4:	40ae      	lsls	r6, r5
 80028a6:	46b0      	mov	r8, r6
 80028a8:	0006      	movs	r6, r0
 80028aa:	46aa      	mov	sl, r5
 80028ac:	40de      	lsrs	r6, r3
 80028ae:	4645      	mov	r5, r8
 80028b0:	4335      	orrs	r5, r6
 80028b2:	002e      	movs	r6, r5
 80028b4:	4655      	mov	r5, sl
 80028b6:	40a8      	lsls	r0, r5
 80028b8:	40d9      	lsrs	r1, r3
 80028ba:	1e45      	subs	r5, r0, #1
 80028bc:	41a8      	sbcs	r0, r5
 80028be:	448c      	add	ip, r1
 80028c0:	4306      	orrs	r6, r0
 80028c2:	18b6      	adds	r6, r6, r2
 80028c4:	4296      	cmp	r6, r2
 80028c6:	4192      	sbcs	r2, r2
 80028c8:	4251      	negs	r1, r2
 80028ca:	4461      	add	r1, ip
 80028cc:	003d      	movs	r5, r7
 80028ce:	e625      	b.n	800251c <__aeabi_dsub+0x18c>
 80028d0:	003d      	movs	r5, r7
 80028d2:	4661      	mov	r1, ip
 80028d4:	4691      	mov	r9, r2
 80028d6:	e678      	b.n	80025ca <__aeabi_dsub+0x23a>
 80028d8:	000b      	movs	r3, r1
 80028da:	4303      	orrs	r3, r0
 80028dc:	2d00      	cmp	r5, #0
 80028de:	d000      	beq.n	80028e2 <__aeabi_dsub+0x552>
 80028e0:	e655      	b.n	800258e <__aeabi_dsub+0x1fe>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f5      	beq.n	80028d2 <__aeabi_dsub+0x542>
 80028e6:	4663      	mov	r3, ip
 80028e8:	4313      	orrs	r3, r2
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x55e>
 80028ec:	e66d      	b.n	80025ca <__aeabi_dsub+0x23a>
 80028ee:	1886      	adds	r6, r0, r2
 80028f0:	4286      	cmp	r6, r0
 80028f2:	4180      	sbcs	r0, r0
 80028f4:	4461      	add	r1, ip
 80028f6:	4240      	negs	r0, r0
 80028f8:	1809      	adds	r1, r1, r0
 80028fa:	2200      	movs	r2, #0
 80028fc:	020b      	lsls	r3, r1, #8
 80028fe:	d400      	bmi.n	8002902 <__aeabi_dsub+0x572>
 8002900:	e6d0      	b.n	80026a4 <__aeabi_dsub+0x314>
 8002902:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <__aeabi_dsub+0x68c>)
 8002904:	3501      	adds	r5, #1
 8002906:	4019      	ands	r1, r3
 8002908:	e5b2      	b.n	8002470 <__aeabi_dsub+0xe0>
 800290a:	46b1      	mov	r9, r6
 800290c:	e65d      	b.n	80025ca <__aeabi_dsub+0x23a>
 800290e:	0033      	movs	r3, r6
 8002910:	4667      	mov	r7, ip
 8002912:	3b20      	subs	r3, #32
 8002914:	40df      	lsrs	r7, r3
 8002916:	003b      	movs	r3, r7
 8002918:	2e20      	cmp	r6, #32
 800291a:	d005      	beq.n	8002928 <__aeabi_dsub+0x598>
 800291c:	2740      	movs	r7, #64	; 0x40
 800291e:	1bbf      	subs	r7, r7, r6
 8002920:	4666      	mov	r6, ip
 8002922:	40be      	lsls	r6, r7
 8002924:	4332      	orrs	r2, r6
 8002926:	4690      	mov	r8, r2
 8002928:	4646      	mov	r6, r8
 800292a:	1e72      	subs	r2, r6, #1
 800292c:	4196      	sbcs	r6, r2
 800292e:	4333      	orrs	r3, r6
 8002930:	e5ef      	b.n	8002512 <__aeabi_dsub+0x182>
 8002932:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <__aeabi_dsub+0x688>)
 8002934:	429f      	cmp	r7, r3
 8002936:	d0cb      	beq.n	80028d0 <__aeabi_dsub+0x540>
 8002938:	2580      	movs	r5, #128	; 0x80
 800293a:	042d      	lsls	r5, r5, #16
 800293c:	4273      	negs	r3, r6
 800293e:	4329      	orrs	r1, r5
 8002940:	e7a8      	b.n	8002894 <__aeabi_dsub+0x504>
 8002942:	4308      	orrs	r0, r1
 8002944:	1e41      	subs	r1, r0, #1
 8002946:	4188      	sbcs	r0, r1
 8002948:	e6a2      	b.n	8002690 <__aeabi_dsub+0x300>
 800294a:	2f00      	cmp	r7, #0
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x5c0>
 800294e:	e63c      	b.n	80025ca <__aeabi_dsub+0x23a>
 8002950:	4663      	mov	r3, ip
 8002952:	1a86      	subs	r6, r0, r2
 8002954:	1acf      	subs	r7, r1, r3
 8002956:	42b0      	cmp	r0, r6
 8002958:	419b      	sbcs	r3, r3
 800295a:	425b      	negs	r3, r3
 800295c:	1afb      	subs	r3, r7, r3
 800295e:	4698      	mov	r8, r3
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	d54e      	bpl.n	8002a02 <__aeabi_dsub+0x672>
 8002964:	1a16      	subs	r6, r2, r0
 8002966:	4663      	mov	r3, ip
 8002968:	42b2      	cmp	r2, r6
 800296a:	4192      	sbcs	r2, r2
 800296c:	1a59      	subs	r1, r3, r1
 800296e:	4252      	negs	r2, r2
 8002970:	1a89      	subs	r1, r1, r2
 8002972:	465c      	mov	r4, fp
 8002974:	2200      	movs	r2, #0
 8002976:	e57b      	b.n	8002470 <__aeabi_dsub+0xe0>
 8002978:	4301      	orrs	r1, r0
 800297a:	000e      	movs	r6, r1
 800297c:	1e71      	subs	r1, r6, #1
 800297e:	418e      	sbcs	r6, r1
 8002980:	e79f      	b.n	80028c2 <__aeabi_dsub+0x532>
 8002982:	001d      	movs	r5, r3
 8002984:	000e      	movs	r6, r1
 8002986:	3d20      	subs	r5, #32
 8002988:	40ee      	lsrs	r6, r5
 800298a:	46b0      	mov	r8, r6
 800298c:	2b20      	cmp	r3, #32
 800298e:	d004      	beq.n	800299a <__aeabi_dsub+0x60a>
 8002990:	2540      	movs	r5, #64	; 0x40
 8002992:	1aeb      	subs	r3, r5, r3
 8002994:	4099      	lsls	r1, r3
 8002996:	4308      	orrs	r0, r1
 8002998:	4681      	mov	r9, r0
 800299a:	4648      	mov	r0, r9
 800299c:	4643      	mov	r3, r8
 800299e:	1e41      	subs	r1, r0, #1
 80029a0:	4188      	sbcs	r0, r1
 80029a2:	4318      	orrs	r0, r3
 80029a4:	e674      	b.n	8002690 <__aeabi_dsub+0x300>
 80029a6:	2200      	movs	r2, #0
 80029a8:	2400      	movs	r4, #0
 80029aa:	e617      	b.n	80025dc <__aeabi_dsub+0x24c>
 80029ac:	1a16      	subs	r6, r2, r0
 80029ae:	4663      	mov	r3, ip
 80029b0:	42b2      	cmp	r2, r6
 80029b2:	4192      	sbcs	r2, r2
 80029b4:	1a59      	subs	r1, r3, r1
 80029b6:	4252      	negs	r2, r2
 80029b8:	1a89      	subs	r1, r1, r2
 80029ba:	003d      	movs	r5, r7
 80029bc:	e525      	b.n	800240a <__aeabi_dsub+0x7a>
 80029be:	4661      	mov	r1, ip
 80029c0:	4691      	mov	r9, r2
 80029c2:	4d15      	ldr	r5, [pc, #84]	; (8002a18 <__aeabi_dsub+0x688>)
 80029c4:	e601      	b.n	80025ca <__aeabi_dsub+0x23a>
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	2400      	movs	r4, #0
 80029ca:	0312      	lsls	r2, r2, #12
 80029cc:	e679      	b.n	80026c2 <__aeabi_dsub+0x332>
 80029ce:	001d      	movs	r5, r3
 80029d0:	000e      	movs	r6, r1
 80029d2:	3d20      	subs	r5, #32
 80029d4:	40ee      	lsrs	r6, r5
 80029d6:	46b0      	mov	r8, r6
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d004      	beq.n	80029e6 <__aeabi_dsub+0x656>
 80029dc:	2540      	movs	r5, #64	; 0x40
 80029de:	1aeb      	subs	r3, r5, r3
 80029e0:	4099      	lsls	r1, r3
 80029e2:	4308      	orrs	r0, r1
 80029e4:	4681      	mov	r9, r0
 80029e6:	464e      	mov	r6, r9
 80029e8:	4643      	mov	r3, r8
 80029ea:	1e71      	subs	r1, r6, #1
 80029ec:	418e      	sbcs	r6, r1
 80029ee:	431e      	orrs	r6, r3
 80029f0:	e767      	b.n	80028c2 <__aeabi_dsub+0x532>
 80029f2:	1886      	adds	r6, r0, r2
 80029f4:	4296      	cmp	r6, r2
 80029f6:	419b      	sbcs	r3, r3
 80029f8:	4461      	add	r1, ip
 80029fa:	425b      	negs	r3, r3
 80029fc:	18c9      	adds	r1, r1, r3
 80029fe:	003d      	movs	r5, r7
 8002a00:	e58c      	b.n	800251c <__aeabi_dsub+0x18c>
 8002a02:	4647      	mov	r7, r8
 8002a04:	4337      	orrs	r7, r6
 8002a06:	d0ce      	beq.n	80029a6 <__aeabi_dsub+0x616>
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4641      	mov	r1, r8
 8002a0c:	4032      	ands	r2, r6
 8002a0e:	e649      	b.n	80026a4 <__aeabi_dsub+0x314>
 8002a10:	2700      	movs	r7, #0
 8002a12:	003a      	movs	r2, r7
 8002a14:	e5e6      	b.n	80025e4 <__aeabi_dsub+0x254>
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	000007ff 	.word	0x000007ff
 8002a1c:	ff7fffff 	.word	0xff7fffff

08002a20 <__aeabi_dcmpun>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4e0c      	ldr	r6, [pc, #48]	; (8002a54 <__aeabi_dcmpun+0x34>)
 8002a24:	030d      	lsls	r5, r1, #12
 8002a26:	031c      	lsls	r4, r3, #12
 8002a28:	0049      	lsls	r1, r1, #1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	0b2d      	lsrs	r5, r5, #12
 8002a2e:	0d49      	lsrs	r1, r1, #21
 8002a30:	0b24      	lsrs	r4, r4, #12
 8002a32:	0d5b      	lsrs	r3, r3, #21
 8002a34:	42b1      	cmp	r1, r6
 8002a36:	d008      	beq.n	8002a4a <__aeabi_dcmpun+0x2a>
 8002a38:	4906      	ldr	r1, [pc, #24]	; (8002a54 <__aeabi_dcmpun+0x34>)
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d103      	bne.n	8002a48 <__aeabi_dcmpun+0x28>
 8002a40:	4314      	orrs	r4, r2
 8002a42:	0020      	movs	r0, r4
 8002a44:	1e44      	subs	r4, r0, #1
 8002a46:	41a0      	sbcs	r0, r4
 8002a48:	bd70      	pop	{r4, r5, r6, pc}
 8002a4a:	4305      	orrs	r5, r0
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	2d00      	cmp	r5, #0
 8002a50:	d1fa      	bne.n	8002a48 <__aeabi_dcmpun+0x28>
 8002a52:	e7f1      	b.n	8002a38 <__aeabi_dcmpun+0x18>
 8002a54:	000007ff 	.word	0x000007ff

08002a58 <__aeabi_ui2d>:
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	1e04      	subs	r4, r0, #0
 8002a5c:	d025      	beq.n	8002aaa <__aeabi_ui2d+0x52>
 8002a5e:	f000 f903 	bl	8002c68 <__clzsi2>
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <__aeabi_ui2d+0x5c>)
 8002a64:	1a1b      	subs	r3, r3, r0
 8002a66:	055b      	lsls	r3, r3, #21
 8002a68:	0d5b      	lsrs	r3, r3, #21
 8002a6a:	280a      	cmp	r0, #10
 8002a6c:	dd12      	ble.n	8002a94 <__aeabi_ui2d+0x3c>
 8002a6e:	380b      	subs	r0, #11
 8002a70:	4084      	lsls	r4, r0
 8002a72:	2200      	movs	r2, #0
 8002a74:	0324      	lsls	r4, r4, #12
 8002a76:	0b24      	lsrs	r4, r4, #12
 8002a78:	2100      	movs	r1, #0
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	0324      	lsls	r4, r4, #12
 8002a7e:	0d0a      	lsrs	r2, r1, #20
 8002a80:	0b24      	lsrs	r4, r4, #12
 8002a82:	0512      	lsls	r2, r2, #20
 8002a84:	4322      	orrs	r2, r4
 8002a86:	4c0c      	ldr	r4, [pc, #48]	; (8002ab8 <__aeabi_ui2d+0x60>)
 8002a88:	051b      	lsls	r3, r3, #20
 8002a8a:	4022      	ands	r2, r4
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	0859      	lsrs	r1, r3, #1
 8002a92:	bd10      	pop	{r4, pc}
 8002a94:	0002      	movs	r2, r0
 8002a96:	0021      	movs	r1, r4
 8002a98:	3215      	adds	r2, #21
 8002a9a:	4091      	lsls	r1, r2
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	210b      	movs	r1, #11
 8002aa0:	1a08      	subs	r0, r1, r0
 8002aa2:	40c4      	lsrs	r4, r0
 8002aa4:	0324      	lsls	r4, r4, #12
 8002aa6:	0b24      	lsrs	r4, r4, #12
 8002aa8:	e7e6      	b.n	8002a78 <__aeabi_ui2d+0x20>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2400      	movs	r4, #0
 8002aae:	2200      	movs	r2, #0
 8002ab0:	e7e2      	b.n	8002a78 <__aeabi_ui2d+0x20>
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	0000041e 	.word	0x0000041e
 8002ab8:	800fffff 	.word	0x800fffff

08002abc <__aeabi_f2d>:
 8002abc:	0041      	lsls	r1, r0, #1
 8002abe:	0e09      	lsrs	r1, r1, #24
 8002ac0:	1c4b      	adds	r3, r1, #1
 8002ac2:	b570      	push	{r4, r5, r6, lr}
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	0246      	lsls	r6, r0, #9
 8002ac8:	0a75      	lsrs	r5, r6, #9
 8002aca:	0fc4      	lsrs	r4, r0, #31
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	dd14      	ble.n	8002afa <__aeabi_f2d+0x3e>
 8002ad0:	23e0      	movs	r3, #224	; 0xe0
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	076d      	lsls	r5, r5, #29
 8002ad6:	0b36      	lsrs	r6, r6, #12
 8002ad8:	18cb      	adds	r3, r1, r3
 8002ada:	2100      	movs	r1, #0
 8002adc:	0d0a      	lsrs	r2, r1, #20
 8002ade:	0028      	movs	r0, r5
 8002ae0:	0512      	lsls	r2, r2, #20
 8002ae2:	4d1c      	ldr	r5, [pc, #112]	; (8002b54 <__aeabi_f2d+0x98>)
 8002ae4:	4332      	orrs	r2, r6
 8002ae6:	055b      	lsls	r3, r3, #21
 8002ae8:	402a      	ands	r2, r5
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	4313      	orrs	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	07e4      	lsls	r4, r4, #31
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	4323      	orrs	r3, r4
 8002af6:	0019      	movs	r1, r3
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
 8002afa:	2900      	cmp	r1, #0
 8002afc:	d114      	bne.n	8002b28 <__aeabi_f2d+0x6c>
 8002afe:	2d00      	cmp	r5, #0
 8002b00:	d01e      	beq.n	8002b40 <__aeabi_f2d+0x84>
 8002b02:	0028      	movs	r0, r5
 8002b04:	f000 f8b0 	bl	8002c68 <__clzsi2>
 8002b08:	280a      	cmp	r0, #10
 8002b0a:	dc1c      	bgt.n	8002b46 <__aeabi_f2d+0x8a>
 8002b0c:	230b      	movs	r3, #11
 8002b0e:	002a      	movs	r2, r5
 8002b10:	1a1b      	subs	r3, r3, r0
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	0003      	movs	r3, r0
 8002b16:	3315      	adds	r3, #21
 8002b18:	409d      	lsls	r5, r3
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <__aeabi_f2d+0x9c>)
 8002b1c:	0312      	lsls	r2, r2, #12
 8002b1e:	1a1b      	subs	r3, r3, r0
 8002b20:	055b      	lsls	r3, r3, #21
 8002b22:	0b16      	lsrs	r6, r2, #12
 8002b24:	0d5b      	lsrs	r3, r3, #21
 8002b26:	e7d8      	b.n	8002ada <__aeabi_f2d+0x1e>
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	d006      	beq.n	8002b3a <__aeabi_f2d+0x7e>
 8002b2c:	0b32      	lsrs	r2, r6, #12
 8002b2e:	2680      	movs	r6, #128	; 0x80
 8002b30:	0336      	lsls	r6, r6, #12
 8002b32:	076d      	lsls	r5, r5, #29
 8002b34:	4316      	orrs	r6, r2
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <__aeabi_f2d+0xa0>)
 8002b38:	e7cf      	b.n	8002ada <__aeabi_f2d+0x1e>
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <__aeabi_f2d+0xa0>)
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	e7cc      	b.n	8002ada <__aeabi_f2d+0x1e>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2600      	movs	r6, #0
 8002b44:	e7c9      	b.n	8002ada <__aeabi_f2d+0x1e>
 8002b46:	0003      	movs	r3, r0
 8002b48:	002a      	movs	r2, r5
 8002b4a:	3b0b      	subs	r3, #11
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	2500      	movs	r5, #0
 8002b50:	e7e3      	b.n	8002b1a <__aeabi_f2d+0x5e>
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	800fffff 	.word	0x800fffff
 8002b58:	00000389 	.word	0x00000389
 8002b5c:	000007ff 	.word	0x000007ff

08002b60 <__aeabi_d2f>:
 8002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b62:	004c      	lsls	r4, r1, #1
 8002b64:	0d64      	lsrs	r4, r4, #21
 8002b66:	030b      	lsls	r3, r1, #12
 8002b68:	1c62      	adds	r2, r4, #1
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	0f46      	lsrs	r6, r0, #29
 8002b6e:	0552      	lsls	r2, r2, #21
 8002b70:	0fc9      	lsrs	r1, r1, #31
 8002b72:	431e      	orrs	r6, r3
 8002b74:	00c5      	lsls	r5, r0, #3
 8002b76:	0d52      	lsrs	r2, r2, #21
 8002b78:	2a01      	cmp	r2, #1
 8002b7a:	dd29      	ble.n	8002bd0 <__aeabi_d2f+0x70>
 8002b7c:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <__aeabi_d2f+0xfc>)
 8002b7e:	18e7      	adds	r7, r4, r3
 8002b80:	2ffe      	cmp	r7, #254	; 0xfe
 8002b82:	dc1c      	bgt.n	8002bbe <__aeabi_d2f+0x5e>
 8002b84:	2f00      	cmp	r7, #0
 8002b86:	dd3b      	ble.n	8002c00 <__aeabi_d2f+0xa0>
 8002b88:	0180      	lsls	r0, r0, #6
 8002b8a:	1e43      	subs	r3, r0, #1
 8002b8c:	4198      	sbcs	r0, r3
 8002b8e:	2207      	movs	r2, #7
 8002b90:	00f3      	lsls	r3, r6, #3
 8002b92:	0f6d      	lsrs	r5, r5, #29
 8002b94:	4303      	orrs	r3, r0
 8002b96:	432b      	orrs	r3, r5
 8002b98:	401a      	ands	r2, r3
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d004      	beq.n	8002ba8 <__aeabi_d2f+0x48>
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	2a04      	cmp	r2, #4
 8002ba4:	d000      	beq.n	8002ba8 <__aeabi_d2f+0x48>
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	04d2      	lsls	r2, r2, #19
 8002bac:	401a      	ands	r2, r3
 8002bae:	d024      	beq.n	8002bfa <__aeabi_d2f+0x9a>
 8002bb0:	3701      	adds	r7, #1
 8002bb2:	b2fa      	uxtb	r2, r7
 8002bb4:	2fff      	cmp	r7, #255	; 0xff
 8002bb6:	d002      	beq.n	8002bbe <__aeabi_d2f+0x5e>
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	0a58      	lsrs	r0, r3, #9
 8002bbc:	e001      	b.n	8002bc2 <__aeabi_d2f+0x62>
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	0240      	lsls	r0, r0, #9
 8002bc4:	05d2      	lsls	r2, r2, #23
 8002bc6:	0a40      	lsrs	r0, r0, #9
 8002bc8:	07c9      	lsls	r1, r1, #31
 8002bca:	4310      	orrs	r0, r2
 8002bcc:	4308      	orrs	r0, r1
 8002bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd0:	4335      	orrs	r5, r6
 8002bd2:	2c00      	cmp	r4, #0
 8002bd4:	d104      	bne.n	8002be0 <__aeabi_d2f+0x80>
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	d10a      	bne.n	8002bf0 <__aeabi_d2f+0x90>
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2000      	movs	r0, #0
 8002bde:	e7f0      	b.n	8002bc2 <__aeabi_d2f+0x62>
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	d0ec      	beq.n	8002bbe <__aeabi_d2f+0x5e>
 8002be4:	2080      	movs	r0, #128	; 0x80
 8002be6:	03c0      	lsls	r0, r0, #15
 8002be8:	4330      	orrs	r0, r6
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	e7e9      	b.n	8002bc2 <__aeabi_d2f+0x62>
 8002bee:	2400      	movs	r4, #0
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	0a58      	lsrs	r0, r3, #9
 8002bf6:	b2e2      	uxtb	r2, r4
 8002bf8:	e7e3      	b.n	8002bc2 <__aeabi_d2f+0x62>
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	003c      	movs	r4, r7
 8002bfe:	e7f8      	b.n	8002bf2 <__aeabi_d2f+0x92>
 8002c00:	003b      	movs	r3, r7
 8002c02:	3317      	adds	r3, #23
 8002c04:	dbf3      	blt.n	8002bee <__aeabi_d2f+0x8e>
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	041b      	lsls	r3, r3, #16
 8002c0a:	4333      	orrs	r3, r6
 8002c0c:	261e      	movs	r6, #30
 8002c0e:	1bf6      	subs	r6, r6, r7
 8002c10:	2e1f      	cmp	r6, #31
 8002c12:	dd14      	ble.n	8002c3e <__aeabi_d2f+0xde>
 8002c14:	2202      	movs	r2, #2
 8002c16:	4252      	negs	r2, r2
 8002c18:	1bd7      	subs	r7, r2, r7
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	40fa      	lsrs	r2, r7
 8002c1e:	0017      	movs	r7, r2
 8002c20:	2e20      	cmp	r6, #32
 8002c22:	d004      	beq.n	8002c2e <__aeabi_d2f+0xce>
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <__aeabi_d2f+0x100>)
 8002c26:	4694      	mov	ip, r2
 8002c28:	4464      	add	r4, ip
 8002c2a:	40a3      	lsls	r3, r4
 8002c2c:	431d      	orrs	r5, r3
 8002c2e:	002b      	movs	r3, r5
 8002c30:	1e5d      	subs	r5, r3, #1
 8002c32:	41ab      	sbcs	r3, r5
 8002c34:	2207      	movs	r2, #7
 8002c36:	433b      	orrs	r3, r7
 8002c38:	401a      	ands	r2, r3
 8002c3a:	2700      	movs	r7, #0
 8002c3c:	e7ad      	b.n	8002b9a <__aeabi_d2f+0x3a>
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <__aeabi_d2f+0x104>)
 8002c40:	0028      	movs	r0, r5
 8002c42:	18a2      	adds	r2, r4, r2
 8002c44:	4095      	lsls	r5, r2
 8002c46:	4093      	lsls	r3, r2
 8002c48:	1e6c      	subs	r4, r5, #1
 8002c4a:	41a5      	sbcs	r5, r4
 8002c4c:	40f0      	lsrs	r0, r6
 8002c4e:	2207      	movs	r2, #7
 8002c50:	432b      	orrs	r3, r5
 8002c52:	4303      	orrs	r3, r0
 8002c54:	401a      	ands	r2, r3
 8002c56:	2700      	movs	r7, #0
 8002c58:	e79f      	b.n	8002b9a <__aeabi_d2f+0x3a>
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffffc80 	.word	0xfffffc80
 8002c60:	fffffca2 	.word	0xfffffca2
 8002c64:	fffffc82 	.word	0xfffffc82

08002c68 <__clzsi2>:
 8002c68:	211c      	movs	r1, #28
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	4298      	cmp	r0, r3
 8002c70:	d301      	bcc.n	8002c76 <__clzsi2+0xe>
 8002c72:	0c00      	lsrs	r0, r0, #16
 8002c74:	3910      	subs	r1, #16
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	d301      	bcc.n	8002c80 <__clzsi2+0x18>
 8002c7c:	0a00      	lsrs	r0, r0, #8
 8002c7e:	3908      	subs	r1, #8
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	4298      	cmp	r0, r3
 8002c84:	d301      	bcc.n	8002c8a <__clzsi2+0x22>
 8002c86:	0900      	lsrs	r0, r0, #4
 8002c88:	3904      	subs	r1, #4
 8002c8a:	a202      	add	r2, pc, #8	; (adr r2, 8002c94 <__clzsi2+0x2c>)
 8002c8c:	5c10      	ldrb	r0, [r2, r0]
 8002c8e:	1840      	adds	r0, r0, r1
 8002c90:	4770      	bx	lr
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	02020304 	.word	0x02020304
 8002c98:	01010101 	.word	0x01010101
	...

08002ca4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_Init+0x24>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_Init+0x24>)
 8002cae:	2110      	movs	r1, #16
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f000 f809 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cba:	f002 fda7 	bl	800580c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	40022000 	.word	0x40022000

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002cd4:	f000 ff74 	bl	8003bc0 <HAL_RCC_GetHCLKFreq>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	23fa      	movs	r3, #250	; 0xfa
 8002cdc:	0099      	lsls	r1, r3, #2
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f7fd fa12 	bl	8000108 <__udivsi3>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f90d 	bl	8002f06 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	425b      	negs	r3, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f8e1 	bl	8002ebc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b002      	add	sp, #8
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  uwTick++;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_IncTick+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <HAL_IncTick+0x14>)
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200000b8 	.word	0x200000b8

08002d1c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d20:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <HAL_GetTick+0x10>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	200000b8 	.word	0x200000b8

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_GetTick>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3301      	adds	r3, #1
 8002d48:	d002      	beq.n	8002d50 <HAL_Delay+0x20>
  {
     wait++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002d50:	46c0      	nop			; (mov r8, r8)
 8002d52:	f7ff ffe3 	bl	8002d1c <HAL_GetTick>
 8002d56:	0002      	movs	r2, r0
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d8f7      	bhi.n	8002d52 <HAL_Delay+0x22>
  {
  }
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	0002      	movs	r2, r0
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	231f      	movs	r3, #31
 8002d80:	401a      	ands	r2, r3
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <NVIC_EnableIRQ+0x28>)
 8002d84:	2101      	movs	r1, #1
 8002d86:	4091      	lsls	r1, r2
 8002d88:	000a      	movs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	0002      	movs	r2, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b7f      	cmp	r3, #127	; 0x7f
 8002dac:	d932      	bls.n	8002e14 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dae:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <NVIC_SetPriority+0xd4>)
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	0019      	movs	r1, r3
 8002db6:	230f      	movs	r3, #15
 8002db8:	400b      	ands	r3, r1
 8002dba:	3b08      	subs	r3, #8
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	18d3      	adds	r3, r2, r3
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1dfa      	adds	r2, r7, #7
 8002dca:	7812      	ldrb	r2, [r2, #0]
 8002dcc:	0011      	movs	r1, r2
 8002dce:	2203      	movs	r2, #3
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	00d2      	lsls	r2, r2, #3
 8002dd4:	21ff      	movs	r1, #255	; 0xff
 8002dd6:	4091      	lsls	r1, r2
 8002dd8:	000a      	movs	r2, r1
 8002dda:	43d2      	mvns	r2, r2
 8002ddc:	401a      	ands	r2, r3
 8002dde:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	019b      	lsls	r3, r3, #6
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	401a      	ands	r2, r3
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	0018      	movs	r0, r3
 8002dee:	2303      	movs	r3, #3
 8002df0:	4003      	ands	r3, r0
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df6:	481d      	ldr	r0, [pc, #116]	; (8002e6c <NVIC_SetPriority+0xd4>)
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	001c      	movs	r4, r3
 8002dfe:	230f      	movs	r3, #15
 8002e00:	4023      	ands	r3, r4
 8002e02:	3b08      	subs	r3, #8
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	430a      	orrs	r2, r1
 8002e08:	3306      	adds	r3, #6
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	18c3      	adds	r3, r0, r3
 8002e0e:	3304      	adds	r3, #4
 8002e10:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e12:	e027      	b.n	8002e64 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <NVIC_SetPriority+0xd8>)
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	33c0      	adds	r3, #192	; 0xc0
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	589b      	ldr	r3, [r3, r2]
 8002e24:	1dfa      	adds	r2, r7, #7
 8002e26:	7812      	ldrb	r2, [r2, #0]
 8002e28:	0011      	movs	r1, r2
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	00d2      	lsls	r2, r2, #3
 8002e30:	21ff      	movs	r1, #255	; 0xff
 8002e32:	4091      	lsls	r1, r2
 8002e34:	000a      	movs	r2, r1
 8002e36:	43d2      	mvns	r2, r2
 8002e38:	401a      	ands	r2, r3
 8002e3a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	019b      	lsls	r3, r3, #6
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	401a      	ands	r2, r3
 8002e44:	1dfb      	adds	r3, r7, #7
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	4003      	ands	r3, r0
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e52:	4807      	ldr	r0, [pc, #28]	; (8002e70 <NVIC_SetPriority+0xd8>)
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	33c0      	adds	r3, #192	; 0xc0
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	501a      	str	r2, [r3, r0]
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b003      	add	sp, #12
 8002e6a:	bd90      	pop	{r4, r7, pc}
 8002e6c:	e000ed00 	.word	0xe000ed00
 8002e70:	e000e100 	.word	0xe000e100

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <SysTick_Config+0x40>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e010      	b.n	8002eac <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <SysTick_Config+0x44>)
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	3a01      	subs	r2, #1
 8002e90:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	2301      	movs	r3, #1
 8002e94:	425b      	negs	r3, r3
 8002e96:	2103      	movs	r1, #3
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff ff7d 	bl	8002d98 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <SysTick_Config+0x44>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SysTick_Config+0x44>)
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	00ffffff 	.word	0x00ffffff
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	1c02      	adds	r2, r0, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ff5d 	bl	8002d98 <NVIC_SetPriority>
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	0002      	movs	r2, r0
 8002eee:	1dfb      	adds	r3, r7, #7
 8002ef0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff ff37 	bl	8002d6c <NVIC_EnableIRQ>
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff ffaf 	bl	8002e74 <SysTick_Config>
 8002f16:	0003      	movs	r3, r0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	230f      	movs	r3, #15
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2221      	movs	r2, #33	; 0x21
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d007      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f42:	230f      	movs	r3, #15
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e028      	b.n	8002f9e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	210e      	movs	r1, #14
 8002f58:	438a      	bics	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	438a      	bics	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f74:	2101      	movs	r1, #1
 8002f76:	4091      	lsls	r1, r2
 8002f78:	000a      	movs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2221      	movs	r2, #33	; 0x21
 8002f80:	2101      	movs	r1, #1
 8002f82:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d004      	beq.n	8002f9e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	0010      	movs	r0, r2
 8002f9c:	4798      	blx	r3
    } 
  }
  return status;
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b004      	add	sp, #16
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002fc2:	e14f      	b.n	8003264 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4091      	lsls	r1, r2
 8002fce:	000a      	movs	r2, r1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d100      	bne.n	8002fdc <HAL_GPIO_Init+0x30>
 8002fda:	e140      	b.n	800325e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_Init+0x40>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b12      	cmp	r3, #18
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	58d3      	ldr	r3, [r2, r3]
 8002ff8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	4013      	ands	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	409a      	lsls	r2, r3
 8003006:	0013      	movs	r3, r2
 8003008:	43da      	mvns	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2107      	movs	r1, #7
 8003018:	400b      	ands	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	409a      	lsls	r2, r3
 800301e:	0013      	movs	r3, r2
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	409a      	lsls	r2, r3
 8003042:	0013      	movs	r3, r2
 8003044:	43da      	mvns	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	401a      	ands	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	409a      	lsls	r2, r3
 800305a:	0013      	movs	r3, r2
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d00b      	beq.n	8003088 <HAL_GPIO_Init+0xdc>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800307c:	2b11      	cmp	r3, #17
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b12      	cmp	r3, #18
 8003086:	d130      	bne.n	80030ea <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	2203      	movs	r2, #3
 8003094:	409a      	lsls	r2, r3
 8003096:	0013      	movs	r3, r2
 8003098:	43da      	mvns	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	409a      	lsls	r2, r3
 80030aa:	0013      	movs	r3, r2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80030be:	2201      	movs	r2, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	43da      	mvns	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	2201      	movs	r2, #1
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
 80030dc:	0013      	movs	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	2203      	movs	r2, #3
 80030f6:	409a      	lsls	r2, r3
 80030f8:	0013      	movs	r3, r2
 80030fa:	43da      	mvns	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	0013      	movs	r3, r2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	055b      	lsls	r3, r3, #21
 8003122:	4013      	ands	r3, r2
 8003124:	d100      	bne.n	8003128 <HAL_GPIO_Init+0x17c>
 8003126:	e09a      	b.n	800325e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003128:	4b54      	ldr	r3, [pc, #336]	; (800327c <HAL_GPIO_Init+0x2d0>)
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_GPIO_Init+0x2d0>)
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	619a      	str	r2, [r3, #24]
 8003134:	4b51      	ldr	r3, [pc, #324]	; (800327c <HAL_GPIO_Init+0x2d0>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003140:	4a4f      	ldr	r2, [pc, #316]	; (8003280 <HAL_GPIO_Init+0x2d4>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	589b      	ldr	r3, [r3, r2]
 800314c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2203      	movs	r2, #3
 8003152:	4013      	ands	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	220f      	movs	r2, #15
 8003158:	409a      	lsls	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	43da      	mvns	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4013      	ands	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	2390      	movs	r3, #144	; 0x90
 8003168:	05db      	lsls	r3, r3, #23
 800316a:	429a      	cmp	r2, r3
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0x1ea>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a44      	ldr	r2, [pc, #272]	; (8003284 <HAL_GPIO_Init+0x2d8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00d      	beq.n	8003192 <HAL_GPIO_Init+0x1e6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a43      	ldr	r2, [pc, #268]	; (8003288 <HAL_GPIO_Init+0x2dc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <HAL_GPIO_Init+0x1e2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_GPIO_Init+0x2e0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d101      	bne.n	800318a <HAL_GPIO_Init+0x1de>
 8003186:	2303      	movs	r3, #3
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x1ec>
 800318a:	2305      	movs	r3, #5
 800318c:	e004      	b.n	8003198 <HAL_GPIO_Init+0x1ec>
 800318e:	2302      	movs	r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x1ec>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x1ec>
 8003196:	2300      	movs	r3, #0
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	2103      	movs	r1, #3
 800319c:	400a      	ands	r2, r1
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	4093      	lsls	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031a8:	4935      	ldr	r1, [pc, #212]	; (8003280 <HAL_GPIO_Init+0x2d4>)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3302      	adds	r3, #2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43da      	mvns	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	025b      	lsls	r3, r3, #9
 80031ce:	4013      	ands	r3, r2
 80031d0:	d003      	beq.n	80031da <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031da:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	029b      	lsls	r3, r3, #10
 80031f8:	4013      	ands	r3, r2
 80031fa:	d003      	beq.n	8003204 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003204:	4b22      	ldr	r3, [pc, #136]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43da      	mvns	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	035b      	lsls	r3, r3, #13
 8003222:	4013      	ands	r3, r2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800322e:	4b18      	ldr	r3, [pc, #96]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43da      	mvns	r2, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	039b      	lsls	r3, r3, #14
 800324c:	4013      	ands	r3, r2
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003258:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_GPIO_Init+0x2e4>)
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	40da      	lsrs	r2, r3
 800326c:	1e13      	subs	r3, r2, #0
 800326e:	d000      	beq.n	8003272 <HAL_GPIO_Init+0x2c6>
 8003270:	e6a8      	b.n	8002fc4 <HAL_GPIO_Init+0x18>
  } 
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b006      	add	sp, #24
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	40021000 	.word	0x40021000
 8003280:	40010000 	.word	0x40010000
 8003284:	48000400 	.word	0x48000400
 8003288:	48000800 	.word	0x48000800
 800328c:	48000c00 	.word	0x48000c00
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	0008      	movs	r0, r1
 800329e:	0011      	movs	r1, r2
 80032a0:	1cbb      	adds	r3, r7, #2
 80032a2:	1c02      	adds	r2, r0, #0
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	1c7b      	adds	r3, r7, #1
 80032a8:	1c0a      	adds	r2, r1, #0
 80032aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ac:	1c7b      	adds	r3, r7, #1
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032b4:	1cbb      	adds	r3, r7, #2
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032be:	1cbb      	adds	r3, r7, #2
 80032c0:	881a      	ldrh	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	000a      	movs	r2, r1
 80032d8:	1cbb      	adds	r3, r7, #2
 80032da:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	1cbb      	adds	r3, r7, #2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	405a      	eors	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	615a      	str	r2, [r3, #20]
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	0002      	movs	r2, r0
 80032fc:	1dbb      	adds	r3, r7, #6
 80032fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	1dba      	adds	r2, r7, #6
 8003306:	8812      	ldrh	r2, [r2, #0]
 8003308:	4013      	ands	r3, r2
 800330a:	d008      	beq.n	800331e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800330e:	1dba      	adds	r2, r7, #6
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003314:	1dbb      	adds	r3, r7, #6
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 f807 	bl	800332c <HAL_GPIO_EXTI_Callback>
  }
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	40010400 	.word	0x40010400

0800332c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	0002      	movs	r2, r0
 8003334:	1dbb      	adds	r3, r7, #6
 8003336:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	d100      	bne.n	8003358 <HAL_RCC_OscConfig+0x18>
 8003356:	e08d      	b.n	8003474 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003358:	4bc3      	ldr	r3, [pc, #780]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	220c      	movs	r2, #12
 800335e:	4013      	ands	r3, r2
 8003360:	2b04      	cmp	r3, #4
 8003362:	d00e      	beq.n	8003382 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003364:	4bc0      	ldr	r3, [pc, #768]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	220c      	movs	r2, #12
 800336a:	4013      	ands	r3, r2
 800336c:	2b08      	cmp	r3, #8
 800336e:	d116      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
 8003370:	4bbd      	ldr	r3, [pc, #756]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	025b      	lsls	r3, r3, #9
 8003378:	401a      	ands	r2, r3
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	025b      	lsls	r3, r3, #9
 800337e:	429a      	cmp	r2, r3
 8003380:	d10d      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003382:	4bb9      	ldr	r3, [pc, #740]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	029b      	lsls	r3, r3, #10
 800338a:	4013      	ands	r3, r2
 800338c:	d100      	bne.n	8003390 <HAL_RCC_OscConfig+0x50>
 800338e:	e070      	b.n	8003472 <HAL_RCC_OscConfig+0x132>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d000      	beq.n	800339a <HAL_RCC_OscConfig+0x5a>
 8003398:	e06b      	b.n	8003472 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e2b6      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_OscConfig+0x76>
 80033a6:	4bb0      	ldr	r3, [pc, #704]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4baf      	ldr	r3, [pc, #700]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	0249      	lsls	r1, r1, #9
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e02f      	b.n	8003416 <HAL_RCC_OscConfig+0xd6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4baa      	ldr	r3, [pc, #680]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4ba9      	ldr	r3, [pc, #676]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033c4:	49a9      	ldr	r1, [pc, #676]	; (800366c <HAL_RCC_OscConfig+0x32c>)
 80033c6:	400a      	ands	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	4ba7      	ldr	r3, [pc, #668]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4ba6      	ldr	r3, [pc, #664]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033d0:	49a7      	ldr	r1, [pc, #668]	; (8003670 <HAL_RCC_OscConfig+0x330>)
 80033d2:	400a      	ands	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e01e      	b.n	8003416 <HAL_RCC_OscConfig+0xd6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d10e      	bne.n	80033fe <HAL_RCC_OscConfig+0xbe>
 80033e0:	4ba1      	ldr	r3, [pc, #644]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4ba0      	ldr	r3, [pc, #640]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	02c9      	lsls	r1, r1, #11
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	4b9e      	ldr	r3, [pc, #632]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b9d      	ldr	r3, [pc, #628]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	0249      	lsls	r1, r1, #9
 80033f8:	430a      	orrs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e00b      	b.n	8003416 <HAL_RCC_OscConfig+0xd6>
 80033fe:	4b9a      	ldr	r3, [pc, #616]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b99      	ldr	r3, [pc, #612]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003404:	4999      	ldr	r1, [pc, #612]	; (800366c <HAL_RCC_OscConfig+0x32c>)
 8003406:	400a      	ands	r2, r1
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	4b97      	ldr	r3, [pc, #604]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b96      	ldr	r3, [pc, #600]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003410:	4997      	ldr	r1, [pc, #604]	; (8003670 <HAL_RCC_OscConfig+0x330>)
 8003412:	400a      	ands	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d014      	beq.n	8003448 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7ff fc7d 	bl	8002d1c <HAL_GetTick>
 8003422:	0003      	movs	r3, r0
 8003424:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003428:	f7ff fc78 	bl	8002d1c <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e268      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b8b      	ldr	r3, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	029b      	lsls	r3, r3, #10
 8003442:	4013      	ands	r3, r2
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0xe8>
 8003446:	e015      	b.n	8003474 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff fc68 	bl	8002d1c <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003452:	f7ff fc63 	bl	8002d1c <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b64      	cmp	r3, #100	; 0x64
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e253      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003464:	4b80      	ldr	r3, [pc, #512]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	029b      	lsls	r3, r3, #10
 800346c:	4013      	ands	r3, r2
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x112>
 8003470:	e000      	b.n	8003474 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003472:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d100      	bne.n	8003480 <HAL_RCC_OscConfig+0x140>
 800347e:	e069      	b.n	8003554 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003480:	4b79      	ldr	r3, [pc, #484]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	220c      	movs	r2, #12
 8003486:	4013      	ands	r3, r2
 8003488:	d00b      	beq.n	80034a2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800348a:	4b77      	ldr	r3, [pc, #476]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	220c      	movs	r2, #12
 8003490:	4013      	ands	r3, r2
 8003492:	2b08      	cmp	r3, #8
 8003494:	d11c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x190>
 8003496:	4b74      	ldr	r3, [pc, #464]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	025b      	lsls	r3, r3, #9
 800349e:	4013      	ands	r3, r2
 80034a0:	d116      	bne.n	80034d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	4b71      	ldr	r3, [pc, #452]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2202      	movs	r2, #2
 80034a8:	4013      	ands	r3, r2
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_OscConfig+0x178>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e229      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b6b      	ldr	r3, [pc, #428]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	22f8      	movs	r2, #248	; 0xf8
 80034be:	4393      	bics	r3, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	00da      	lsls	r2, r3, #3
 80034c8:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ce:	e041      	b.n	8003554 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d024      	beq.n	8003522 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d8:	4b63      	ldr	r3, [pc, #396]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b62      	ldr	r3, [pc, #392]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7ff fc1a 	bl	8002d1c <HAL_GetTick>
 80034e8:	0003      	movs	r3, r0
 80034ea:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ee:	f7ff fc15 	bl	8002d1c <HAL_GetTick>
 80034f2:	0002      	movs	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e205      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003500:	4b59      	ldr	r3, [pc, #356]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	d0f1      	beq.n	80034ee <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	22f8      	movs	r2, #248	; 0xf8
 8003510:	4393      	bics	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	00da      	lsls	r2, r3, #3
 800351a:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e018      	b.n	8003554 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b50      	ldr	r3, [pc, #320]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003528:	2101      	movs	r1, #1
 800352a:	438a      	bics	r2, r1
 800352c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7ff fbf5 	bl	8002d1c <HAL_GetTick>
 8003532:	0003      	movs	r3, r0
 8003534:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003538:	f7ff fbf0 	bl	8002d1c <HAL_GetTick>
 800353c:	0002      	movs	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1e0      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2202      	movs	r2, #2
 8003550:	4013      	ands	r3, r2
 8003552:	d1f1      	bne.n	8003538 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2208      	movs	r2, #8
 800355a:	4013      	ands	r3, r2
 800355c:	d036      	beq.n	80035cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b40      	ldr	r3, [pc, #256]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356a:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003572:	f7ff fbd3 	bl	8002d1c <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357c:	f7ff fbce 	bl	8002d1c <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e1be      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	4b36      	ldr	r3, [pc, #216]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d0f1      	beq.n	800357c <HAL_RCC_OscConfig+0x23c>
 8003598:	e018      	b.n	80035cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800359c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	438a      	bics	r2, r1
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7ff fbb9 	bl	8002d1c <HAL_GetTick>
 80035aa:	0003      	movs	r3, r0
 80035ac:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b0:	f7ff fbb4 	bl	8002d1c <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1a4      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d1f1      	bne.n	80035b0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2204      	movs	r2, #4
 80035d2:	4013      	ands	r3, r2
 80035d4:	d100      	bne.n	80035d8 <HAL_RCC_OscConfig+0x298>
 80035d6:	e0b5      	b.n	8003744 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d8:	2317      	movs	r3, #23
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	055b      	lsls	r3, r3, #21
 80035e8:	4013      	ands	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	0549      	lsls	r1, r1, #21
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	055b      	lsls	r3, r3, #21
 8003602:	4013      	ands	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003608:	2317      	movs	r3, #23
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_RCC_OscConfig+0x334>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4013      	ands	r3, r2
 800361a:	d11a      	bne.n	8003652 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCC_OscConfig+0x334>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <HAL_RCC_OscConfig+0x334>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0049      	lsls	r1, r1, #1
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7ff fb77 	bl	8002d1c <HAL_GetTick>
 800362e:	0003      	movs	r3, r0
 8003630:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7ff fb72 	bl	8002d1c <HAL_GetTick>
 8003638:	0002      	movs	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e162      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_OscConfig+0x334>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4013      	ands	r3, r2
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10e      	bne.n	8003678 <HAL_RCC_OscConfig+0x338>
 800365a:	4b03      	ldr	r3, [pc, #12]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	4b02      	ldr	r3, [pc, #8]	; (8003668 <HAL_RCC_OscConfig+0x328>)
 8003660:	2101      	movs	r1, #1
 8003662:	430a      	orrs	r2, r1
 8003664:	621a      	str	r2, [r3, #32]
 8003666:	e035      	b.n	80036d4 <HAL_RCC_OscConfig+0x394>
 8003668:	40021000 	.word	0x40021000
 800366c:	fffeffff 	.word	0xfffeffff
 8003670:	fffbffff 	.word	0xfffbffff
 8003674:	40007000 	.word	0x40007000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x35a>
 8003680:	4ba4      	ldr	r3, [pc, #656]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	4ba3      	ldr	r3, [pc, #652]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003686:	2101      	movs	r1, #1
 8003688:	438a      	bics	r2, r1
 800368a:	621a      	str	r2, [r3, #32]
 800368c:	4ba1      	ldr	r3, [pc, #644]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	4ba0      	ldr	r3, [pc, #640]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003692:	2104      	movs	r1, #4
 8003694:	438a      	bics	r2, r1
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	e01c      	b.n	80036d4 <HAL_RCC_OscConfig+0x394>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x37c>
 80036a2:	4b9c      	ldr	r3, [pc, #624]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	4b9b      	ldr	r3, [pc, #620]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036a8:	2104      	movs	r1, #4
 80036aa:	430a      	orrs	r2, r1
 80036ac:	621a      	str	r2, [r3, #32]
 80036ae:	4b99      	ldr	r3, [pc, #612]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	4b98      	ldr	r3, [pc, #608]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	430a      	orrs	r2, r1
 80036b8:	621a      	str	r2, [r3, #32]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0x394>
 80036bc:	4b95      	ldr	r3, [pc, #596]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	4b94      	ldr	r3, [pc, #592]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036c2:	2101      	movs	r1, #1
 80036c4:	438a      	bics	r2, r1
 80036c6:	621a      	str	r2, [r3, #32]
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	4b91      	ldr	r3, [pc, #580]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036ce:	2104      	movs	r1, #4
 80036d0:	438a      	bics	r2, r1
 80036d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d014      	beq.n	8003706 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7ff fb1e 	bl	8002d1c <HAL_GetTick>
 80036e0:	0003      	movs	r3, r0
 80036e2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	e009      	b.n	80036fa <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7ff fb19 	bl	8002d1c <HAL_GetTick>
 80036ea:	0002      	movs	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	4a89      	ldr	r2, [pc, #548]	; (8003918 <HAL_RCC_OscConfig+0x5d8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e108      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fa:	4b86      	ldr	r3, [pc, #536]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	2202      	movs	r2, #2
 8003700:	4013      	ands	r3, r2
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x3a6>
 8003704:	e013      	b.n	800372e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7ff fb09 	bl	8002d1c <HAL_GetTick>
 800370a:	0003      	movs	r3, r0
 800370c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370e:	e009      	b.n	8003724 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7ff fb04 	bl	8002d1c <HAL_GetTick>
 8003714:	0002      	movs	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	4a7f      	ldr	r2, [pc, #508]	; (8003918 <HAL_RCC_OscConfig+0x5d8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0f3      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	2202      	movs	r2, #2
 800372a:	4013      	ands	r3, r2
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800372e:	2317      	movs	r3, #23
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d105      	bne.n	8003744 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003738:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	4b75      	ldr	r3, [pc, #468]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800373e:	4977      	ldr	r1, [pc, #476]	; (800391c <HAL_RCC_OscConfig+0x5dc>)
 8003740:	400a      	ands	r2, r1
 8003742:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2210      	movs	r2, #16
 800374a:	4013      	ands	r3, r2
 800374c:	d063      	beq.n	8003816 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d12a      	bne.n	80037ac <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003756:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800375a:	4b6e      	ldr	r3, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800375c:	2104      	movs	r1, #4
 800375e:	430a      	orrs	r2, r1
 8003760:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003766:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003768:	2101      	movs	r1, #1
 800376a:	430a      	orrs	r2, r1
 800376c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376e:	f7ff fad5 	bl	8002d1c <HAL_GetTick>
 8003772:	0003      	movs	r3, r0
 8003774:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003778:	f7ff fad0 	bl	8002d1c <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0c0      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800378a:	4b62      	ldr	r3, [pc, #392]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800378c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d0f1      	beq.n	8003778 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003794:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	22f8      	movs	r2, #248	; 0xf8
 800379a:	4393      	bics	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	00da      	lsls	r2, r3, #3
 80037a4:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	635a      	str	r2, [r3, #52]	; 0x34
 80037aa:	e034      	b.n	8003816 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	3305      	adds	r3, #5
 80037b2:	d111      	bne.n	80037d8 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80037b4:	4b57      	ldr	r3, [pc, #348]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b8:	4b56      	ldr	r3, [pc, #344]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037ba:	2104      	movs	r1, #4
 80037bc:	438a      	bics	r2, r1
 80037be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80037c0:	4b54      	ldr	r3, [pc, #336]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c4:	22f8      	movs	r2, #248	; 0xf8
 80037c6:	4393      	bics	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	00da      	lsls	r2, r3, #3
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037d2:	430a      	orrs	r2, r1
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	e01e      	b.n	8003816 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037de:	2104      	movs	r1, #4
 80037e0:	430a      	orrs	r2, r1
 80037e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e8:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	438a      	bics	r2, r1
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f0:	f7ff fa94 	bl	8002d1c <HAL_GetTick>
 80037f4:	0003      	movs	r3, r0
 80037f6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037fa:	f7ff fa8f 	bl	8002d1c <HAL_GetTick>
 80037fe:	0002      	movs	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e07f      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800380c:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	2202      	movs	r2, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d1f1      	bne.n	80037fa <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d100      	bne.n	8003820 <HAL_RCC_OscConfig+0x4e0>
 800381e:	e074      	b.n	800390a <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	220c      	movs	r2, #12
 8003826:	4013      	ands	r3, r2
 8003828:	2b08      	cmp	r3, #8
 800382a:	d100      	bne.n	800382e <HAL_RCC_OscConfig+0x4ee>
 800382c:	e06b      	b.n	8003906 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d14c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800383c:	4938      	ldr	r1, [pc, #224]	; (8003920 <HAL_RCC_OscConfig+0x5e0>)
 800383e:	400a      	ands	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7ff fa6b 	bl	8002d1c <HAL_GetTick>
 8003846:	0003      	movs	r3, r0
 8003848:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7ff fa66 	bl	8002d1c <HAL_GetTick>
 8003850:	0002      	movs	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e056      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	049b      	lsls	r3, r3, #18
 8003866:	4013      	ands	r3, r2
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	220f      	movs	r2, #15
 8003870:	4393      	bics	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800387a:	430a      	orrs	r2, r1
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c
 800387e:	4b25      	ldr	r3, [pc, #148]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <HAL_RCC_OscConfig+0x5e4>)
 8003884:	4013      	ands	r3, r2
 8003886:	0019      	movs	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	431a      	orrs	r2, r3
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 8003894:	430a      	orrs	r2, r1
 8003896:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	0449      	lsls	r1, r1, #17
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7ff fa39 	bl	8002d1c <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7ff fa34 	bl	8002d1c <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e024      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	049b      	lsls	r3, r3, #18
 80038ca:	4013      	ands	r3, r2
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x570>
 80038ce:	e01c      	b.n	800390a <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80038d6:	4912      	ldr	r1, [pc, #72]	; (8003920 <HAL_RCC_OscConfig+0x5e0>)
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7ff fa1e 	bl	8002d1c <HAL_GetTick>
 80038e0:	0003      	movs	r3, r0
 80038e2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e6:	f7ff fa19 	bl	8002d1c <HAL_GetTick>
 80038ea:	0002      	movs	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e009      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_OscConfig+0x5d4>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	049b      	lsls	r3, r3, #18
 8003900:	4013      	ands	r3, r2
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x5a6>
 8003904:	e001      	b.n	800390a <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b006      	add	sp, #24
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	00001388 	.word	0x00001388
 800391c:	efffffff 	.word	0xefffffff
 8003920:	feffffff 	.word	0xfeffffff
 8003924:	ffc2ffff 	.word	0xffc2ffff

08003928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003936:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	4013      	ands	r3, r2
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d911      	bls.n	8003968 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003944:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4393      	bics	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	4b64      	ldr	r3, [pc, #400]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003956:	4b62      	ldr	r3, [pc, #392]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0b6      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2202      	movs	r2, #2
 800396e:	4013      	ands	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003972:	4b5c      	ldr	r3, [pc, #368]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	22f0      	movs	r2, #240	; 0xf0
 8003978:	4393      	bics	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	4b58      	ldr	r3, [pc, #352]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d100      	bne.n	8003992 <HAL_RCC_ClockConfig+0x6a>
 8003990:	e067      	b.n	8003a62 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b52      	ldr	r3, [pc, #328]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	029b      	lsls	r3, r3, #10
 80039a2:	4013      	ands	r3, r2
 80039a4:	d114      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e095      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b4c      	ldr	r3, [pc, #304]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	049b      	lsls	r3, r3, #18
 80039ba:	4013      	ands	r3, r2
 80039bc:	d108      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e089      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b48      	ldr	r3, [pc, #288]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2202      	movs	r2, #2
 80039c8:	4013      	ands	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e082      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d0:	4b44      	ldr	r3, [pc, #272]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2203      	movs	r2, #3
 80039d6:	4393      	bics	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7ff f99a 	bl	8002d1c <HAL_GetTick>
 80039e8:	0003      	movs	r3, r0
 80039ea:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d111      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f4:	e009      	b.n	8003a0a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f6:	f7ff f991 	bl	8002d1c <HAL_GetTick>
 80039fa:	0002      	movs	r2, r0
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	4a39      	ldr	r2, [pc, #228]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e065      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0a:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	220c      	movs	r2, #12
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d1ef      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xce>
 8003a16:	e024      	b.n	8003a62 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d11b      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a20:	e009      	b.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a22:	f7ff f97b 	bl	8002d1c <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	4a2e      	ldr	r2, [pc, #184]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a36:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d1ef      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xfa>
 8003a42:	e00e      	b.n	8003a62 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7ff f96a 	bl	8002d1c <HAL_GetTick>
 8003a48:	0002      	movs	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4a26      	ldr	r2, [pc, #152]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e03e      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a58:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	220c      	movs	r2, #12
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003a62:	4b1f      	ldr	r3, [pc, #124]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d211      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a70:	4b1b      	ldr	r3, [pc, #108]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2201      	movs	r2, #1
 8003a76:	4393      	bics	r3, r2
 8003a78:	0019      	movs	r1, r3
 8003a7a:	4b19      	ldr	r3, [pc, #100]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a82:	4b17      	ldr	r3, [pc, #92]	; (8003ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e020      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003ab2:	f000 f821 	bl	8003af8 <HAL_RCC_GetSysClockFreq>
 8003ab6:	0001      	movs	r1, r0
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	220f      	movs	r2, #15
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	5cd3      	ldrb	r3, [r2, r3]
 8003ac6:	000a      	movs	r2, r1
 8003ac8:	40da      	lsrs	r2, r3
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_RCC_ClockConfig+0x1cc>)
 8003acc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7ff f8fc 	bl	8002ccc <HAL_InitTick>
  
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b004      	add	sp, #16
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	40022000 	.word	0x40022000
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	00001388 	.word	0x00001388
 8003aec:	fffff8ff 	.word	0xfffff8ff
 8003af0:	08005d8c 	.word	0x08005d8c
 8003af4:	2000001c 	.word	0x2000001c

08003af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af8:	b590      	push	{r4, r7, lr}
 8003afa:	b08f      	sub	sp, #60	; 0x3c
 8003afc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003afe:	2314      	movs	r3, #20
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b06:	c313      	stmia	r3!, {r0, r1, r4}
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003b0c:	1d3b      	adds	r3, r7, #4
 8003b0e:	4a29      	ldr	r2, [pc, #164]	; (8003bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b12:	c313      	stmia	r3!, {r0, r1, r4}
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b20:	2300      	movs	r3, #0
 8003b22:	637b      	str	r3, [r7, #52]	; 0x34
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003b2c:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	220c      	movs	r2, #12
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d002      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x4a>
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCC_GetSysClockFreq+0x50>
 8003b40:	e02d      	b.n	8003b9e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b46:	e02d      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2214      	movs	r2, #20
 8003b52:	18ba      	adds	r2, r7, r2
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	4013      	ands	r3, r2
 8003b60:	1d3a      	adds	r2, r7, #4
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	025b      	lsls	r3, r3, #9
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b72:	4812      	ldr	r0, [pc, #72]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b74:	f7fc fac8 	bl	8000108 <__udivsi3>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	4353      	muls	r3, r2
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
 8003b82:	e009      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8003b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b86:	000a      	movs	r2, r1
 8003b88:	0152      	lsls	r2, r2, #5
 8003b8a:	1a52      	subs	r2, r2, r1
 8003b8c:	0193      	lsls	r3, r2, #6
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	185b      	adds	r3, r3, r1
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ba2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b00f      	add	sp, #60	; 0x3c
 8003bac:	bd90      	pop	{r4, r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	08005c28 	.word	0x08005c28
 8003bb4:	08005c38 	.word	0x08005c38
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	007a1200 	.word	0x007a1200

08003bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc4:	4b02      	ldr	r3, [pc, #8]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	2000001c 	.word	0x2000001c

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e08a      	b.n	8003cfc <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	225d      	movs	r2, #93	; 0x5d
 8003bf0:	5c9b      	ldrb	r3, [r3, r2]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	225c      	movs	r2, #92	; 0x5c
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	0018      	movs	r0, r3
 8003c04:	f001 fdae 	bl	8005764 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	225d      	movs	r2, #93	; 0x5d
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2140      	movs	r1, #64	; 0x40
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	23e0      	movs	r3, #224	; 0xe0
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d902      	bls.n	8003c32 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e002      	b.n	8003c38 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	015b      	lsls	r3, r3, #5
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	23f0      	movs	r3, #240	; 0xf0
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d008      	beq.n	8003c56 <HAL_SPI_Init+0x82>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	23e0      	movs	r3, #224	; 0xe0
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d002      	beq.n	8003c56 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	23e0      	movs	r3, #224	; 0xe0
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d903      	bls.n	8003c72 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c70:	e002      	b.n	8003c78 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6999      	ldr	r1, [r3, #24]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	400b      	ands	r3, r1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	2204      	movs	r2, #4
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4907      	ldr	r1, [pc, #28]	; (8003d04 <HAL_SPI_Init+0x130>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	225d      	movs	r2, #93	; 0x5d
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b004      	add	sp, #16
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	fffff7ff 	.word	0xfffff7ff

08003d08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d1c:	231f      	movs	r3, #31
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	225c      	movs	r2, #92	; 0x5c
 8003d28:	5c9b      	ldrb	r3, [r3, r2]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_SPI_Transmit+0x2a>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e14f      	b.n	8003fd2 <HAL_SPI_Transmit+0x2ca>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	225c      	movs	r2, #92	; 0x5c
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3a:	f7fe ffef 	bl	8002d1c <HAL_GetTick>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	225d      	movs	r2, #93	; 0x5d
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d004      	beq.n	8003d58 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8003d4e:	231f      	movs	r3, #31
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	2202      	movs	r2, #2
 8003d54:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d56:	e131      	b.n	8003fbc <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_SPI_Transmit+0x5e>
 8003d5e:	1dbb      	adds	r3, r7, #6
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d104      	bne.n	8003d70 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8003d66:	231f      	movs	r3, #31
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d6e:	e125      	b.n	8003fbc <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	225d      	movs	r2, #93	; 0x5d
 8003d74:	2103      	movs	r1, #3
 8003d76:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1dba      	adds	r2, r7, #6
 8003d88:	8812      	ldrh	r2, [r2, #0]
 8003d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1dba      	adds	r2, r7, #6
 8003d90:	8812      	ldrh	r2, [r2, #0]
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2244      	movs	r2, #68	; 0x44
 8003d9e:	2100      	movs	r1, #0
 8003da0:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2246      	movs	r2, #70	; 0x46
 8003da6:	2100      	movs	r1, #0
 8003da8:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d108      	bne.n	8003dd4 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	01c9      	lsls	r1, r1, #7
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d007      	beq.n	8003df2 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	23e0      	movs	r3, #224	; 0xe0
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d948      	bls.n	8003e90 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <HAL_SPI_Transmit+0x108>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d139      	bne.n	8003e84 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	881a      	ldrh	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e2e:	e029      	b.n	8003e84 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d10f      	bne.n	8003e5e <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	881a      	ldrh	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3302      	adds	r3, #2
 8003e4c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e5c:	e012      	b.n	8003e84 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_SPI_Transmit+0x172>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	3301      	adds	r3, #1
 8003e68:	d00c      	beq.n	8003e84 <HAL_SPI_Transmit+0x17c>
 8003e6a:	f7fe ff57 	bl	8002d1c <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d804      	bhi.n	8003e84 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e7a:	231f      	movs	r3, #31
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	2203      	movs	r2, #3
 8003e80:	701a      	strb	r2, [r3, #0]
          goto error;
 8003e82:	e09b      	b.n	8003fbc <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1d0      	bne.n	8003e30 <HAL_SPI_Transmit+0x128>
 8003e8e:	e071      	b.n	8003f74 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <HAL_SPI_Transmit+0x19a>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d163      	bne.n	8003f6a <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d90f      	bls.n	8003ecc <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b02      	subs	r3, #2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eca:	e04e      	b.n	8003f6a <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	60ba      	str	r2, [r7, #8]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	320c      	adds	r2, #12
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003eea:	e03e      	b.n	8003f6a <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d124      	bne.n	8003f44 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d90f      	bls.n	8003f24 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	881a      	ldrh	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3302      	adds	r3, #2
 8003f12:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b02      	subs	r3, #2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f22:	e022      	b.n	8003f6a <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	60ba      	str	r2, [r7, #8]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	6812      	ldr	r2, [r2, #0]
 8003f2e:	320c      	adds	r2, #12
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f42:	e012      	b.n	8003f6a <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_SPI_Transmit+0x258>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	d00c      	beq.n	8003f6a <HAL_SPI_Transmit+0x262>
 8003f50:	f7fe fee4 	bl	8002d1c <HAL_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d804      	bhi.n	8003f6a <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8003f60:	231f      	movs	r3, #31
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	2203      	movs	r2, #3
 8003f66:	701a      	strb	r2, [r3, #0]
          goto error;
 8003f68:	e028      	b.n	8003fbc <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1bb      	bne.n	8003eec <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	6839      	ldr	r1, [r7, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 fdb6 	bl	8004aec <SPI_EndRxTxTransaction>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8003fb0:	231f      	movs	r3, #31
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e000      	b.n	8003fbc <HAL_SPI_Transmit+0x2b4>
  }

error:
 8003fba:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	225d      	movs	r2, #93	; 0x5d
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	225c      	movs	r2, #92	; 0x5c
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003fcc:	231f      	movs	r3, #31
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b008      	add	sp, #32
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b089      	sub	sp, #36	; 0x24
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	1dbb      	adds	r3, r7, #6
 8003fea:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ff0:	2317      	movs	r3, #23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	2382      	movs	r3, #130	; 0x82
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	429a      	cmp	r2, r3
 8004002:	d113      	bne.n	800402c <HAL_SPI_Receive+0x50>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10f      	bne.n	800402c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	225d      	movs	r2, #93	; 0x5d
 8004010:	2104      	movs	r1, #4
 8004012:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004014:	1dbb      	adds	r3, r7, #6
 8004016:	881c      	ldrh	r4, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	0023      	movs	r3, r4
 8004024:	f000 f918 	bl	8004258 <HAL_SPI_TransmitReceive>
 8004028:	0003      	movs	r3, r0
 800402a:	e10c      	b.n	8004246 <HAL_SPI_Receive+0x26a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	225c      	movs	r2, #92	; 0x5c
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_SPI_Receive+0x5e>
 8004036:	2302      	movs	r3, #2
 8004038:	e105      	b.n	8004246 <HAL_SPI_Receive+0x26a>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	225c      	movs	r2, #92	; 0x5c
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004042:	f7fe fe6b 	bl	8002d1c <HAL_GetTick>
 8004046:	0003      	movs	r3, r0
 8004048:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	225d      	movs	r2, #93	; 0x5d
 800404e:	5c9b      	ldrb	r3, [r3, r2]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d004      	beq.n	8004060 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8004056:	2317      	movs	r3, #23
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2202      	movs	r2, #2
 800405c:	701a      	strb	r2, [r3, #0]
    goto error;
 800405e:	e0e7      	b.n	8004230 <HAL_SPI_Receive+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_SPI_Receive+0x92>
 8004066:	1dbb      	adds	r3, r7, #6
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 800406e:	2317      	movs	r3, #23
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
    goto error;
 8004076:	e0db      	b.n	8004230 <HAL_SPI_Receive+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	225d      	movs	r2, #93	; 0x5d
 800407c:	2104      	movs	r1, #4
 800407e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	1dba      	adds	r2, r7, #6
 8004090:	2144      	movs	r1, #68	; 0x44
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1dba      	adds	r2, r7, #6
 800409a:	2146      	movs	r1, #70	; 0x46
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	23e0      	movs	r3, #224	; 0xe0
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d908      	bls.n	80040dc <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	495e      	ldr	r1, [pc, #376]	; (8004250 <HAL_SPI_Receive+0x274>)
 80040d6:	400a      	ands	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	e008      	b.n	80040ee <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	0149      	lsls	r1, r1, #5
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	689a      	ldr	r2, [r3, #8]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d107      	bne.n	800410a <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4953      	ldr	r1, [pc, #332]	; (8004254 <HAL_SPI_Receive+0x278>)
 8004106:	400a      	ands	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2240      	movs	r2, #64	; 0x40
 8004112:	4013      	ands	r3, r2
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d007      	beq.n	8004128 <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2140      	movs	r1, #64	; 0x40
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	23e0      	movs	r3, #224	; 0xe0
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	429a      	cmp	r2, r3
 8004132:	d862      	bhi.n	80041fa <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004134:	e02d      	b.n	8004192 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	2b01      	cmp	r3, #1
 8004142:	d113      	bne.n	800416c <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3301      	adds	r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2246      	movs	r2, #70	; 0x46
 800415c:	5a9b      	ldrh	r3, [r3, r2]
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b299      	uxth	r1, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2246      	movs	r2, #70	; 0x46
 8004168:	5299      	strh	r1, [r3, r2]
 800416a:	e012      	b.n	8004192 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_SPI_Receive+0x1ac>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	d00c      	beq.n	8004192 <HAL_SPI_Receive+0x1b6>
 8004178:	f7fe fdd0 	bl	8002d1c <HAL_GetTick>
 800417c:	0002      	movs	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d804      	bhi.n	8004192 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8004188:	2317      	movs	r3, #23
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2203      	movs	r2, #3
 800418e:	701a      	strb	r2, [r3, #0]
          goto error;
 8004190:	e04e      	b.n	8004230 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2246      	movs	r2, #70	; 0x46
 8004196:	5a9b      	ldrh	r3, [r3, r2]
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1cb      	bne.n	8004136 <HAL_SPI_Receive+0x15a>
 800419e:	e032      	b.n	8004206 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2201      	movs	r2, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d112      	bne.n	80041d4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3302      	adds	r3, #2
 80041be:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2246      	movs	r2, #70	; 0x46
 80041c4:	5a9b      	ldrh	r3, [r3, r2]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b299      	uxth	r1, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2246      	movs	r2, #70	; 0x46
 80041d0:	5299      	strh	r1, [r3, r2]
 80041d2:	e012      	b.n	80041fa <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_SPI_Receive+0x214>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	3301      	adds	r3, #1
 80041de:	d00c      	beq.n	80041fa <HAL_SPI_Receive+0x21e>
 80041e0:	f7fe fd9c 	bl	8002d1c <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d804      	bhi.n	80041fa <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 80041f0:	2317      	movs	r3, #23
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2203      	movs	r2, #3
 80041f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80041f8:	e01a      	b.n	8004230 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2246      	movs	r2, #70	; 0x46
 80041fe:	5a9b      	ldrh	r3, [r3, r2]
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1cc      	bne.n	80041a0 <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	6839      	ldr	r1, [r7, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	0018      	movs	r0, r3
 800420e:	f000 fc0f 	bl	8004a30 <SPI_EndRxTransaction>
 8004212:	1e03      	subs	r3, r0, #0
 8004214:	d002      	beq.n	800421c <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_SPI_Receive+0x252>
  {
    errorcode = HAL_ERROR;
 8004224:	2317      	movs	r3, #23
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e000      	b.n	8004230 <HAL_SPI_Receive+0x254>
  }

error :
 800422e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	225d      	movs	r2, #93	; 0x5d
 8004234:	2101      	movs	r1, #1
 8004236:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	225c      	movs	r2, #92	; 0x5c
 800423c:	2100      	movs	r1, #0
 800423e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004240:	2317      	movs	r3, #23
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	781b      	ldrb	r3, [r3, #0]
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b007      	add	sp, #28
 800424c:	bd90      	pop	{r4, r7, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	ffffefff 	.word	0xffffefff
 8004254:	ffffbfff 	.word	0xffffbfff

08004258 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	001a      	movs	r2, r3
 8004266:	1cbb      	adds	r3, r7, #2
 8004268:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8004276:	2301      	movs	r3, #1
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427a:	2323      	movs	r3, #35	; 0x23
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	225c      	movs	r2, #92	; 0x5c
 8004286:	5c9b      	ldrb	r3, [r3, r2]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_SPI_TransmitReceive+0x38>
 800428c:	2302      	movs	r3, #2
 800428e:	e1f2      	b.n	8004676 <HAL_SPI_TransmitReceive+0x41e>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	225c      	movs	r2, #92	; 0x5c
 8004294:	2101      	movs	r1, #1
 8004296:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004298:	f7fe fd40 	bl	8002d1c <HAL_GetTick>
 800429c:	0003      	movs	r3, r0
 800429e:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	225d      	movs	r2, #93	; 0x5d
 80042a4:	5c9b      	ldrb	r3, [r3, r2]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d010      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x80>
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	2382      	movs	r3, #130	; 0x82
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	429a      	cmp	r2, r3
 80042be:	d106      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x76>
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d004      	beq.n	80042d8 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80042ce:	2323      	movs	r3, #35	; 0x23
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80042d6:	e1c3      	b.n	8004660 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x94>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x94>
 80042e4:	1cbb      	adds	r3, r7, #2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 80042ec:	2323      	movs	r3, #35	; 0x23
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80042f4:	e1b4      	b.n	8004660 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	225d      	movs	r2, #93	; 0x5d
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d003      	beq.n	800430a <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	225d      	movs	r2, #93	; 0x5d
 8004306:	2105      	movs	r1, #5
 8004308:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1cba      	adds	r2, r7, #2
 800431a:	2146      	movs	r1, #70	; 0x46
 800431c:	8812      	ldrh	r2, [r2, #0]
 800431e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1cba      	adds	r2, r7, #2
 8004324:	2144      	movs	r1, #68	; 0x44
 8004326:	8812      	ldrh	r2, [r2, #0]
 8004328:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1cba      	adds	r2, r7, #2
 8004334:	8812      	ldrh	r2, [r2, #0]
 8004336:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1cba      	adds	r2, r7, #2
 800433c:	8812      	ldrh	r2, [r2, #0]
 800433e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	23e0      	movs	r3, #224	; 0xe0
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	429a      	cmp	r2, r3
 8004356:	d805      	bhi.n	8004364 <HAL_SPI_TransmitReceive+0x10c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2246      	movs	r2, #70	; 0x46
 800435c:	5a9b      	ldrh	r3, [r3, r2]
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d908      	bls.n	8004376 <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	49c4      	ldr	r1, [pc, #784]	; (8004680 <HAL_SPI_TransmitReceive+0x428>)
 8004370:	400a      	ands	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
 8004374:	e008      	b.n	8004388 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2180      	movs	r1, #128	; 0x80
 8004382:	0149      	lsls	r1, r1, #5
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2240      	movs	r2, #64	; 0x40
 8004390:	4013      	ands	r3, r2
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d007      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	23e0      	movs	r3, #224	; 0xe0
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d800      	bhi.n	80043b4 <HAL_SPI_TransmitReceive+0x15c>
 80043b2:	e075      	b.n	80044a0 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <HAL_SPI_TransmitReceive+0x16e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d160      	bne.n	8004488 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	881a      	ldrh	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	3302      	adds	r3, #2
 80043d4:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043e4:	e050      	b.n	8004488 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01c      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x1ce>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x1ce>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d110      	bne.n	8004426 <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3302      	adds	r3, #2
 8004412:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2246      	movs	r2, #70	; 0x46
 800442a:	5a9b      	ldrh	r3, [r3, r2]
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01a      	beq.n	8004468 <HAL_SPI_TransmitReceive+0x210>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2201      	movs	r2, #1
 800443a:	4013      	ands	r3, r2
 800443c:	2b01      	cmp	r3, #1
 800443e:	d113      	bne.n	8004468 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3302      	adds	r3, #2
 8004450:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2246      	movs	r2, #70	; 0x46
 8004456:	5a9b      	ldrh	r3, [r3, r2]
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b299      	uxth	r1, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2246      	movs	r2, #70	; 0x46
 8004462:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004464:	2301      	movs	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	3301      	adds	r3, #1
 800446c:	d00c      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x230>
 800446e:	f7fe fc55 	bl	8002d1c <HAL_GetTick>
 8004472:	0002      	movs	r2, r0
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447a:	429a      	cmp	r2, r3
 800447c:	d804      	bhi.n	8004488 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 800447e:	2323      	movs	r3, #35	; 0x23
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2203      	movs	r2, #3
 8004484:	701a      	strb	r2, [r3, #0]
        goto error;
 8004486:	e0eb      	b.n	8004660 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1a9      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x18e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2246      	movs	r2, #70	; 0x46
 8004496:	5a9b      	ldrh	r3, [r3, r2]
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1a3      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x18e>
 800449e:	e0ca      	b.n	8004636 <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x25c>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d000      	beq.n	80044b4 <HAL_SPI_TransmitReceive+0x25c>
 80044b2:	e0b3      	b.n	800461c <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d90f      	bls.n	80044de <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3302      	adds	r3, #2
 80044cc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b02      	subs	r3, #2
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044dc:	e09e      	b.n	800461c <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	60ba      	str	r2, [r7, #8]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	320c      	adds	r2, #12
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044fc:	e08e      	b.n	800461c <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	2b00      	cmp	r3, #0
 8004502:	d031      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x310>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02c      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x310>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2202      	movs	r2, #2
 8004516:	4013      	ands	r3, r2
 8004518:	2b02      	cmp	r3, #2
 800451a:	d125      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	d90f      	bls.n	8004546 <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	3302      	adds	r3, #2
 8004534:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b02      	subs	r3, #2
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004544:	e00e      	b.n	8004564 <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	60ba      	str	r2, [r7, #8]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	320c      	adds	r2, #12
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2246      	movs	r2, #70	; 0x46
 800456c:	5a9b      	ldrh	r3, [r3, r2]
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d043      	beq.n	80045fc <HAL_SPI_TransmitReceive+0x3a4>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2201      	movs	r2, #1
 800457c:	4013      	ands	r3, r2
 800457e:	2b01      	cmp	r3, #1
 8004580:	d13c      	bne.n	80045fc <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2246      	movs	r2, #70	; 0x46
 8004586:	5a9b      	ldrh	r3, [r3, r2]
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d921      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	3302      	adds	r3, #2
 800459e:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2246      	movs	r2, #70	; 0x46
 80045a4:	5a9b      	ldrh	r3, [r3, r2]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b02      	subs	r3, #2
 80045aa:	b299      	uxth	r1, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2246      	movs	r2, #70	; 0x46
 80045b0:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2246      	movs	r2, #70	; 0x46
 80045b6:	5a9b      	ldrh	r3, [r3, r2]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d81c      	bhi.n	80045f8 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0149      	lsls	r1, r1, #5
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e012      	b.n	80045f8 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	001a      	movs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1c59      	adds	r1, r3, #1
 80045de:	6079      	str	r1, [r7, #4]
 80045e0:	7812      	ldrb	r2, [r2, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2246      	movs	r2, #70	; 0x46
 80045ea:	5a9b      	ldrh	r3, [r3, r2]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b299      	uxth	r1, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2246      	movs	r2, #70	; 0x46
 80045f6:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045f8:	2301      	movs	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	3301      	adds	r3, #1
 8004600:	d00c      	beq.n	800461c <HAL_SPI_TransmitReceive+0x3c4>
 8004602:	f7fe fb8b 	bl	8002d1c <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460e:	429a      	cmp	r2, r3
 8004610:	d804      	bhi.n	800461c <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 8004612:	2323      	movs	r3, #35	; 0x23
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	2203      	movs	r2, #3
 8004618:	701a      	strb	r2, [r3, #0]
        goto error;
 800461a:	e021      	b.n	8004660 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d000      	beq.n	8004628 <HAL_SPI_TransmitReceive+0x3d0>
 8004626:	e76a      	b.n	80044fe <HAL_SPI_TransmitReceive+0x2a6>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2246      	movs	r2, #70	; 0x46
 800462c:	5a9b      	ldrh	r3, [r3, r2]
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d000      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x3de>
 8004634:	e763      	b.n	80044fe <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	0018      	movs	r0, r3
 800463e:	f000 fa55 	bl	8004aec <SPI_EndRxTxTransaction>
 8004642:	1e03      	subs	r3, r0, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8004654:	2323      	movs	r3, #35	; 0x23
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e000      	b.n	8004660 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 800465e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	225d      	movs	r2, #93	; 0x5d
 8004664:	2101      	movs	r1, #1
 8004666:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	225c      	movs	r2, #92	; 0x5c
 800466c:	2100      	movs	r1, #0
 800466e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004670:	2323      	movs	r3, #35	; 0x23
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	781b      	ldrb	r3, [r3, #0]
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b00a      	add	sp, #40	; 0x28
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	ffffefff 	.word	0xffffefff

08004684 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	4013      	ands	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	2201      	movs	r2, #1
 80046a8:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 80046aa:	d009      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	4013      	ands	r3, r2
 80046b2:	d005      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	0010      	movs	r0, r2
 80046bc:	4798      	blx	r3
    return;
 80046be:	e0ac      	b.n	800481a <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2202      	movs	r2, #2
 80046c4:	4013      	ands	r3, r2
 80046c6:	d009      	beq.n	80046dc <HAL_SPI_IRQHandler+0x58>
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	4013      	ands	r3, r2
 80046ce:	d005      	beq.n	80046dc <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	0010      	movs	r0, r2
 80046d8:	4798      	blx	r3
    return;
 80046da:	e09e      	b.n	800481a <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	23b0      	movs	r3, #176	; 0xb0
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4013      	ands	r3, r2
 80046e4:	d100      	bne.n	80046e8 <HAL_SPI_IRQHandler+0x64>
 80046e6:	e098      	b.n	800481a <HAL_SPI_IRQHandler+0x196>
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2220      	movs	r2, #32
 80046ec:	4013      	ands	r3, r2
 80046ee:	d100      	bne.n	80046f2 <HAL_SPI_IRQHandler+0x6e>
 80046f0:	e093      	b.n	800481a <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	4013      	ands	r3, r2
 80046f8:	d023      	beq.n	8004742 <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	225d      	movs	r2, #93	; 0x5d
 80046fe:	5c9b      	ldrb	r3, [r3, r2]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b03      	cmp	r3, #3
 8004704:	d011      	beq.n	800472a <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470a:	2204      	movs	r2, #4
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	e00b      	b.n	8004742 <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
        return;
 8004740:	e06b      	b.n	800481a <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2220      	movs	r2, #32
 8004746:	4013      	ands	r3, r2
 8004748:	d014      	beq.n	8004774 <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474e:	2201      	movs	r2, #1
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	438a      	bics	r2, r1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4013      	ands	r3, r2
 800477c:	d00c      	beq.n	8004798 <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	2208      	movs	r2, #8
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479c:	2b00      	cmp	r3, #0
 800479e:	d03b      	beq.n	8004818 <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	21e0      	movs	r1, #224	; 0xe0
 80047ac:	438a      	bics	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	225d      	movs	r2, #93	; 0x5d
 80047b4:	2101      	movs	r1, #1
 80047b6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	2202      	movs	r2, #2
 80047bc:	4013      	ands	r3, r2
 80047be:	d103      	bne.n	80047c8 <HAL_SPI_IRQHandler+0x144>
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2201      	movs	r2, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2103      	movs	r1, #3
 80047d4:	438a      	bics	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_SPI_IRQHandler+0x19c>)
 80047e6:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fe fb97 	bl	8002f20 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_SPI_IRQHandler+0x192>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	4a08      	ldr	r2, [pc, #32]	; (8004820 <HAL_SPI_IRQHandler+0x19c>)
 8004800:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	0018      	movs	r0, r3
 8004808:	f7fe fb8a 	bl	8002f20 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800480c:	e003      	b.n	8004816 <HAL_SPI_IRQHandler+0x192>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f807 	bl	8004824 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46c0      	nop			; (mov r8, r8)
  }
}
 800481a:	46bd      	mov	sp, r7
 800481c:	b008      	add	sp, #32
 800481e:	bd80      	pop	{r7, pc}
 8004820:	08004835 	.word	0x08004835

08004824 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}

08004834 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2246      	movs	r2, #70	; 0x46
 8004846:	2100      	movs	r1, #0
 8004848:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	0018      	movs	r0, r3
 8004854:	f7ff ffe6 	bl	8004824 <HAL_SPI_ErrorCallback>
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b004      	add	sp, #16
 800485e:	bd80      	pop	{r7, pc}

08004860 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800486e:	e050      	b.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	d04d      	beq.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <SPI_WaitFlagStateUntilTimeout+0x2c>
 800487c:	f7fe fa4e 	bl	8002d1c <HAL_GetTick>
 8004880:	0002      	movs	r2, r0
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d842      	bhi.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	21e0      	movs	r1, #224	; 0xe0
 8004898:	438a      	bics	r2, r1
 800489a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	2382      	movs	r3, #130	; 0x82
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d113      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x70>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d005      	beq.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689a      	ldr	r2, [r3, #8]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2140      	movs	r1, #64	; 0x40
 80048cc:	438a      	bics	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	019b      	lsls	r3, r3, #6
 80048d8:	429a      	cmp	r2, r3
 80048da:	d110      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4914      	ldr	r1, [pc, #80]	; (8004938 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2180      	movs	r1, #128	; 0x80
 80048f8:	0189      	lsls	r1, r1, #6
 80048fa:	430a      	orrs	r2, r1
 80048fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	225d      	movs	r2, #93	; 0x5d
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	225c      	movs	r2, #92	; 0x5c
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e00e      	b.n	8004930 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	4013      	ands	r3, r2
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	429a      	cmp	r2, r3
 8004920:	d101      	bne.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8004926:	2300      	movs	r3, #0
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4293      	cmp	r3, r2
 800492c:	d1a0      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b004      	add	sp, #16
 8004936:	bd80      	pop	{r7, pc}
 8004938:	ffffdfff 	.word	0xffffdfff

0800493c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800494a:	e062      	b.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	23c0      	movs	r3, #192	; 0xc0
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	429a      	cmp	r2, r3
 8004954:	d10c      	bne.n	8004970 <SPI_WaitFifoStateUntilTimeout+0x34>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	2117      	movs	r1, #23
 8004968:	187b      	adds	r3, r7, r1
 800496a:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800496c:	187b      	adds	r3, r7, r1
 800496e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	3301      	adds	r3, #1
 8004974:	d04d      	beq.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <SPI_WaitFifoStateUntilTimeout+0x50>
 800497c:	f7fe f9ce 	bl	8002d1c <HAL_GetTick>
 8004980:	0002      	movs	r2, r0
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d842      	bhi.n	8004a12 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	21e0      	movs	r1, #224	; 0xe0
 8004998:	438a      	bics	r2, r1
 800499a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2382      	movs	r3, #130	; 0x82
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d113      	bne.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0x94>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	429a      	cmp	r2, r3
 80049be:	d107      	bne.n	80049d0 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2140      	movs	r1, #64	; 0x40
 80049cc:	438a      	bics	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	019b      	lsls	r3, r3, #6
 80049d8:	429a      	cmp	r2, r3
 80049da:	d110      	bne.n	80049fe <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4911      	ldr	r1, [pc, #68]	; (8004a2c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2180      	movs	r1, #128	; 0x80
 80049f8:	0189      	lsls	r1, r1, #6
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	225d      	movs	r2, #93	; 0x5d
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	225c      	movs	r2, #92	; 0x5c
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e008      	b.n	8004a24 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d194      	bne.n	800494c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b006      	add	sp, #24
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	ffffdfff 	.word	0xffffdfff

08004a30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	2382      	movs	r3, #130	; 0x82
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d113      	bne.n	8004a70 <SPI_EndRxTransaction+0x40>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d005      	beq.n	8004a60 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d107      	bne.n	8004a70 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	438a      	bics	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	0013      	movs	r3, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	f7ff feef 	bl	8004860 <SPI_WaitFlagStateUntilTimeout>
 8004a82:	1e03      	subs	r3, r0, #0
 8004a84:	d007      	beq.n	8004a96 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e026      	b.n	8004ae4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	2382      	movs	r3, #130	; 0x82
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d11f      	bne.n	8004ae2 <SPI_EndRxTransaction+0xb2>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d005      	beq.n	8004aba <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d113      	bne.n	8004ae2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	23c0      	movs	r3, #192	; 0xc0
 8004abe:	00d9      	lsls	r1, r3, #3
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	0013      	movs	r3, r2
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f7ff ff37 	bl	800493c <SPI_WaitFifoStateUntilTimeout>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d007      	beq.n	8004ae2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e000      	b.n	8004ae4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b004      	add	sp, #16
 8004aea:	bd80      	pop	{r7, pc}

08004aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	23c0      	movs	r3, #192	; 0xc0
 8004afc:	0159      	lsls	r1, r3, #5
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	0013      	movs	r3, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	f7ff ff18 	bl	800493c <SPI_WaitFifoStateUntilTimeout>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d007      	beq.n	8004b20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b14:	2220      	movs	r2, #32
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e027      	b.n	8004b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	0013      	movs	r3, r2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	f7ff fe97 	bl	8004860 <SPI_WaitFlagStateUntilTimeout>
 8004b32:	1e03      	subs	r3, r0, #0
 8004b34:	d007      	beq.n	8004b46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e014      	b.n	8004b70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	23c0      	movs	r3, #192	; 0xc0
 8004b4a:	00d9      	lsls	r1, r3, #3
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	0013      	movs	r3, r2
 8004b54:	2200      	movs	r2, #0
 8004b56:	f7ff fef1 	bl	800493c <SPI_WaitFifoStateUntilTimeout>
 8004b5a:	1e03      	subs	r3, r0, #0
 8004b5c:	d007      	beq.n	8004b6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	2220      	movs	r2, #32
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e000      	b.n	8004b70 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <ADC_DRDY_InputHandler>:

/* Diese Funktion wird bei einem DRDY Interrupt automatisch ausgeführt
 * Daten sind bereit und können ausgelesen werden.
 */
void ADC_DRDY_InputHandler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	// HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	 ADCmeasuremenReady=1;
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <ADC_DRDY_InputHandler+0x10>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200000d6 	.word	0x200000d6

08004b8c <ADCinit>:


uint32_t ADCinit(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
	HAL_Delay(3);												// minimum delay of 2.2 ms to allow power supplies to settle and power-up reset to complete
 8004b90:	2003      	movs	r0, #3
 8004b92:	f7fe f8cd 	bl	8002d30 <HAL_Delay>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port,ADC_RESET_Pin,1); 	// Set reset
 8004b96:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <ADCinit+0xb0>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2120      	movs	r1, #32
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7fe fb79 	bl	8003294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);			//
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <ADCinit+0xb4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fe fb73 	bl	8003294 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_START_GPIO_Port, ADC_START_Pin,0);	// Start by command (Start pin LOW)
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <ADCinit+0xb0>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2110      	movs	r1, #16
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fe fb6d 	bl	8003294 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004bba:	200a      	movs	r0, #10
 8004bbc:	f7fe f8b8 	bl	8002d30 <HAL_Delay>

	while(ADCregread(STATUS_REG_ADDR) & ADS_RDY)				// Ready bit überprüfen  //todo ist bisschen hart wenn immer in dieser while
 8004bc0:	e002      	b.n	8004bc8 <ADCinit+0x3c>
	{
		HAL_Delay(5);
 8004bc2:	2005      	movs	r0, #5
 8004bc4:	f7fe f8b4 	bl	8002d30 <HAL_Delay>
	while(ADCregread(STATUS_REG_ADDR) & ADS_RDY)				// Ready bit überprüfen  //todo ist bisschen hart wenn immer in dieser while
 8004bc8:	2001      	movs	r0, #1
 8004bca:	f000 f856 	bl	8004c7a <ADCregread>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d1f4      	bne.n	8004bc2 <ADCinit+0x36>
	}
	ADCregwrite(STATUS_REG_ADDR, ADCregread(STATUS_REG_ADDR)&~ADS_FL_POR); // Clear FL POR Flag (Redback,...)
 8004bd8:	2001      	movs	r0, #1
 8004bda:	f000 f84e 	bl	8004c7a <ADCregread>
 8004bde:	0003      	movs	r3, r0
 8004be0:	001a      	movs	r2, r3
 8004be2:	237f      	movs	r3, #127	; 0x7f
 8004be4:	4013      	ands	r3, r2
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	0019      	movs	r1, r3
 8004bea:	2001      	movs	r0, #1
 8004bec:	f000 f82c 	bl	8004c48 <ADCregwrite>


	ADCsendCommand(WAKE_COMMAND);		// Sollte nicht sein, jedoch zur sicherheit
 8004bf0:	2002      	movs	r0, #2
 8004bf2:	f000 f957 	bl	8004ea4 <ADCsendCommand>

	//todo

	//Read all Registers to simplify config
	ADCreadRegs(ID_REG_ADDR,REGISTER_COUNT, au8_registers);
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <ADCinit+0xb8>)
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	2112      	movs	r1, #18
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	f000 f903 	bl	8004e08 <ADCreadRegs>


	//Set Mode to single conversation opearation (Always use ADCstart() )
	au8_registers[DATARATE_REG_ADDR] &= ADS_CONVMODE_SS;
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <ADCinit+0xb8>)
 8004c04:	791b      	ldrb	r3, [r3, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	4013      	ands	r3, r2
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <ADCinit+0xb8>)
 8004c0e:	711a      	strb	r2, [r3, #4]

	au8_registers[INPMUX_REG_ADDR]	|= (ADS_P_AIN4 | ADS_N_AINCOM); // // Select INPUT (INPMUX- Register): Setzen der Eingänge
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <ADCinit+0xb8>)
 8004c12:	789b      	ldrb	r3, [r3, #2]
 8004c14:	224c      	movs	r2, #76	; 0x4c
 8004c16:	4313      	orrs	r3, r2
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <ADCinit+0xb8>)
 8004c1c:	709a      	strb	r2, [r3, #2]
	au8_registers[REF_REG_ADDR]		= (ADS_REFINT_ON_ALWAYS+ADS_REFSEL_INT); // Set Internal voltage Reference (2.5V Max inputvoltage = 2.5V)
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <ADCinit+0xb8>)
 8004c20:	220a      	movs	r2, #10
 8004c22:	715a      	strb	r2, [r3, #5]

	ADCwriteRegs(ID_REG_ADDR,REGISTER_COUNT, au8_registers); 	// write all registers
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <ADCinit+0xb8>)
 8004c26:	001a      	movs	r2, r3
 8004c28:	2112      	movs	r1, #18
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f000 f84a 	bl	8004cc4 <ADCwriteRegs>

	//ADCregwrite(PGA_REG_ADDR, ADS_PGA_ENABLED);
	//ADCsendCommand(STOP_COMMAND);
	//ADCsendCommand(START_COMMAND);

	ADCstart();
 8004c30:	f000 f83a 	bl	8004ca8 <ADCstart>
	//HAL_GPIO_WritePin(ADC_START_GPIO_Port, ADC_START_Pin,1);	// Start by Pin

	return 0;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	0018      	movs	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	48000800 	.word	0x48000800
 8004c40:	48001400 	.word	0x48001400
 8004c44:	200000c4 	.word	0x200000c4

08004c48 <ADCregwrite>:
/* Schreibt ein Register des ADCs
 * @param	startadress 	-> Zu schreibendes Register
 * @param	data			-> Daten für in das Register
 */
void ADCregwrite(uint8_t startadress, uint8_t data)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	0002      	movs	r2, r0
 8004c50:	1dfb      	adds	r3, r7, #7
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	1c0a      	adds	r2, r1, #0
 8004c58:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[1] = {data};
 8004c5a:	210c      	movs	r1, #12
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	1dba      	adds	r2, r7, #6
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	701a      	strb	r2, [r3, #0]
	ADCwriteRegs(startadress, 1, txdata);
 8004c64:	187a      	adds	r2, r7, r1
 8004c66:	1dfb      	adds	r3, r7, #7
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 f829 	bl	8004cc4 <ADCwriteRegs>
}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b004      	add	sp, #16
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <ADCregread>:
/* Liest ein Register des ADCs
 * @param	startadress	-> zu lesendes Register
 * @resp	Gelesenes Register
 */
uint8_t ADCregread(uint8_t startadress)
{
 8004c7a:	b590      	push	{r4, r7, lr}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	0002      	movs	r2, r0
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	701a      	strb	r2, [r3, #0]
	uint8_t rxdata[1] = {0};
 8004c86:	240c      	movs	r4, #12
 8004c88:	193b      	adds	r3, r7, r4
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
	ADCreadRegs(startadress, 1, rxdata);
 8004c8e:	193a      	adds	r2, r7, r4
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	0018      	movs	r0, r3
 8004c98:	f000 f8b6 	bl	8004e08 <ADCreadRegs>
	return rxdata[0];
 8004c9c:	193b      	adds	r3, r7, r4
 8004c9e:	781b      	ldrb	r3, [r3, #0]
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b005      	add	sp, #20
 8004ca6:	bd90      	pop	{r4, r7, pc}

08004ca8 <ADCstart>:

/* Sendet ADC Komando Start (steuerung über Command, Start-PIN = LOW)
 */
void ADCstart(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
	ADCmeasuremenReady=0;
 8004cac:	4b04      	ldr	r3, [pc, #16]	; (8004cc0 <ADCstart+0x18>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
	ADCsendCommand(START_COMMAND);
 8004cb2:	2008      	movs	r0, #8
 8004cb4:	f000 f8f6 	bl	8004ea4 <ADCsendCommand>
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	200000d6 	.word	0x200000d6

08004cc4 <ADCwriteRegs>:
 * @param	u8_length		-> Anzahl zu schreibende 8Bit Register
 * @param 	pu8_data		-> Pointer auf Array mit den Daten
 * @resp	erfolgreich =1, sonst 0
 */
uint8_t ADCwriteRegs(uint8_t u8_startadress, uint8_t u8_length, uint8_t *pu8_data)
{
 8004cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc6:	b08d      	sub	sp, #52	; 0x34
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	0008      	movs	r0, r1
 8004cce:	61ba      	str	r2, [r7, #24]
 8004cd0:	221f      	movs	r2, #31
 8004cd2:	18ba      	adds	r2, r7, r2
 8004cd4:	7939      	ldrb	r1, [r7, #4]
 8004cd6:	7011      	strb	r1, [r2, #0]
 8004cd8:	221e      	movs	r2, #30
 8004cda:	18ba      	adds	r2, r7, r2
 8004cdc:	1c01      	adds	r1, r0, #0
 8004cde:	7011      	strb	r1, [r2, #0]
 8004ce0:	466a      	mov	r2, sp
 8004ce2:	607a      	str	r2, [r7, #4]
	 * 	length -1		0 = 1Byte, 1= 2Byte
	 * 	Data(...)
	 */

	// checks maximal length
	if(u8_length==0 && u8_length > REGISTER_COUNT)	// sonst werden keine Daten gesendet, Max register, 0 ist auch ein register! deshalb >=
 8004ce4:	221e      	movs	r2, #30
 8004ce6:	18ba      	adds	r2, r7, r2
 8004ce8:	7812      	ldrb	r2, [r2, #0]
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d106      	bne.n	8004cfc <ADCwriteRegs+0x38>
 8004cee:	221e      	movs	r2, #30
 8004cf0:	18ba      	adds	r2, r7, r2
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	2a12      	cmp	r2, #18
 8004cf6:	d901      	bls.n	8004cfc <ADCwriteRegs+0x38>
	{	
		return 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e07b      	b.n	8004df4 <ADCwriteRegs+0x130>
	}
	
	// erstellen eines Array für das senden der Daten
	uint8_t txdata[u8_length+2];
 8004cfc:	221e      	movs	r2, #30
 8004cfe:	18ba      	adds	r2, r7, r2
 8004d00:	7812      	ldrb	r2, [r2, #0]
 8004d02:	3202      	adds	r2, #2
 8004d04:	1e51      	subs	r1, r2, #1
 8004d06:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d08:	0011      	movs	r1, r2
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	6179      	str	r1, [r7, #20]
 8004d10:	6939      	ldr	r1, [r7, #16]
 8004d12:	0f49      	lsrs	r1, r1, #29
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	00c6      	lsls	r6, r0, #3
 8004d18:	430e      	orrs	r6, r1
 8004d1a:	6939      	ldr	r1, [r7, #16]
 8004d1c:	00cd      	lsls	r5, r1, #3
 8004d1e:	0011      	movs	r1, r2
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	2100      	movs	r1, #0
 8004d24:	60f9      	str	r1, [r7, #12]
 8004d26:	68bd      	ldr	r5, [r7, #8]
 8004d28:	68fe      	ldr	r6, [r7, #12]
 8004d2a:	0029      	movs	r1, r5
 8004d2c:	0f49      	lsrs	r1, r1, #29
 8004d2e:	0030      	movs	r0, r6
 8004d30:	00c4      	lsls	r4, r0, #3
 8004d32:	430c      	orrs	r4, r1
 8004d34:	0029      	movs	r1, r5
 8004d36:	00cb      	lsls	r3, r1, #3
 8004d38:	0013      	movs	r3, r2
 8004d3a:	3307      	adds	r3, #7
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	466a      	mov	r2, sp
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	469d      	mov	sp, r3
 8004d46:	466b      	mov	r3, sp
 8004d48:	3300      	adds	r3, #0
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
	txdata[0]= u8_startadress | 0x40; 	// set write command
 8004d4c:	211f      	movs	r1, #31
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	701a      	strb	r2, [r3, #0]
	txdata[1]= u8_length -1; 	// 0x00 is 1 byte
 8004d5c:	231e      	movs	r3, #30
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	705a      	strb	r2, [r3, #1]
	
	for(uint8_t i=0; i<u8_length; i++)	// Dateiinhalt in txdata plazieren
 8004d6a:	2317      	movs	r3, #23
 8004d6c:	2218      	movs	r2, #24
 8004d6e:	4694      	mov	ip, r2
 8004d70:	44bc      	add	ip, r7
 8004d72:	4463      	add	r3, ip
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e014      	b.n	8004da4 <ADCwriteRegs+0xe0>
	{
		txdata[i+2]= *(pu8_data+i);
 8004d7a:	2017      	movs	r0, #23
 8004d7c:	2418      	movs	r4, #24
 8004d7e:	193b      	adds	r3, r7, r4
 8004d80:	181b      	adds	r3, r3, r0
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	18d2      	adds	r2, r2, r3
 8004d88:	193b      	adds	r3, r7, r4
 8004d8a:	181b      	adds	r3, r3, r0
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	3302      	adds	r3, #2
 8004d90:	7811      	ldrb	r1, [r2, #0]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<u8_length; i++)	// Dateiinhalt in txdata plazieren
 8004d96:	193b      	adds	r3, r7, r4
 8004d98:	181b      	adds	r3, r3, r0
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	193b      	adds	r3, r7, r4
 8004d9e:	181b      	adds	r3, r3, r0
 8004da0:	3201      	adds	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	2317      	movs	r3, #23
 8004da6:	2218      	movs	r2, #24
 8004da8:	18ba      	adds	r2, r7, r2
 8004daa:	18d2      	adds	r2, r2, r3
 8004dac:	231e      	movs	r3, #30
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d3e0      	bcc.n	8004d7a <ADCwriteRegs+0xb6>
	}
	
	

	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <ADCwriteRegs+0x13c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	2120      	movs	r1, #32
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7fe fa68 	bl	8003294 <HAL_GPIO_WritePin>
	HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fd ffb3 	bl	8002d30 <HAL_Delay>

	HAL_SPI_Transmit(&hspi1,txdata,u8_length+2,10);			// +2 for startadress and length, length is only datacount
 8004dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dcc:	231e      	movs	r3, #30
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	480a      	ldr	r0, [pc, #40]	; (8004e04 <ADCwriteRegs+0x140>)
 8004dda:	230a      	movs	r3, #10
 8004ddc:	f7fe ff94 	bl	8003d08 <HAL_SPI_Transmit>
	
	HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004de0:	2000      	movs	r0, #0
 8004de2:	f7fd ffa5 	bl	8002d30 <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <ADCwriteRegs+0x13c>)
 8004de8:	2201      	movs	r2, #1
 8004dea:	2120      	movs	r1, #32
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7fe fa51 	bl	8003294 <HAL_GPIO_WritePin>

	return 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4695      	mov	sp, r2
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b00d      	add	sp, #52	; 0x34
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	48001400 	.word	0x48001400
 8004e04:	200000d8 	.word	0x200000d8

08004e08 <ADCreadRegs>:
 * @param	u8_length		-> Anzahl zu lesende 8Bit Register
 * @param 	pu8_rxdata		-> Pointer auf Array mit den Daten
 * @resp	erfolgreich =1, sonst 0	//todo
 */
uint8_t ADCreadRegs(uint8_t u8_startadress, uint8_t u8_length, uint8_t *pu8_rxdata) 	// Speichert rückgabe in rxdata
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	603a      	str	r2, [r7, #0]
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	1c02      	adds	r2, r0, #0
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	1dbb      	adds	r3, r7, #6
 8004e18:	1c0a      	adds	r2, r1, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
	 * 	Lesen der Daten
	 * 	Data(...)
	 */

	// checks maximal length
	if(u8_length==0 && u8_length > REGISTER_COUNT)	// sonst werden keine Daten gesendet, Max register, 0 ist auch ein register! deshalb >=
 8004e1c:	1dbb      	adds	r3, r7, #6
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <ADCreadRegs+0x28>
 8004e24:	1dbb      	adds	r3, r7, #6
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b12      	cmp	r3, #18
 8004e2a:	d901      	bls.n	8004e30 <ADCreadRegs+0x28>
	{
		return 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e030      	b.n	8004e92 <ADCreadRegs+0x8a>
	}

	uint8_t txdata[2] = {u8_startadress |0x20 , u8_length-1};	// create array for spi transmit (to get a response from ADC)
 8004e30:	1dfb      	adds	r3, r7, #7
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2220      	movs	r2, #32
 8004e36:	4313      	orrs	r3, r2
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	210c      	movs	r1, #12
 8004e3c:	187b      	adds	r3, r7, r1
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	000c      	movs	r4, r1
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	705a      	strb	r2, [r3, #1]
	
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <ADCreadRegs+0x94>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	2120      	movs	r1, #32
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7fe fa1d 	bl	8003294 <HAL_GPIO_WritePin>
	HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f7fd ff68 	bl	8002d30 <HAL_Delay>

	HAL_SPI_Transmit(&hspi1,txdata, 2, 10);			//Transmit TX Data (2 Bytes)
 8004e60:	0021      	movs	r1, r4
 8004e62:	1879      	adds	r1, r7, r1
 8004e64:	480e      	ldr	r0, [pc, #56]	; (8004ea0 <ADCreadRegs+0x98>)
 8004e66:	230a      	movs	r3, #10
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f7fe ff4d 	bl	8003d08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pu8_rxdata, u8_length, 50);		//todo realy +1?
 8004e6e:	1dbb      	adds	r3, r7, #6
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	480a      	ldr	r0, [pc, #40]	; (8004ea0 <ADCreadRegs+0x98>)
 8004e78:	2332      	movs	r3, #50	; 0x32
 8004e7a:	f7ff f8af 	bl	8003fdc <HAL_SPI_Receive>

	HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7fd ff56 	bl	8002d30 <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <ADCreadRegs+0x94>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	2120      	movs	r1, #32
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f7fe fa02 	bl	8003294 <HAL_GPIO_WritePin>
	return 1;
 8004e90:	2301      	movs	r3, #1

}
 8004e92:	0018      	movs	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	b005      	add	sp, #20
 8004e98:	bd90      	pop	{r4, r7, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	48001400 	.word	0x48001400
 8004ea0:	200000d8 	.word	0x200000d8

08004ea4 <ADCsendCommand>:

/*	Senden eines Befehls für den ADC
 * 	@param	u8_opcode	-> befehl aus ADS1204S0x.h
 */
void ADCsendCommand(uint8_t u8_opcode)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	0002      	movs	r2, r0
 8004eac:	1dfb      	adds	r3, r7, #7
 8004eae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <ADCsendCommand+0x50>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f7fe f9ec 	bl	8003294 <HAL_GPIO_WritePin>
	HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f7fd ff37 	bl	8002d30 <HAL_Delay>

	uint8_t txbuf[1]= {u8_opcode};				//Start Convertion via Command
 8004ec2:	210c      	movs	r1, #12
 8004ec4:	187b      	adds	r3, r7, r1
 8004ec6:	1dfa      	adds	r2, r7, #7
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,txbuf,1,10);
 8004ecc:	1879      	adds	r1, r7, r1
 8004ece:	480a      	ldr	r0, [pc, #40]	; (8004ef8 <ADCsendCommand+0x54>)
 8004ed0:	230a      	movs	r3, #10
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f7fe ff18 	bl	8003d08 <HAL_SPI_Transmit>

	HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7fd ff29 	bl	8002d30 <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <ADCsendCommand+0x50>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f7fe f9d5 	bl	8003294 <HAL_GPIO_WritePin>
	
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b004      	add	sp, #16
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	48001400 	.word	0x48001400
 8004ef8:	200000d8 	.word	0x200000d8

08004efc <ADRreadInput>:
 * 	Die Funktion kann in der ISR von DRDY ausgeführt werden (mode=0), oder immer (mode=1)
 * 	@param mode =1 -> Read with command , mode = 0 -> DRDY is high !
 * 	@return u32_result
 */
uint32_t ADRreadInput(uint8_t mode) 	// 0=DRDY high, 1=Command
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	0002      	movs	r2, r0
 8004f04:	1dfb      	adds	r3, r7, #7
 8004f06:	701a      	strb	r2, [r3, #0]
		uint8_t rxbuf[3]={1,1,1};
 8004f08:	2310      	movs	r3, #16
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	; (8004fb8 <ADRreadInput+0xbc>)
 8004f0e:	8811      	ldrh	r1, [r2, #0]
 8004f10:	8019      	strh	r1, [r3, #0]
 8004f12:	7892      	ldrb	r2, [r2, #2]
 8004f14:	709a      	strb	r2, [r3, #2]
		uint32_t u32_result=0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
		uint8_t dStatus[1];
		uint8_t dCRC[1];


		if (mode == 1) // Read by Command
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d102      	bne.n	8004f28 <ADRreadInput+0x2c>
		{
			ADCsendCommand(RDATA_COMMAND);	//RDATA => Read Data
 8004f22:	2012      	movs	r0, #18
 8004f24:	f7ff ffbe 	bl	8004ea4 <ADCsendCommand>
		}

		HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 8004f28:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <ADRreadInput+0xc0>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2120      	movs	r1, #32
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fe f9b0 	bl	8003294 <HAL_GPIO_WritePin>
		HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7fd fefb 	bl	8002d30 <HAL_Delay>

		//todo

		// if the Status byte is set - grab it
		if( (au8_registers[SYS_REG_ADDR] & ADS_SENDSTATUS_ENABLE) )
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <ADRreadInput+0xc4>)
 8004f3c:	7a5b      	ldrb	r3, [r3, #9]
 8004f3e:	001a      	movs	r2, r3
 8004f40:	2301      	movs	r3, #1
 8004f42:	4013      	ands	r3, r2
 8004f44:	d006      	beq.n	8004f54 <ADRreadInput+0x58>
		{
			HAL_SPI_Receive(&hspi1, dStatus,1,10);
 8004f46:	230c      	movs	r3, #12
 8004f48:	18f9      	adds	r1, r7, r3
 8004f4a:	481e      	ldr	r0, [pc, #120]	; (8004fc4 <ADRreadInput+0xc8>)
 8004f4c:	230a      	movs	r3, #10
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f7ff f844 	bl	8003fdc <HAL_SPI_Receive>
		}


		HAL_SPI_Receive(&hspi1,rxbuf,3,10); //Read Datarate Register --> Ohne CRC und Status
 8004f54:	2310      	movs	r3, #16
 8004f56:	18f9      	adds	r1, r7, r3
 8004f58:	481a      	ldr	r0, [pc, #104]	; (8004fc4 <ADRreadInput+0xc8>)
 8004f5a:	230a      	movs	r3, #10
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	f7ff f83d 	bl	8003fdc <HAL_SPI_Receive>

		// is CRC enabled?
		if( (au8_registers[SYS_REG_ADDR] & ADS_CRC_ENABLE) )
 8004f62:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <ADRreadInput+0xc4>)
 8004f64:	7a5b      	ldrb	r3, [r3, #9]
 8004f66:	001a      	movs	r2, r3
 8004f68:	2302      	movs	r3, #2
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d006      	beq.n	8004f7c <ADRreadInput+0x80>
		{
			HAL_SPI_Receive(&hspi1, dCRC,1,10);
 8004f6e:	2308      	movs	r3, #8
 8004f70:	18f9      	adds	r1, r7, r3
 8004f72:	4814      	ldr	r0, [pc, #80]	; (8004fc4 <ADRreadInput+0xc8>)
 8004f74:	230a      	movs	r3, #10
 8004f76:	2201      	movs	r2, #1
 8004f78:	f7ff f830 	bl	8003fdc <HAL_SPI_Receive>

			//todo calc CRC
		}


		HAL_Delay(CHIP_SELECT_WAIT_TIME);
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fd fed7 	bl	8002d30 <HAL_Delay>
		HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <ADRreadInput+0xc0>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	2120      	movs	r1, #32
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f7fe f983 	bl	8003294 <HAL_GPIO_WritePin>

		u32_result = rxbuf[0];
 8004f8e:	2110      	movs	r1, #16
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	617b      	str	r3, [r7, #20]
		u32_result = (u32_result<<8) + rxbuf[1];
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	021b      	lsls	r3, r3, #8
 8004f9a:	187a      	adds	r2, r7, r1
 8004f9c:	7852      	ldrb	r2, [r2, #1]
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
		u32_result = (u32_result<<8) + rxbuf[2];
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	187a      	adds	r2, r7, r1
 8004fa8:	7892      	ldrb	r2, [r2, #2]
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

		return u32_result;
 8004fae:	697b      	ldr	r3, [r7, #20]
	
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b006      	add	sp, #24
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08005c48 	.word	0x08005c48
 8004fbc:	48001400 	.word	0x48001400
 8004fc0:	200000c4 	.word	0x200000c4
 8004fc4:	200000d8 	.word	0x200000d8

08004fc8 <setADCsigleChannel>:
 * 	Kanal wird zuerst gesetzt, dann wird gewartet !!
 * 	@param u8_channel 	-> AIN0... AIN5 (ADS124S06), AIN0...AIN11 (ASD124S08)
 * 	@ return  -> success =1
 */
uint8_t setADCsigleChannel(uint8_t u8_channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	0002      	movs	r2, r0
 8004fd0:	1dfb      	adds	r3, r7, #7
 8004fd2:	701a      	strb	r2, [r3, #0]
	if (au8_registers[ID_REG_ADDR] & ADS_124S06 && u8_channel > (ADS_P_AIN5 >> 4) )	// DS124S06 has only 6 channels (AIN5 is max)
 8004fd4:	4b12      	ldr	r3, [pc, #72]	; (8005020 <setADCsigleChannel+0x58>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	001a      	movs	r2, r3
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d005      	beq.n	8004fec <setADCsigleChannel+0x24>
 8004fe0:	1dfb      	adds	r3, r7, #7
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d901      	bls.n	8004fec <setADCsigleChannel+0x24>
	{
		return 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e015      	b.n	8005018 <setADCsigleChannel+0x50>
	}
	else if(u8_channel > (ADS_P_AIN11 >> 4) )						// DS124S08 has 12 channels (AIN11 is max)
 8004fec:	1dfb      	adds	r3, r7, #7
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b0b      	cmp	r3, #11
 8004ff2:	d901      	bls.n	8004ff8 <setADCsigleChannel+0x30>
	{
		return 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e00f      	b.n	8005018 <setADCsigleChannel+0x50>
	}

	else
	{
		ADCregwrite(INPMUX_REG_ADDR,(u8_channel<<4 | ADS_N_AINCOM));
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	220c      	movs	r2, #12
 8005002:	4313      	orrs	r3, r2
 8005004:	b25b      	sxtb	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	0019      	movs	r1, r3
 800500a:	2002      	movs	r0, #2
 800500c:	f7ff fe1c 	bl	8004c48 <ADCregwrite>
		HAL_Delay(7); 		// Delay until Input is stable (Datasheet p.36, Table 10. Internal Reference Settling Time)
 8005010:	2007      	movs	r0, #7
 8005012:	f7fd fe8d 	bl	8002d30 <HAL_Delay>
		return 1;
 8005016:	2301      	movs	r3, #1
	}
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	200000c4 	.word	0x200000c4

08005024 <readsingleADCChannel>:
/*	Liest einzelnen ADCKanal aus
 * 	@param 	u8_channel -> zu lesender Kanal
 * 	@resp 	-> ADC output
 */
uint32_t readsingleADCChannel(uint8_t u8_channel)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	0002      	movs	r2, r0
 800502c:	1dfb      	adds	r3, r7, #7
 800502e:	701a      	strb	r2, [r3, #0]
	if(setADCsigleChannel(u8_channel))
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	0018      	movs	r0, r3
 8005036:	f7ff ffc7 	bl	8004fc8 <setADCsigleChannel>
 800503a:	1e03      	subs	r3, r0, #0
 800503c:	d00b      	beq.n	8005056 <readsingleADCChannel+0x32>
	{

		ADCstart();
 800503e:	f7ff fe33 	bl	8004ca8 <ADCstart>
		while(ADCmeasuremenReady!=1);
 8005042:	46c0      	nop			; (mov r8, r8)
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <readsingleADCChannel+0x3c>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d1fb      	bne.n	8005044 <readsingleADCChannel+0x20>
		return ADRreadInput(1);
 800504c:	2001      	movs	r0, #1
 800504e:	f7ff ff55 	bl	8004efc <ADRreadInput>
 8005052:	0003      	movs	r3, r0
 8005054:	e000      	b.n	8005058 <readsingleADCChannel+0x34>


	}
	else
	{
		return 0;
 8005056:	2300      	movs	r3, #0
	}

}
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}
 8005060:	200000d6 	.word	0x200000d6

08005064 <read_temperature>:



float read_temperature(void)		//need be called in a while. Flag newtemperatureavaliable is set if set and must be cleared manualy !
{
 8005064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005066:	b085      	sub	sp, #20
 8005068:	af04      	add	r7, sp, #16
	static uint32_t au32_rawdata[3];
	static uint8_t u8_rawcounter;
	static float temperature;

	switch(tempmeasurementstate)
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <read_temperature+0xd8>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d03a      	beq.n	80050e8 <read_temperature+0x84>
 8005072:	dc02      	bgt.n	800507a <read_temperature+0x16>
 8005074:	2b01      	cmp	r3, #1
 8005076:	d02e      	beq.n	80050d6 <read_temperature+0x72>
 8005078:	e05b      	b.n	8005132 <read_temperature+0xce>
 800507a:	2b03      	cmp	r3, #3
 800507c:	d056      	beq.n	800512c <read_temperature+0xc8>
 800507e:	2b04      	cmp	r3, #4
 8005080:	d157      	bne.n	8005132 <read_temperature+0xce>
	{
		case MEASURE: 		// ISR CALL
			setADCsigleChannel(u8_rawcounter);
 8005082:	4b2f      	ldr	r3, [pc, #188]	; (8005140 <read_temperature+0xdc>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	0018      	movs	r0, r3
 8005088:	f7ff ff9e 	bl	8004fc8 <setADCsigleChannel>
			ADCstart();
 800508c:	f7ff fe0c 	bl	8004ca8 <ADCstart>
			while(ADCmeasuremenReady!=1);
 8005090:	46c0      	nop			; (mov r8, r8)
 8005092:	4b2c      	ldr	r3, [pc, #176]	; (8005144 <read_temperature+0xe0>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d1fb      	bne.n	8005092 <read_temperature+0x2e>
			au32_rawdata[u8_rawcounter]= ADRreadInput(1); 	// Read (DRDY is high)
 800509a:	4b29      	ldr	r3, [pc, #164]	; (8005140 <read_temperature+0xdc>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	001c      	movs	r4, r3
 80050a0:	2001      	movs	r0, #1
 80050a2:	f7ff ff2b 	bl	8004efc <ADRreadInput>
 80050a6:	0001      	movs	r1, r0
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <read_temperature+0xe4>)
 80050aa:	00a2      	lsls	r2, r4, #2
 80050ac:	50d1      	str	r1, [r2, r3]
			u8_rawcounter ++;
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <read_temperature+0xdc>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	3301      	adds	r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4b22      	ldr	r3, [pc, #136]	; (8005140 <read_temperature+0xdc>)
 80050b8:	701a      	strb	r2, [r3, #0]
			if(u8_rawcounter >= 3)
 80050ba:	4b21      	ldr	r3, [pc, #132]	; (8005140 <read_temperature+0xdc>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d902      	bls.n	80050c8 <read_temperature+0x64>
			{
				tempmeasurementstate = NEWMEASURE;
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <read_temperature+0xd8>)
 80050c4:	2202      	movs	r2, #2
 80050c6:	701a      	strb	r2, [r3, #0]
			}

			return u8_rawcounter;
 80050c8:	4b1d      	ldr	r3, [pc, #116]	; (8005140 <read_temperature+0xdc>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fb ff87 	bl	8000fe0 <__aeabi_ui2f>
 80050d2:	1c03      	adds	r3, r0, #0
 80050d4:	e02e      	b.n	8005134 <read_temperature+0xd0>
			break;

		case READY:
			u8_rawcounter=0;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <read_temperature+0xdc>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
			tempmeasurementstate=MEASURE;
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <read_temperature+0xd8>)
 80050de:	2204      	movs	r2, #4
 80050e0:	701a      	strb	r2, [r3, #0]

			break;
 80050e2:	46c0      	nop			; (mov r8, r8)
			return temperature;

		default:
			return 0;
	}
	return 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e025      	b.n	8005134 <read_temperature+0xd0>
			u8_rawcounter=0;
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <read_temperature+0xdc>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
			tempmeasurementstate = NEWTEMP;
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <read_temperature+0xd8>)
 80050f0:	2203      	movs	r2, #3
 80050f2:	701a      	strb	r2, [r3, #0]
			temperature = calctemperature( calc_R_temperature(au32_rawdata, pt100), pt100 );
 80050f4:	4b15      	ldr	r3, [pc, #84]	; (800514c <read_temperature+0xe8>)
 80050f6:	4814      	ldr	r0, [pc, #80]	; (8005148 <read_temperature+0xe4>)
 80050f8:	466a      	mov	r2, sp
 80050fa:	0011      	movs	r1, r2
 80050fc:	001a      	movs	r2, r3
 80050fe:	320c      	adds	r2, #12
 8005100:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005102:	c170      	stmia	r1!, {r4, r5, r6}
 8005104:	6819      	ldr	r1, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f000 f823 	bl	8005154 <calc_R_temperature>
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <read_temperature+0xe8>)
 8005110:	466a      	mov	r2, sp
 8005112:	0011      	movs	r1, r2
 8005114:	001a      	movs	r2, r3
 8005116:	320c      	adds	r2, #12
 8005118:	ca70      	ldmia	r2!, {r4, r5, r6}
 800511a:	c170      	stmia	r1!, {r4, r5, r6}
 800511c:	6819      	ldr	r1, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f000 f87d 	bl	8005220 <calctemperature>
 8005126:	1c02      	adds	r2, r0, #0
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <read_temperature+0xec>)
 800512a:	601a      	str	r2, [r3, #0]
			return temperature;
 800512c:	4b08      	ldr	r3, [pc, #32]	; (8005150 <read_temperature+0xec>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	e000      	b.n	8005134 <read_temperature+0xd0>
			return 0;
 8005132:	2300      	movs	r3, #0
}
 8005134:	1c18      	adds	r0, r3, #0
 8005136:	46bd      	mov	sp, r7
 8005138:	b001      	add	sp, #4
 800513a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800513c:	20000018 	.word	0x20000018
 8005140:	200000a4 	.word	0x200000a4
 8005144:	200000d6 	.word	0x200000d6
 8005148:	200000a8 	.word	0x200000a8
 800514c:	20000000 	.word	0x20000000
 8005150:	200000b4 	.word	0x200000b4

08005154 <calc_R_temperature>:

float calc_R_temperature(uint32_t *pu32_rawdata, t_measurement_constants tempresistor)		// Berechnung R_temp
{
 8005154:	b084      	sub	sp, #16
 8005156:	b590      	push	{r4, r7, lr}
 8005158:	b087      	sub	sp, #28
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	2004      	movs	r0, #4
 8005160:	2428      	movs	r4, #40	; 0x28
 8005162:	46a4      	mov	ip, r4
 8005164:	44bc      	add	ip, r7
 8005166:	4460      	add	r0, ip
 8005168:	6001      	str	r1, [r0, #0]
 800516a:	6042      	str	r2, [r0, #4]
 800516c:	6083      	str	r3, [r0, #8]
	// Berechnung: Upt100= ADC0-2xADC1 + ADC2
	uint32_t u32_result_ADCsteps=  	pu32_rawdata[0] + pu32_rawdata[2] - 2*(pu32_rawdata[1]);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3308      	adds	r3, #8
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	18d2      	adds	r2, r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]

	// Steps to voltage
	float u32_result_ADCvoltage = 	(float) (fullscale_voltage * u32_result_ADCsteps / bitresulution2 );		// bitresolution2 for the positive spectrum
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f7fd fc66 	bl	8002a58 <__aeabi_ui2d>
 800518c:	2200      	movs	r2, #0
 800518e:	4b22      	ldr	r3, [pc, #136]	; (8005218 <calc_R_temperature+0xc4>)
 8005190:	f7fc fe8c 	bl	8001eac <__aeabi_dmul>
 8005194:	0003      	movs	r3, r0
 8005196:	000c      	movs	r4, r1
 8005198:	0018      	movs	r0, r3
 800519a:	0021      	movs	r1, r4
 800519c:	2200      	movs	r2, #0
 800519e:	4b1f      	ldr	r3, [pc, #124]	; (800521c <calc_R_temperature+0xc8>)
 80051a0:	f7fc fa7a 	bl	8001698 <__aeabi_ddiv>
 80051a4:	0003      	movs	r3, r0
 80051a6:	000c      	movs	r4, r1
 80051a8:	0018      	movs	r0, r3
 80051aa:	0021      	movs	r1, r4
 80051ac:	f7fd fcd8 	bl	8002b60 <__aeabi_d2f>
 80051b0:	1c03      	adds	r3, r0, #0
 80051b2:	613b      	str	r3, [r7, #16]

	//  R= U/I = U / ( UR_I / R_I ) =  U * R_I / UR_I
	float Voltage_R_11 =  (float) (fullscale_voltage * pu32_rawdata[2] / bitresulution2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3308      	adds	r3, #8
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f7fd fc4c 	bl	8002a58 <__aeabi_ui2d>
 80051c0:	2200      	movs	r2, #0
 80051c2:	4b15      	ldr	r3, [pc, #84]	; (8005218 <calc_R_temperature+0xc4>)
 80051c4:	f7fc fe72 	bl	8001eac <__aeabi_dmul>
 80051c8:	0003      	movs	r3, r0
 80051ca:	000c      	movs	r4, r1
 80051cc:	0018      	movs	r0, r3
 80051ce:	0021      	movs	r1, r4
 80051d0:	2200      	movs	r2, #0
 80051d2:	4b12      	ldr	r3, [pc, #72]	; (800521c <calc_R_temperature+0xc8>)
 80051d4:	f7fc fa60 	bl	8001698 <__aeabi_ddiv>
 80051d8:	0003      	movs	r3, r0
 80051da:	000c      	movs	r4, r1
 80051dc:	0018      	movs	r0, r3
 80051de:	0021      	movs	r1, r4
 80051e0:	f7fd fcbe 	bl	8002b60 <__aeabi_d2f>
 80051e4:	1c03      	adds	r3, r0, #0
 80051e6:	60fb      	str	r3, [r7, #12]

	return (u32_result_ADCvoltage * tempresistor.R_11 / Voltage_R_11 );
 80051e8:	2304      	movs	r3, #4
 80051ea:	2228      	movs	r2, #40	; 0x28
 80051ec:	4694      	mov	ip, r2
 80051ee:	44bc      	add	ip, r7
 80051f0:	4463      	add	r3, ip
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	6939      	ldr	r1, [r7, #16]
 80051f6:	1c18      	adds	r0, r3, #0
 80051f8:	f7fb fbfc 	bl	80009f4 <__aeabi_fmul>
 80051fc:	1c03      	adds	r3, r0, #0
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	1c18      	adds	r0, r3, #0
 8005202:	f7fb fa1f 	bl	8000644 <__aeabi_fdiv>
 8005206:	1c03      	adds	r3, r0, #0
}
 8005208:	1c18      	adds	r0, r3, #0
 800520a:	46bd      	mov	sp, r7
 800520c:	b007      	add	sp, #28
 800520e:	bc90      	pop	{r4, r7}
 8005210:	bc08      	pop	{r3}
 8005212:	b004      	add	sp, #16
 8005214:	4718      	bx	r3
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	40040000 	.word	0x40040000
 800521c:	41600000 	.word	0x41600000

08005220 <calctemperature>:

float calctemperature(float Rtemp, t_measurement_constants tempresistor)
{
 8005220:	b084      	sub	sp, #16
 8005222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	2004      	movs	r0, #4
 800522c:	2420      	movs	r4, #32
 800522e:	46a4      	mov	ip, r4
 8005230:	44bc      	add	ip, r7
 8005232:	4460      	add	r0, ip
 8005234:	6001      	str	r1, [r0, #0]
 8005236:	6042      	str	r2, [r0, #4]
 8005238:	6083      	str	r3, [r0, #8]
	if(Rtemp>=100)		// ToDo Temperatur >= 0°C
 800523a:	497d      	ldr	r1, [pc, #500]	; (8005430 <calctemperature+0x210>)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7fb f85d 	bl	80002fc <__aeabi_fcmpge>
 8005242:	1e03      	subs	r3, r0, #0
 8005244:	d076      	beq.n	8005334 <calctemperature+0x114>
		/* For Calculate the temperature from the Resistance in positve the Callendar-Van Dusen equation is used.
		 * https://en.wikipedia.org/wiki/Resistance_thermometer
		 * 	T= -A + sqrt(A^2 - 4*B *(1- (Rtemp/R0) )) / 2*B
		 */

		return (-tempresistor.A + sqrt((tempresistor.A * tempresistor.A) - 4*tempresistor.B*(1-(Rtemp/tempresistor.R0))))	/(2*tempresistor.B);
 8005246:	2304      	movs	r3, #4
 8005248:	2220      	movs	r2, #32
 800524a:	4694      	mov	ip, r2
 800524c:	44bc      	add	ip, r7
 800524e:	4463      	add	r3, ip
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2280      	movs	r2, #128	; 0x80
 8005254:	0612      	lsls	r2, r2, #24
 8005256:	4053      	eors	r3, r2
 8005258:	1c18      	adds	r0, r3, #0
 800525a:	f7fd fc2f 	bl	8002abc <__aeabi_f2d>
 800525e:	0004      	movs	r4, r0
 8005260:	000d      	movs	r5, r1
 8005262:	2304      	movs	r3, #4
 8005264:	2220      	movs	r2, #32
 8005266:	4694      	mov	ip, r2
 8005268:	44bc      	add	ip, r7
 800526a:	4463      	add	r3, ip
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2304      	movs	r3, #4
 8005270:	2120      	movs	r1, #32
 8005272:	468c      	mov	ip, r1
 8005274:	44bc      	add	ip, r7
 8005276:	4463      	add	r3, ip
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	1c19      	adds	r1, r3, #0
 800527c:	1c10      	adds	r0, r2, #0
 800527e:	f7fb fbb9 	bl	80009f4 <__aeabi_fmul>
 8005282:	1c03      	adds	r3, r0, #0
 8005284:	1c1e      	adds	r6, r3, #0
 8005286:	2304      	movs	r3, #4
 8005288:	2220      	movs	r2, #32
 800528a:	4694      	mov	ip, r2
 800528c:	44bc      	add	ip, r7
 800528e:	4463      	add	r3, ip
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2181      	movs	r1, #129	; 0x81
 8005294:	05c9      	lsls	r1, r1, #23
 8005296:	1c18      	adds	r0, r3, #0
 8005298:	f7fb fbac 	bl	80009f4 <__aeabi_fmul>
 800529c:	1c03      	adds	r3, r0, #0
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	2304      	movs	r3, #4
 80052a2:	2220      	movs	r2, #32
 80052a4:	4694      	mov	ip, r2
 80052a6:	44bc      	add	ip, r7
 80052a8:	4463      	add	r3, ip
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	1c19      	adds	r1, r3, #0
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fb f9c8 	bl	8000644 <__aeabi_fdiv>
 80052b4:	1c03      	adds	r3, r0, #0
 80052b6:	1c19      	adds	r1, r3, #0
 80052b8:	20fe      	movs	r0, #254	; 0xfe
 80052ba:	0580      	lsls	r0, r0, #22
 80052bc:	f7fb fccc 	bl	8000c58 <__aeabi_fsub>
 80052c0:	1c03      	adds	r3, r0, #0
 80052c2:	1c19      	adds	r1, r3, #0
 80052c4:	6838      	ldr	r0, [r7, #0]
 80052c6:	f7fb fb95 	bl	80009f4 <__aeabi_fmul>
 80052ca:	1c03      	adds	r3, r0, #0
 80052cc:	1c19      	adds	r1, r3, #0
 80052ce:	1c30      	adds	r0, r6, #0
 80052d0:	f7fb fcc2 	bl	8000c58 <__aeabi_fsub>
 80052d4:	1c03      	adds	r3, r0, #0
 80052d6:	1c18      	adds	r0, r3, #0
 80052d8:	f7fd fbf0 	bl	8002abc <__aeabi_f2d>
 80052dc:	0002      	movs	r2, r0
 80052de:	000b      	movs	r3, r1
 80052e0:	0010      	movs	r0, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	f000 fb86 	bl	80059f4 <sqrt>
 80052e8:	0002      	movs	r2, r0
 80052ea:	000b      	movs	r3, r1
 80052ec:	0020      	movs	r0, r4
 80052ee:	0029      	movs	r1, r5
 80052f0:	f7fb feb6 	bl	8001060 <__aeabi_dadd>
 80052f4:	0003      	movs	r3, r0
 80052f6:	000c      	movs	r4, r1
 80052f8:	0025      	movs	r5, r4
 80052fa:	001c      	movs	r4, r3
 80052fc:	2304      	movs	r3, #4
 80052fe:	2220      	movs	r2, #32
 8005300:	4694      	mov	ip, r2
 8005302:	44bc      	add	ip, r7
 8005304:	4463      	add	r3, ip
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	1c19      	adds	r1, r3, #0
 800530a:	1c18      	adds	r0, r3, #0
 800530c:	f7fb f800 	bl	8000310 <__aeabi_fadd>
 8005310:	1c03      	adds	r3, r0, #0
 8005312:	1c18      	adds	r0, r3, #0
 8005314:	f7fd fbd2 	bl	8002abc <__aeabi_f2d>
 8005318:	0002      	movs	r2, r0
 800531a:	000b      	movs	r3, r1
 800531c:	0020      	movs	r0, r4
 800531e:	0029      	movs	r1, r5
 8005320:	f7fc f9ba 	bl	8001698 <__aeabi_ddiv>
 8005324:	0003      	movs	r3, r0
 8005326:	000c      	movs	r4, r1
 8005328:	0018      	movs	r0, r3
 800532a:	0021      	movs	r1, r4
 800532c:	f7fd fc18 	bl	8002b60 <__aeabi_d2f>
 8005330:	1c03      	adds	r3, r0, #0
 8005332:	e075      	b.n	8005420 <calctemperature+0x200>
		 * He isn't correct because C isn't 0 as in the positive temperature
		 * In this case we get a measurement error
		 * todo for future improuvement a new calculation
		 */

		return (-tempresistor.A + sqrt((tempresistor.A * tempresistor.A) - 4*tempresistor.B*(1-(Rtemp/tempresistor.R0))))	/(2*tempresistor.B);
 8005334:	2304      	movs	r3, #4
 8005336:	2220      	movs	r2, #32
 8005338:	4694      	mov	ip, r2
 800533a:	44bc      	add	ip, r7
 800533c:	4463      	add	r3, ip
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2280      	movs	r2, #128	; 0x80
 8005342:	0612      	lsls	r2, r2, #24
 8005344:	4053      	eors	r3, r2
 8005346:	1c18      	adds	r0, r3, #0
 8005348:	f7fd fbb8 	bl	8002abc <__aeabi_f2d>
 800534c:	0004      	movs	r4, r0
 800534e:	000d      	movs	r5, r1
 8005350:	2304      	movs	r3, #4
 8005352:	2220      	movs	r2, #32
 8005354:	4694      	mov	ip, r2
 8005356:	44bc      	add	ip, r7
 8005358:	4463      	add	r3, ip
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	2304      	movs	r3, #4
 800535e:	2120      	movs	r1, #32
 8005360:	468c      	mov	ip, r1
 8005362:	44bc      	add	ip, r7
 8005364:	4463      	add	r3, ip
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1c19      	adds	r1, r3, #0
 800536a:	1c10      	adds	r0, r2, #0
 800536c:	f7fb fb42 	bl	80009f4 <__aeabi_fmul>
 8005370:	1c03      	adds	r3, r0, #0
 8005372:	1c1e      	adds	r6, r3, #0
 8005374:	2304      	movs	r3, #4
 8005376:	2220      	movs	r2, #32
 8005378:	4694      	mov	ip, r2
 800537a:	44bc      	add	ip, r7
 800537c:	4463      	add	r3, ip
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2181      	movs	r1, #129	; 0x81
 8005382:	05c9      	lsls	r1, r1, #23
 8005384:	1c18      	adds	r0, r3, #0
 8005386:	f7fb fb35 	bl	80009f4 <__aeabi_fmul>
 800538a:	1c03      	adds	r3, r0, #0
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	2304      	movs	r3, #4
 8005390:	2220      	movs	r2, #32
 8005392:	4694      	mov	ip, r2
 8005394:	44bc      	add	ip, r7
 8005396:	4463      	add	r3, ip
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	1c19      	adds	r1, r3, #0
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fb f951 	bl	8000644 <__aeabi_fdiv>
 80053a2:	1c03      	adds	r3, r0, #0
 80053a4:	1c19      	adds	r1, r3, #0
 80053a6:	20fe      	movs	r0, #254	; 0xfe
 80053a8:	0580      	lsls	r0, r0, #22
 80053aa:	f7fb fc55 	bl	8000c58 <__aeabi_fsub>
 80053ae:	1c03      	adds	r3, r0, #0
 80053b0:	1c19      	adds	r1, r3, #0
 80053b2:	6838      	ldr	r0, [r7, #0]
 80053b4:	f7fb fb1e 	bl	80009f4 <__aeabi_fmul>
 80053b8:	1c03      	adds	r3, r0, #0
 80053ba:	1c19      	adds	r1, r3, #0
 80053bc:	1c30      	adds	r0, r6, #0
 80053be:	f7fb fc4b 	bl	8000c58 <__aeabi_fsub>
 80053c2:	1c03      	adds	r3, r0, #0
 80053c4:	1c18      	adds	r0, r3, #0
 80053c6:	f7fd fb79 	bl	8002abc <__aeabi_f2d>
 80053ca:	0002      	movs	r2, r0
 80053cc:	000b      	movs	r3, r1
 80053ce:	0010      	movs	r0, r2
 80053d0:	0019      	movs	r1, r3
 80053d2:	f000 fb0f 	bl	80059f4 <sqrt>
 80053d6:	0002      	movs	r2, r0
 80053d8:	000b      	movs	r3, r1
 80053da:	0020      	movs	r0, r4
 80053dc:	0029      	movs	r1, r5
 80053de:	f7fb fe3f 	bl	8001060 <__aeabi_dadd>
 80053e2:	0003      	movs	r3, r0
 80053e4:	000c      	movs	r4, r1
 80053e6:	0025      	movs	r5, r4
 80053e8:	001c      	movs	r4, r3
 80053ea:	2304      	movs	r3, #4
 80053ec:	2220      	movs	r2, #32
 80053ee:	4694      	mov	ip, r2
 80053f0:	44bc      	add	ip, r7
 80053f2:	4463      	add	r3, ip
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	1c19      	adds	r1, r3, #0
 80053f8:	1c18      	adds	r0, r3, #0
 80053fa:	f7fa ff89 	bl	8000310 <__aeabi_fadd>
 80053fe:	1c03      	adds	r3, r0, #0
 8005400:	1c18      	adds	r0, r3, #0
 8005402:	f7fd fb5b 	bl	8002abc <__aeabi_f2d>
 8005406:	0002      	movs	r2, r0
 8005408:	000b      	movs	r3, r1
 800540a:	0020      	movs	r0, r4
 800540c:	0029      	movs	r1, r5
 800540e:	f7fc f943 	bl	8001698 <__aeabi_ddiv>
 8005412:	0003      	movs	r3, r0
 8005414:	000c      	movs	r4, r1
 8005416:	0018      	movs	r0, r3
 8005418:	0021      	movs	r1, r4
 800541a:	f7fd fba1 	bl	8002b60 <__aeabi_d2f>
 800541e:	1c03      	adds	r3, r0, #0
	}

}
 8005420:	1c18      	adds	r0, r3, #0
 8005422:	46bd      	mov	sp, r7
 8005424:	b003      	add	sp, #12
 8005426:	bcf0      	pop	{r4, r5, r6, r7}
 8005428:	bc08      	pop	{r3}
 800542a:	b004      	add	sp, #16
 800542c:	4718      	bx	r3
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	42c80000 	.word	0x42c80000

08005434 <calcAnalogvoltage>:



float calcAnalogvoltage(uint32_t u32_measurement)
{
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	return fullscale_voltage * u32_measurement / bitresulution2;
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fd fb0b 	bl	8002a58 <__aeabi_ui2d>
 8005442:	2200      	movs	r2, #0
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <calcAnalogvoltage+0x3c>)
 8005446:	f7fc fd31 	bl	8001eac <__aeabi_dmul>
 800544a:	0003      	movs	r3, r0
 800544c:	000c      	movs	r4, r1
 800544e:	0018      	movs	r0, r3
 8005450:	0021      	movs	r1, r4
 8005452:	2200      	movs	r2, #0
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <calcAnalogvoltage+0x40>)
 8005456:	f7fc f91f 	bl	8001698 <__aeabi_ddiv>
 800545a:	0003      	movs	r3, r0
 800545c:	000c      	movs	r4, r1
 800545e:	0018      	movs	r0, r3
 8005460:	0021      	movs	r1, r4
 8005462:	f7fd fb7d 	bl	8002b60 <__aeabi_d2f>
 8005466:	1c03      	adds	r3, r0, #0
}
 8005468:	1c18      	adds	r0, r3, #0
 800546a:	46bd      	mov	sp, r7
 800546c:	b003      	add	sp, #12
 800546e:	bd90      	pop	{r4, r7, pc}
 8005470:	40040000 	.word	0x40040000
 8005474:	41600000 	.word	0x41600000

08005478 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b08b      	sub	sp, #44	; 0x2c
 800547c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800547e:	2414      	movs	r4, #20
 8005480:	193b      	adds	r3, r7, r4
 8005482:	0018      	movs	r0, r3
 8005484:	2314      	movs	r3, #20
 8005486:	001a      	movs	r2, r3
 8005488:	2100      	movs	r1, #0
 800548a:	f000 faab 	bl	80059e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800548e:	4b45      	ldr	r3, [pc, #276]	; (80055a4 <MX_GPIO_Init+0x12c>)
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	4b44      	ldr	r3, [pc, #272]	; (80055a4 <MX_GPIO_Init+0x12c>)
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	03c9      	lsls	r1, r1, #15
 8005498:	430a      	orrs	r2, r1
 800549a:	615a      	str	r2, [r3, #20]
 800549c:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <MX_GPIO_Init+0x12c>)
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	03db      	lsls	r3, r3, #15
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054aa:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054b0:	2180      	movs	r1, #128	; 0x80
 80054b2:	0289      	lsls	r1, r1, #10
 80054b4:	430a      	orrs	r2, r1
 80054b6:	615a      	str	r2, [r3, #20]
 80054b8:	4b3a      	ldr	r3, [pc, #232]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	029b      	lsls	r3, r3, #10
 80054c0:	4013      	ands	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054c8:	695a      	ldr	r2, [r3, #20]
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054cc:	2180      	movs	r1, #128	; 0x80
 80054ce:	0309      	lsls	r1, r1, #12
 80054d0:	430a      	orrs	r2, r1
 80054d2:	615a      	str	r2, [r3, #20]
 80054d4:	4b33      	ldr	r3, [pc, #204]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	031b      	lsls	r3, r3, #12
 80054dc:	4013      	ands	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054e8:	2180      	movs	r1, #128	; 0x80
 80054ea:	02c9      	lsls	r1, r1, #11
 80054ec:	430a      	orrs	r2, r1
 80054ee:	615a      	str	r2, [r3, #20]
 80054f0:	4b2c      	ldr	r3, [pc, #176]	; (80055a4 <MX_GPIO_Init+0x12c>)
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	02db      	lsls	r3, r3, #11
 80054f8:	4013      	ands	r3, r2
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 80054fe:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <MX_GPIO_Init+0x130>)
 8005500:	2201      	movs	r2, #1
 8005502:	2120      	movs	r1, #32
 8005504:	0018      	movs	r0, r3
 8005506:	f7fd fec5 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_START_Pin|ADC_RESET_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800550a:	23cc      	movs	r3, #204	; 0xcc
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4827      	ldr	r0, [pc, #156]	; (80055ac <MX_GPIO_Init+0x134>)
 8005510:	2200      	movs	r2, #0
 8005512:	0019      	movs	r1, r3
 8005514:	f7fd febe 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8005518:	0021      	movs	r1, r4
 800551a:	187b      	adds	r3, r7, r1
 800551c:	2220      	movs	r2, #32
 800551e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005520:	187b      	adds	r3, r7, r1
 8005522:	2201      	movs	r2, #1
 8005524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005526:	187b      	adds	r3, r7, r1
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552c:	187b      	adds	r3, r7, r1
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8005532:	000c      	movs	r4, r1
 8005534:	187b      	adds	r3, r7, r1
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <MX_GPIO_Init+0x130>)
 8005538:	0019      	movs	r1, r3
 800553a:	0010      	movs	r0, r2
 800553c:	f7fd fd36 	bl	8002fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_START_Pin|ADC_RESET_Pin|LD4_Pin|LD3_Pin;
 8005540:	0021      	movs	r1, r4
 8005542:	187b      	adds	r3, r7, r1
 8005544:	22cc      	movs	r2, #204	; 0xcc
 8005546:	0092      	lsls	r2, r2, #2
 8005548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800554a:	187b      	adds	r3, r7, r1
 800554c:	2201      	movs	r2, #1
 800554e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005550:	187b      	adds	r3, r7, r1
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005556:	187b      	adds	r3, r7, r1
 8005558:	2200      	movs	r2, #0
 800555a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800555c:	000c      	movs	r4, r1
 800555e:	187b      	adds	r3, r7, r1
 8005560:	4a12      	ldr	r2, [pc, #72]	; (80055ac <MX_GPIO_Init+0x134>)
 8005562:	0019      	movs	r1, r3
 8005564:	0010      	movs	r0, r2
 8005566:	f7fd fd21 	bl	8002fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 800556a:	0021      	movs	r1, r4
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005572:	187b      	adds	r3, r7, r1
 8005574:	4a0e      	ldr	r2, [pc, #56]	; (80055b0 <MX_GPIO_Init+0x138>)
 8005576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005578:	187b      	adds	r3, r7, r1
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 800557e:	187b      	adds	r3, r7, r1
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <MX_GPIO_Init+0x13c>)
 8005582:	0019      	movs	r1, r3
 8005584:	0010      	movs	r0, r2
 8005586:	f7fd fd11 	bl	8002fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800558a:	2200      	movs	r2, #0
 800558c:	2100      	movs	r1, #0
 800558e:	2005      	movs	r0, #5
 8005590:	f7fd fc94 	bl	8002ebc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8005594:	2005      	movs	r0, #5
 8005596:	f7fd fca6 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b00b      	add	sp, #44	; 0x2c
 80055a0:	bd90      	pop	{r4, r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	40021000 	.word	0x40021000
 80055a8:	48001400 	.word	0x48001400
 80055ac:	48000800 	.word	0x48000800
 80055b0:	10210000 	.word	0x10210000
 80055b4:	48000400 	.word	0x48000400

080055b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055be:	f7fd fb71 	bl	8002ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055c2:	f000 f841 	bl	8005648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055c6:	f7ff ff57 	bl	8005478 <MX_GPIO_Init>
  MX_SPI1_Init();
 80055ca:	f000 f88d 	bl	80056e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADCinit();
 80055ce:	f7ff fadd 	bl	8004b8c <ADCinit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  if(tempmeasurementstate==READY)
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <main+0x80>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <main+0x26>
  {
	  read_temperature();
 80055da:	f7ff fd43 	bl	8005064 <read_temperature>

  }//tempmeasurementstate;// = ready;

  while (1)
  {
	 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <main+0x84>)
 80055e4:	0019      	movs	r1, r3
 80055e6:	0010      	movs	r0, r2
 80055e8:	f7fd fe71 	bl	80032ce <HAL_GPIO_TogglePin>


	  for(uint8_t i=0; i<=4; i++)
 80055ec:	1dfb      	adds	r3, r7, #7
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e006      	b.n	8005602 <main+0x4a>
	  {
		  read_temperature();
 80055f4:	f7ff fd36 	bl	8005064 <read_temperature>
	  for(uint8_t i=0; i<=4; i++)
 80055f8:	1dfb      	adds	r3, r7, #7
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	1dfb      	adds	r3, r7, #7
 80055fe:	3201      	adds	r2, #1
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	1dfb      	adds	r3, r7, #7
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b04      	cmp	r3, #4
 8005608:	d9f4      	bls.n	80055f4 <main+0x3c>
	  }

	  if(tempmeasurementstate == NEWTEMP)
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <main+0x80>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d107      	bne.n	8005622 <main+0x6a>
	  {
		  f_measuredtemperature = read_temperature();
 8005612:	f7ff fd27 	bl	8005064 <read_temperature>
 8005616:	1c02      	adds	r2, r0, #0
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <main+0x88>)
 800561a:	601a      	str	r2, [r3, #0]
		  tempmeasurementstate = READY;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <main+0x80>)
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]

	  }


	  f_Channel3Measure=calcAnalogvoltage( readsingleADCChannel(3));
 8005622:	2003      	movs	r0, #3
 8005624:	f7ff fcfe 	bl	8005024 <readsingleADCChannel>
 8005628:	0003      	movs	r3, r0
 800562a:	0018      	movs	r0, r3
 800562c:	f7ff ff02 	bl	8005434 <calcAnalogvoltage>
 8005630:	1c02      	adds	r2, r0, #0
 8005632:	4b04      	ldr	r3, [pc, #16]	; (8005644 <main+0x8c>)
 8005634:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005636:	e7d2      	b.n	80055de <main+0x26>
 8005638:	20000018 	.word	0x20000018
 800563c:	48000800 	.word	0x48000800
 8005640:	200000c0 	.word	0x200000c0
 8005644:	200000bc 	.word	0x200000bc

08005648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005648:	b590      	push	{r4, r7, lr}
 800564a:	b091      	sub	sp, #68	; 0x44
 800564c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800564e:	2410      	movs	r4, #16
 8005650:	193b      	adds	r3, r7, r4
 8005652:	0018      	movs	r0, r3
 8005654:	2330      	movs	r3, #48	; 0x30
 8005656:	001a      	movs	r2, r3
 8005658:	2100      	movs	r1, #0
 800565a:	f000 f9c3 	bl	80059e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800565e:	003b      	movs	r3, r7
 8005660:	0018      	movs	r0, r3
 8005662:	2310      	movs	r3, #16
 8005664:	001a      	movs	r2, r3
 8005666:	2100      	movs	r1, #0
 8005668:	f000 f9bc 	bl	80059e4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800566c:	0021      	movs	r1, r4
 800566e:	187b      	adds	r3, r7, r1
 8005670:	2202      	movs	r2, #2
 8005672:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005674:	187b      	adds	r3, r7, r1
 8005676:	2201      	movs	r2, #1
 8005678:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800567a:	187b      	adds	r3, r7, r1
 800567c:	2210      	movs	r2, #16
 800567e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005680:	187b      	adds	r3, r7, r1
 8005682:	2202      	movs	r2, #2
 8005684:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005686:	187b      	adds	r3, r7, r1
 8005688:	2200      	movs	r2, #0
 800568a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800568c:	187b      	adds	r3, r7, r1
 800568e:	22a0      	movs	r2, #160	; 0xa0
 8005690:	0392      	lsls	r2, r2, #14
 8005692:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005694:	187b      	adds	r3, r7, r1
 8005696:	2200      	movs	r2, #0
 8005698:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800569a:	187b      	adds	r3, r7, r1
 800569c:	0018      	movs	r0, r3
 800569e:	f7fd fe4f 	bl	8003340 <HAL_RCC_OscConfig>
 80056a2:	1e03      	subs	r3, r0, #0
 80056a4:	d001      	beq.n	80056aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80056a6:	f000 f819 	bl	80056dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056aa:	003b      	movs	r3, r7
 80056ac:	2207      	movs	r2, #7
 80056ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056b0:	003b      	movs	r3, r7
 80056b2:	2202      	movs	r2, #2
 80056b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056b6:	003b      	movs	r3, r7
 80056b8:	2200      	movs	r2, #0
 80056ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056bc:	003b      	movs	r3, r7
 80056be:	2200      	movs	r2, #0
 80056c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80056c2:	003b      	movs	r3, r7
 80056c4:	2101      	movs	r1, #1
 80056c6:	0018      	movs	r0, r3
 80056c8:	f7fe f92e 	bl	8003928 <HAL_RCC_ClockConfig>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d001      	beq.n	80056d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80056d0:	f000 f804 	bl	80056dc <Error_Handler>
  }
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b011      	add	sp, #68	; 0x44
 80056da:	bd90      	pop	{r4, r7, pc}

080056dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80056e0:	46c0      	nop			; (mov r8, r8)
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	; (800575c <MX_SPI1_Init+0x74>)
 80056ee:	4a1c      	ldr	r2, [pc, #112]	; (8005760 <MX_SPI1_Init+0x78>)
 80056f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80056f2:	4b1a      	ldr	r3, [pc, #104]	; (800575c <MX_SPI1_Init+0x74>)
 80056f4:	2282      	movs	r2, #130	; 0x82
 80056f6:	0052      	lsls	r2, r2, #1
 80056f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80056fa:	4b18      	ldr	r3, [pc, #96]	; (800575c <MX_SPI1_Init+0x74>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005700:	4b16      	ldr	r3, [pc, #88]	; (800575c <MX_SPI1_Init+0x74>)
 8005702:	22e0      	movs	r2, #224	; 0xe0
 8005704:	00d2      	lsls	r2, r2, #3
 8005706:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <MX_SPI1_Init+0x74>)
 800570a:	2200      	movs	r2, #0
 800570c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <MX_SPI1_Init+0x74>)
 8005710:	2201      	movs	r2, #1
 8005712:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <MX_SPI1_Init+0x74>)
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	0092      	lsls	r2, r2, #2
 800571a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <MX_SPI1_Init+0x74>)
 800571e:	2218      	movs	r2, #24
 8005720:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005722:	4b0e      	ldr	r3, [pc, #56]	; (800575c <MX_SPI1_Init+0x74>)
 8005724:	2200      	movs	r2, #0
 8005726:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <MX_SPI1_Init+0x74>)
 800572a:	2200      	movs	r2, #0
 800572c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572e:	4b0b      	ldr	r3, [pc, #44]	; (800575c <MX_SPI1_Init+0x74>)
 8005730:	2200      	movs	r2, #0
 8005732:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005734:	4b09      	ldr	r3, [pc, #36]	; (800575c <MX_SPI1_Init+0x74>)
 8005736:	2207      	movs	r2, #7
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <MX_SPI1_Init+0x74>)
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005740:	4b06      	ldr	r3, [pc, #24]	; (800575c <MX_SPI1_Init+0x74>)
 8005742:	2200      	movs	r2, #0
 8005744:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005746:	4b05      	ldr	r3, [pc, #20]	; (800575c <MX_SPI1_Init+0x74>)
 8005748:	0018      	movs	r0, r3
 800574a:	f7fe fa43 	bl	8003bd4 <HAL_SPI_Init>
 800574e:	1e03      	subs	r3, r0, #0
 8005750:	d001      	beq.n	8005756 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005752:	f7ff ffc3 	bl	80056dc <Error_Handler>
  }

}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200000d8 	.word	0x200000d8
 8005760:	40013000 	.word	0x40013000

08005764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800576c:	2314      	movs	r3, #20
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	0018      	movs	r0, r3
 8005772:	2314      	movs	r3, #20
 8005774:	001a      	movs	r2, r3
 8005776:	2100      	movs	r1, #0
 8005778:	f000 f934 	bl	80059e4 <memset>
  if(spiHandle->Instance==SPI1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a20      	ldr	r2, [pc, #128]	; (8005804 <HAL_SPI_MspInit+0xa0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d13a      	bne.n	80057fc <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_SPI_MspInit+0xa4>)
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	4b1f      	ldr	r3, [pc, #124]	; (8005808 <HAL_SPI_MspInit+0xa4>)
 800578c:	2180      	movs	r1, #128	; 0x80
 800578e:	0149      	lsls	r1, r1, #5
 8005790:	430a      	orrs	r2, r1
 8005792:	619a      	str	r2, [r3, #24]
 8005794:	4b1c      	ldr	r3, [pc, #112]	; (8005808 <HAL_SPI_MspInit+0xa4>)
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	015b      	lsls	r3, r3, #5
 800579c:	4013      	ands	r3, r2
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_SPI_MspInit+0xa4>)
 80057a4:	695a      	ldr	r2, [r3, #20]
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <HAL_SPI_MspInit+0xa4>)
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	0289      	lsls	r1, r1, #10
 80057ac:	430a      	orrs	r2, r1
 80057ae:	615a      	str	r2, [r3, #20]
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_SPI_MspInit+0xa4>)
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80057be:	2114      	movs	r1, #20
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	22e0      	movs	r2, #224	; 0xe0
 80057c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	2202      	movs	r2, #2
 80057ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	2203      	movs	r2, #3
 80057d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057de:	187a      	adds	r2, r7, r1
 80057e0:	2390      	movs	r3, #144	; 0x90
 80057e2:	05db      	lsls	r3, r3, #23
 80057e4:	0011      	movs	r1, r2
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7fd fbe0 	bl	8002fac <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80057ec:	2200      	movs	r2, #0
 80057ee:	2100      	movs	r1, #0
 80057f0:	2019      	movs	r0, #25
 80057f2:	f7fd fb63 	bl	8002ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80057f6:	2019      	movs	r0, #25
 80057f8:	f7fd fb75 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80057fc:	46c0      	nop			; (mov r8, r8)
 80057fe:	46bd      	mov	sp, r7
 8005800:	b00a      	add	sp, #40	; 0x28
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40013000 	.word	0x40013000
 8005808:	40021000 	.word	0x40021000

0800580c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <HAL_MspInit+0x44>)
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_MspInit+0x44>)
 8005818:	2101      	movs	r1, #1
 800581a:	430a      	orrs	r2, r1
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <HAL_MspInit+0x44>)
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2201      	movs	r2, #1
 8005824:	4013      	ands	r3, r2
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_MspInit+0x44>)
 800582c:	69da      	ldr	r2, [r3, #28]
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_MspInit+0x44>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0549      	lsls	r1, r1, #21
 8005834:	430a      	orrs	r2, r1
 8005836:	61da      	str	r2, [r3, #28]
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_MspInit+0x44>)
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	055b      	lsls	r3, r3, #21
 8005840:	4013      	ands	r3, r2
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	46bd      	mov	sp, r7
 800584a:	b002      	add	sp, #8
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40021000 	.word	0x40021000

08005854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005862:	e7fe      	b.n	8005862 <HardFault_Handler+0x4>

08005864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800587c:	f7fd fa42 	bl	8002d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	ADC_DRDY_InputHandler();
 800588a:	f7ff f975 	bl	8004b78 <ADC_DRDY_InputHandler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800588e:	2001      	movs	r0, #1
 8005890:	f7fd fd30 	bl	80032f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80058a0:	4b03      	ldr	r3, [pc, #12]	; (80058b0 <SPI1_IRQHandler+0x14>)
 80058a2:	0018      	movs	r0, r3
 80058a4:	f7fe feee 	bl	8004684 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	200000d8 	.word	0x200000d8

080058b4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <SystemInit+0x70>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	4b19      	ldr	r3, [pc, #100]	; (8005924 <SystemInit+0x70>)
 80058be:	2101      	movs	r1, #1
 80058c0:	430a      	orrs	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <SystemInit+0x70>)
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	4b16      	ldr	r3, [pc, #88]	; (8005924 <SystemInit+0x70>)
 80058ca:	4917      	ldr	r1, [pc, #92]	; (8005928 <SystemInit+0x74>)
 80058cc:	400a      	ands	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80058d0:	4b14      	ldr	r3, [pc, #80]	; (8005924 <SystemInit+0x70>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b13      	ldr	r3, [pc, #76]	; (8005924 <SystemInit+0x70>)
 80058d6:	4915      	ldr	r1, [pc, #84]	; (800592c <SystemInit+0x78>)
 80058d8:	400a      	ands	r2, r1
 80058da:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80058dc:	4b11      	ldr	r3, [pc, #68]	; (8005924 <SystemInit+0x70>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b10      	ldr	r3, [pc, #64]	; (8005924 <SystemInit+0x70>)
 80058e2:	4913      	ldr	r1, [pc, #76]	; (8005930 <SystemInit+0x7c>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80058e8:	4b0e      	ldr	r3, [pc, #56]	; (8005924 <SystemInit+0x70>)
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <SystemInit+0x70>)
 80058ee:	4911      	ldr	r1, [pc, #68]	; (8005934 <SystemInit+0x80>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <SystemInit+0x70>)
 80058f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f8:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <SystemInit+0x70>)
 80058fa:	210f      	movs	r1, #15
 80058fc:	438a      	bics	r2, r1
 80058fe:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8005900:	4b08      	ldr	r3, [pc, #32]	; (8005924 <SystemInit+0x70>)
 8005902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005904:	4b07      	ldr	r3, [pc, #28]	; (8005924 <SystemInit+0x70>)
 8005906:	490c      	ldr	r1, [pc, #48]	; (8005938 <SystemInit+0x84>)
 8005908:	400a      	ands	r2, r1
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <SystemInit+0x70>)
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <SystemInit+0x70>)
 8005912:	2101      	movs	r1, #1
 8005914:	438a      	bics	r2, r1
 8005916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <SystemInit+0x70>)
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40021000 	.word	0x40021000
 8005928:	f8ffb80c 	.word	0xf8ffb80c
 800592c:	fef6ffff 	.word	0xfef6ffff
 8005930:	fffbffff 	.word	0xfffbffff
 8005934:	ffc0ffff 	.word	0xffc0ffff
 8005938:	fffffeac 	.word	0xfffffeac

0800593c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800593c:	480d      	ldr	r0, [pc, #52]	; (8005974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800593e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005940:	480d      	ldr	r0, [pc, #52]	; (8005978 <LoopForever+0x6>)
  ldr r1, =_edata
 8005942:	490e      	ldr	r1, [pc, #56]	; (800597c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005944:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <LoopForever+0xe>)
  movs r3, #0
 8005946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005948:	e002      	b.n	8005950 <LoopCopyDataInit>

0800594a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800594a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800594c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800594e:	3304      	adds	r3, #4

08005950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005954:	d3f9      	bcc.n	800594a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005956:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005958:	4c0b      	ldr	r4, [pc, #44]	; (8005988 <LoopForever+0x16>)
  movs r3, #0
 800595a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800595c:	e001      	b.n	8005962 <LoopFillZerobss>

0800595e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800595e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005960:	3204      	adds	r2, #4

08005962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005964:	d3fb      	bcc.n	800595e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005966:	f7ff ffa5 	bl	80058b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800596a:	f000 f817 	bl	800599c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800596e:	f7ff fe23 	bl	80055b8 <main>

08005972 <LoopForever>:

LoopForever:
    b LoopForever
 8005972:	e7fe      	b.n	8005972 <LoopForever>
  ldr   r0, =_estack
 8005974:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800597c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005980:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 8005984:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005988:	2000013c 	.word	0x2000013c

0800598c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800598c:	e7fe      	b.n	800598c <ADC1_COMP_IRQHandler>
	...

08005990 <__errno>:
 8005990:	4b01      	ldr	r3, [pc, #4]	; (8005998 <__errno+0x8>)
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	4770      	bx	lr
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	20000020 	.word	0x20000020

0800599c <__libc_init_array>:
 800599c:	b570      	push	{r4, r5, r6, lr}
 800599e:	2600      	movs	r6, #0
 80059a0:	4d0c      	ldr	r5, [pc, #48]	; (80059d4 <__libc_init_array+0x38>)
 80059a2:	4c0d      	ldr	r4, [pc, #52]	; (80059d8 <__libc_init_array+0x3c>)
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	42a6      	cmp	r6, r4
 80059aa:	d109      	bne.n	80059c0 <__libc_init_array+0x24>
 80059ac:	2600      	movs	r6, #0
 80059ae:	f000 f92f 	bl	8005c10 <_init>
 80059b2:	4d0a      	ldr	r5, [pc, #40]	; (80059dc <__libc_init_array+0x40>)
 80059b4:	4c0a      	ldr	r4, [pc, #40]	; (80059e0 <__libc_init_array+0x44>)
 80059b6:	1b64      	subs	r4, r4, r5
 80059b8:	10a4      	asrs	r4, r4, #2
 80059ba:	42a6      	cmp	r6, r4
 80059bc:	d105      	bne.n	80059ca <__libc_init_array+0x2e>
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	00b3      	lsls	r3, r6, #2
 80059c2:	58eb      	ldr	r3, [r5, r3]
 80059c4:	4798      	blx	r3
 80059c6:	3601      	adds	r6, #1
 80059c8:	e7ee      	b.n	80059a8 <__libc_init_array+0xc>
 80059ca:	00b3      	lsls	r3, r6, #2
 80059cc:	58eb      	ldr	r3, [r5, r3]
 80059ce:	4798      	blx	r3
 80059d0:	3601      	adds	r6, #1
 80059d2:	e7f2      	b.n	80059ba <__libc_init_array+0x1e>
 80059d4:	08005da4 	.word	0x08005da4
 80059d8:	08005da4 	.word	0x08005da4
 80059dc:	08005da4 	.word	0x08005da4
 80059e0:	08005da8 	.word	0x08005da8

080059e4 <memset>:
 80059e4:	0003      	movs	r3, r0
 80059e6:	1812      	adds	r2, r2, r0
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d100      	bne.n	80059ee <memset+0xa>
 80059ec:	4770      	bx	lr
 80059ee:	7019      	strb	r1, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	e7f9      	b.n	80059e8 <memset+0x4>

080059f4 <sqrt>:
 80059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f6:	b08f      	sub	sp, #60	; 0x3c
 80059f8:	0004      	movs	r4, r0
 80059fa:	000d      	movs	r5, r1
 80059fc:	f000 f854 	bl	8005aa8 <__ieee754_sqrt>
 8005a00:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <sqrt+0xac>)
 8005a02:	9000      	str	r0, [sp, #0]
 8005a04:	9101      	str	r1, [sp, #4]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	9302      	str	r3, [sp, #8]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d033      	beq.n	8005a78 <sqrt+0x84>
 8005a10:	0022      	movs	r2, r4
 8005a12:	002b      	movs	r3, r5
 8005a14:	0020      	movs	r0, r4
 8005a16:	0029      	movs	r1, r5
 8005a18:	f7fd f802 	bl	8002a20 <__aeabi_dcmpun>
 8005a1c:	9003      	str	r0, [sp, #12]
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d12a      	bne.n	8005a78 <sqrt+0x84>
 8005a22:	2600      	movs	r6, #0
 8005a24:	2700      	movs	r7, #0
 8005a26:	0032      	movs	r2, r6
 8005a28:	003b      	movs	r3, r7
 8005a2a:	0020      	movs	r0, r4
 8005a2c:	0029      	movs	r1, r5
 8005a2e:	f7fa fc0d 	bl	800024c <__aeabi_dcmplt>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d020      	beq.n	8005a78 <sqrt+0x84>
 8005a36:	2301      	movs	r3, #1
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	4b1a      	ldr	r3, [pc, #104]	; (8005aa4 <sqrt+0xb0>)
 8005a3c:	9408      	str	r4, [sp, #32]
 8005a3e:	9509      	str	r5, [sp, #36]	; 0x24
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	9406      	str	r4, [sp, #24]
 8005a46:	9507      	str	r5, [sp, #28]
 8005a48:	930c      	str	r3, [sp, #48]	; 0x30
 8005a4a:	9b02      	ldr	r3, [sp, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d117      	bne.n	8005a80 <sqrt+0x8c>
 8005a50:	960a      	str	r6, [sp, #40]	; 0x28
 8005a52:	970b      	str	r7, [sp, #44]	; 0x2c
 8005a54:	a804      	add	r0, sp, #16
 8005a56:	f000 f8d9 	bl	8005c0c <matherr>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d01b      	beq.n	8005a96 <sqrt+0xa2>
 8005a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a60:	9302      	str	r3, [sp, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <sqrt+0x7c>
 8005a66:	f7ff ff93 	bl	8005990 <__errno>
 8005a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a6c:	9302      	str	r3, [sp, #8]
 8005a6e:	6003      	str	r3, [r0, #0]
 8005a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	9401      	str	r4, [sp, #4]
 8005a78:	9800      	ldr	r0, [sp, #0]
 8005a7a:	9901      	ldr	r1, [sp, #4]
 8005a7c:	b00f      	add	sp, #60	; 0x3c
 8005a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a80:	003b      	movs	r3, r7
 8005a82:	0032      	movs	r2, r6
 8005a84:	0030      	movs	r0, r6
 8005a86:	0039      	movs	r1, r7
 8005a88:	f7fb fe06 	bl	8001698 <__aeabi_ddiv>
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	900a      	str	r0, [sp, #40]	; 0x28
 8005a90:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d1de      	bne.n	8005a54 <sqrt+0x60>
 8005a96:	f7ff ff7b 	bl	8005990 <__errno>
 8005a9a:	2321      	movs	r3, #33	; 0x21
 8005a9c:	6003      	str	r3, [r0, #0]
 8005a9e:	e7de      	b.n	8005a5e <sqrt+0x6a>
 8005aa0:	20000084 	.word	0x20000084
 8005aa4:	08005d9c 	.word	0x08005d9c

08005aa8 <__ieee754_sqrt>:
 8005aa8:	4b55      	ldr	r3, [pc, #340]	; (8005c00 <__ieee754_sqrt+0x158>)
 8005aaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aac:	001a      	movs	r2, r3
 8005aae:	0005      	movs	r5, r0
 8005ab0:	000c      	movs	r4, r1
 8005ab2:	400a      	ands	r2, r1
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d10f      	bne.n	8005ad8 <__ieee754_sqrt+0x30>
 8005ab8:	0002      	movs	r2, r0
 8005aba:	000b      	movs	r3, r1
 8005abc:	f7fc f9f6 	bl	8001eac <__aeabi_dmul>
 8005ac0:	0002      	movs	r2, r0
 8005ac2:	000b      	movs	r3, r1
 8005ac4:	0028      	movs	r0, r5
 8005ac6:	0021      	movs	r1, r4
 8005ac8:	f7fb faca 	bl	8001060 <__aeabi_dadd>
 8005acc:	0005      	movs	r5, r0
 8005ace:	000c      	movs	r4, r1
 8005ad0:	0028      	movs	r0, r5
 8005ad2:	0021      	movs	r1, r4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ad8:	0002      	movs	r2, r0
 8005ada:	2900      	cmp	r1, #0
 8005adc:	dc10      	bgt.n	8005b00 <__ieee754_sqrt+0x58>
 8005ade:	004b      	lsls	r3, r1, #1
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	4303      	orrs	r3, r0
 8005ae4:	d0f4      	beq.n	8005ad0 <__ieee754_sqrt+0x28>
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	4281      	cmp	r1, r0
 8005aea:	d100      	bne.n	8005aee <__ieee754_sqrt+0x46>
 8005aec:	e07f      	b.n	8005bee <__ieee754_sqrt+0x146>
 8005aee:	000b      	movs	r3, r1
 8005af0:	0028      	movs	r0, r5
 8005af2:	f7fc fc4d 	bl	8002390 <__aeabi_dsub>
 8005af6:	0002      	movs	r2, r0
 8005af8:	000b      	movs	r3, r1
 8005afa:	f7fb fdcd 	bl	8001698 <__aeabi_ddiv>
 8005afe:	e7e5      	b.n	8005acc <__ieee754_sqrt+0x24>
 8005b00:	1508      	asrs	r0, r1, #20
 8005b02:	d074      	beq.n	8005bee <__ieee754_sqrt+0x146>
 8005b04:	4b3f      	ldr	r3, [pc, #252]	; (8005c04 <__ieee754_sqrt+0x15c>)
 8005b06:	0309      	lsls	r1, r1, #12
 8005b08:	18c0      	adds	r0, r0, r3
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	0b09      	lsrs	r1, r1, #12
 8005b0e:	035b      	lsls	r3, r3, #13
 8005b10:	4319      	orrs	r1, r3
 8005b12:	07c3      	lsls	r3, r0, #31
 8005b14:	d503      	bpl.n	8005b1e <__ieee754_sqrt+0x76>
 8005b16:	0fd3      	lsrs	r3, r2, #31
 8005b18:	0049      	lsls	r1, r1, #1
 8005b1a:	18c9      	adds	r1, r1, r3
 8005b1c:	0052      	lsls	r2, r2, #1
 8005b1e:	2400      	movs	r4, #0
 8005b20:	1043      	asrs	r3, r0, #1
 8005b22:	0049      	lsls	r1, r1, #1
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	2580      	movs	r5, #128	; 0x80
 8005b28:	0fd3      	lsrs	r3, r2, #31
 8005b2a:	18cb      	adds	r3, r1, r3
 8005b2c:	0020      	movs	r0, r4
 8005b2e:	2116      	movs	r1, #22
 8005b30:	0052      	lsls	r2, r2, #1
 8005b32:	03ad      	lsls	r5, r5, #14
 8005b34:	1946      	adds	r6, r0, r5
 8005b36:	429e      	cmp	r6, r3
 8005b38:	dc02      	bgt.n	8005b40 <__ieee754_sqrt+0x98>
 8005b3a:	1970      	adds	r0, r6, r5
 8005b3c:	1b9b      	subs	r3, r3, r6
 8005b3e:	1964      	adds	r4, r4, r5
 8005b40:	0fd6      	lsrs	r6, r2, #31
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	3901      	subs	r1, #1
 8005b46:	199b      	adds	r3, r3, r6
 8005b48:	0052      	lsls	r2, r2, #1
 8005b4a:	086d      	lsrs	r5, r5, #1
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	d1f1      	bne.n	8005b34 <__ieee754_sqrt+0x8c>
 8005b50:	2520      	movs	r5, #32
 8005b52:	2680      	movs	r6, #128	; 0x80
 8005b54:	46ac      	mov	ip, r5
 8005b56:	9100      	str	r1, [sp, #0]
 8005b58:	0636      	lsls	r6, r6, #24
 8005b5a:	9d00      	ldr	r5, [sp, #0]
 8005b5c:	1977      	adds	r7, r6, r5
 8005b5e:	4283      	cmp	r3, r0
 8005b60:	dc02      	bgt.n	8005b68 <__ieee754_sqrt+0xc0>
 8005b62:	d112      	bne.n	8005b8a <__ieee754_sqrt+0xe2>
 8005b64:	4297      	cmp	r7, r2
 8005b66:	d810      	bhi.n	8005b8a <__ieee754_sqrt+0xe2>
 8005b68:	19bd      	adds	r5, r7, r6
 8005b6a:	9500      	str	r5, [sp, #0]
 8005b6c:	0005      	movs	r5, r0
 8005b6e:	2f00      	cmp	r7, #0
 8005b70:	da03      	bge.n	8005b7a <__ieee754_sqrt+0xd2>
 8005b72:	9d00      	ldr	r5, [sp, #0]
 8005b74:	43ed      	mvns	r5, r5
 8005b76:	0fed      	lsrs	r5, r5, #31
 8005b78:	1945      	adds	r5, r0, r5
 8005b7a:	1a1b      	subs	r3, r3, r0
 8005b7c:	42ba      	cmp	r2, r7
 8005b7e:	4180      	sbcs	r0, r0
 8005b80:	4240      	negs	r0, r0
 8005b82:	1a1b      	subs	r3, r3, r0
 8005b84:	0028      	movs	r0, r5
 8005b86:	1bd2      	subs	r2, r2, r7
 8005b88:	1989      	adds	r1, r1, r6
 8005b8a:	0fd5      	lsrs	r5, r2, #31
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	18eb      	adds	r3, r5, r3
 8005b90:	2501      	movs	r5, #1
 8005b92:	426d      	negs	r5, r5
 8005b94:	44ac      	add	ip, r5
 8005b96:	4665      	mov	r5, ip
 8005b98:	0052      	lsls	r2, r2, #1
 8005b9a:	0876      	lsrs	r6, r6, #1
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d1dc      	bne.n	8005b5a <__ieee754_sqrt+0xb2>
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d003      	beq.n	8005bac <__ieee754_sqrt+0x104>
 8005ba4:	1c4b      	adds	r3, r1, #1
 8005ba6:	d127      	bne.n	8005bf8 <__ieee754_sqrt+0x150>
 8005ba8:	4661      	mov	r1, ip
 8005baa:	3401      	adds	r4, #1
 8005bac:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <__ieee754_sqrt+0x160>)
 8005bae:	1060      	asrs	r0, r4, #1
 8005bb0:	18c0      	adds	r0, r0, r3
 8005bb2:	0849      	lsrs	r1, r1, #1
 8005bb4:	07e3      	lsls	r3, r4, #31
 8005bb6:	d502      	bpl.n	8005bbe <__ieee754_sqrt+0x116>
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	4319      	orrs	r1, r3
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	000d      	movs	r5, r1
 8005bc2:	051c      	lsls	r4, r3, #20
 8005bc4:	1823      	adds	r3, r4, r0
 8005bc6:	001c      	movs	r4, r3
 8005bc8:	e782      	b.n	8005ad0 <__ieee754_sqrt+0x28>
 8005bca:	0ad1      	lsrs	r1, r2, #11
 8005bcc:	3b15      	subs	r3, #21
 8005bce:	0552      	lsls	r2, r2, #21
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	d0fa      	beq.n	8005bca <__ieee754_sqrt+0x122>
 8005bd4:	2480      	movs	r4, #128	; 0x80
 8005bd6:	0364      	lsls	r4, r4, #13
 8005bd8:	4221      	tst	r1, r4
 8005bda:	d00a      	beq.n	8005bf2 <__ieee754_sqrt+0x14a>
 8005bdc:	2420      	movs	r4, #32
 8005bde:	0016      	movs	r6, r2
 8005be0:	1a24      	subs	r4, r4, r0
 8005be2:	40e6      	lsrs	r6, r4
 8005be4:	1e45      	subs	r5, r0, #1
 8005be6:	4082      	lsls	r2, r0
 8005be8:	4331      	orrs	r1, r6
 8005bea:	1b58      	subs	r0, r3, r5
 8005bec:	e78a      	b.n	8005b04 <__ieee754_sqrt+0x5c>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e7ee      	b.n	8005bd0 <__ieee754_sqrt+0x128>
 8005bf2:	0049      	lsls	r1, r1, #1
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	e7ef      	b.n	8005bd8 <__ieee754_sqrt+0x130>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	3101      	adds	r1, #1
 8005bfc:	4399      	bics	r1, r3
 8005bfe:	e7d5      	b.n	8005bac <__ieee754_sqrt+0x104>
 8005c00:	7ff00000 	.word	0x7ff00000
 8005c04:	fffffc01 	.word	0xfffffc01
 8005c08:	3fe00000 	.word	0x3fe00000

08005c0c <matherr>:
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	4770      	bx	lr

08005c10 <_init>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr

08005c1c <_fini>:
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c22:	bc08      	pop	{r3}
 8005c24:	469e      	mov	lr, r3
 8005c26:	4770      	bx	lr
