
BuP_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002890  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002980  08002980  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002980  08002980  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000004  0800298c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  0800298c  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b935  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab6  00000000  00000000  0002b961  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002d418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000550  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ec12  00000000  00000000  0002df80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007731  00000000  00000000  0003cb92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004c50f  00000000  00000000  000442c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000907d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013d4  00000000  00000000  00090850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002938 	.word	0x08002938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002938 	.word	0x08002938

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fa9b 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ff6a 	bl	8001128 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004a4:	230f      	movs	r3, #15
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2221      	movs	r2, #33	; 0x21
 80004b0:	5c9b      	ldrb	r3, [r3, r2]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d007      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2204      	movs	r2, #4
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004be:	230f      	movs	r3, #15
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	e028      	b.n	800051a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	210e      	movs	r1, #14
 80004d4:	438a      	bics	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2101      	movs	r1, #1
 80004e4:	438a      	bics	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	2101      	movs	r1, #1
 80004f2:	4091      	lsls	r1, r2
 80004f4:	000a      	movs	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2221      	movs	r2, #33	; 0x21
 80004fc:	2101      	movs	r1, #1
 80004fe:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050c:	2b00      	cmp	r3, #0
 800050e:	d004      	beq.n	800051a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	0010      	movs	r0, r2
 8000518:	4798      	blx	r3
    } 
  }
  return status;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800053e:	e14f      	b.n	80007e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	4091      	lsls	r1, r2
 800054a:	000a      	movs	r2, r1
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <HAL_GPIO_Init+0x30>
 8000556:	e140      	b.n	80007da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d003      	beq.n	8000568 <HAL_GPIO_Init+0x40>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b12      	cmp	r3, #18
 8000566:	d123      	bne.n	80005b0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	08da      	lsrs	r2, r3, #3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3208      	adds	r2, #8
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	58d3      	ldr	r3, [r2, r3]
 8000574:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2207      	movs	r2, #7
 800057a:	4013      	ands	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	220f      	movs	r2, #15
 8000580:	409a      	lsls	r2, r3
 8000582:	0013      	movs	r3, r2
 8000584:	43da      	mvns	r2, r3
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	691a      	ldr	r2, [r3, #16]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2107      	movs	r1, #7
 8000594:	400b      	ands	r3, r1
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	08da      	lsrs	r2, r3, #3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3208      	adds	r2, #8
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	6939      	ldr	r1, [r7, #16]
 80005ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2203      	movs	r2, #3
 80005bc:	409a      	lsls	r2, r3
 80005be:	0013      	movs	r3, r2
 80005c0:	43da      	mvns	r2, r3
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	4013      	ands	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2203      	movs	r2, #3
 80005ce:	401a      	ands	r2, r3
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0013      	movs	r3, r2
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	4313      	orrs	r3, r2
 80005dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00b      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d007      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005f8:	2b11      	cmp	r3, #17
 80005fa:	d003      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b12      	cmp	r3, #18
 8000602:	d130      	bne.n	8000666 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	409a      	lsls	r2, r3
 8000626:	0013      	movs	r3, r2
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800063a:	2201      	movs	r2, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	409a      	lsls	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	43da      	mvns	r2, r3
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	2201      	movs	r2, #1
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2203      	movs	r2, #3
 8000672:	409a      	lsls	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	43da      	mvns	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	409a      	lsls	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4313      	orrs	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	055b      	lsls	r3, r3, #21
 800069e:	4013      	ands	r3, r2
 80006a0:	d100      	bne.n	80006a4 <HAL_GPIO_Init+0x17c>
 80006a2:	e09a      	b.n	80007da <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4013      	ands	r3, r2
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80006bc:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <HAL_GPIO_Init+0x2d4>)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	089b      	lsrs	r3, r3, #2
 80006c2:	3302      	adds	r3, #2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	589b      	ldr	r3, [r3, r2]
 80006c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2203      	movs	r2, #3
 80006ce:	4013      	ands	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	220f      	movs	r2, #15
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0013      	movs	r3, r2
 80006d8:	43da      	mvns	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	2390      	movs	r3, #144	; 0x90
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d013      	beq.n	8000712 <HAL_GPIO_Init+0x1ea>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a44      	ldr	r2, [pc, #272]	; (8000800 <HAL_GPIO_Init+0x2d8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d00d      	beq.n	800070e <HAL_GPIO_Init+0x1e6>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a43      	ldr	r2, [pc, #268]	; (8000804 <HAL_GPIO_Init+0x2dc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d007      	beq.n	800070a <HAL_GPIO_Init+0x1e2>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a42      	ldr	r2, [pc, #264]	; (8000808 <HAL_GPIO_Init+0x2e0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_GPIO_Init+0x1de>
 8000702:	2303      	movs	r3, #3
 8000704:	e006      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 8000706:	2305      	movs	r3, #5
 8000708:	e004      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 800070a:	2302      	movs	r3, #2
 800070c:	e002      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 8000712:	2300      	movs	r3, #0
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	2103      	movs	r1, #3
 8000718:	400a      	ands	r2, r1
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	4093      	lsls	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000724:	4935      	ldr	r1, [pc, #212]	; (80007fc <HAL_GPIO_Init+0x2d4>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	3302      	adds	r3, #2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	43da      	mvns	r2, r3
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	4013      	ands	r3, r2
 8000740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	025b      	lsls	r3, r3, #9
 800074a:	4013      	ands	r3, r2
 800074c:	d003      	beq.n	8000756 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <HAL_GPIO_Init+0x2e4>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	43da      	mvns	r2, r3
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	029b      	lsls	r3, r3, #10
 8000774:	4013      	ands	r3, r2
 8000776:	d003      	beq.n	8000780 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4313      	orrs	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	43da      	mvns	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	035b      	lsls	r3, r3, #13
 800079e:	4013      	ands	r3, r2
 80007a0:	d003      	beq.n	80007aa <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	43da      	mvns	r2, r3
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	039b      	lsls	r3, r3, #14
 80007c8:	4013      	ands	r3, r2
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	40da      	lsrs	r2, r3
 80007e8:	1e13      	subs	r3, r2, #0
 80007ea:	d000      	beq.n	80007ee <HAL_GPIO_Init+0x2c6>
 80007ec:	e6a8      	b.n	8000540 <HAL_GPIO_Init+0x18>
  } 
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b006      	add	sp, #24
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000
 8000800:	48000400 	.word	0x48000400
 8000804:	48000800 	.word	0x48000800
 8000808:	48000c00 	.word	0x48000c00
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	000a      	movs	r2, r1
 800081a:	1cbb      	adds	r3, r7, #2
 800081c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	1cba      	adds	r2, r7, #2
 8000824:	8812      	ldrh	r2, [r2, #0]
 8000826:	4013      	ands	r3, r2
 8000828:	d004      	beq.n	8000834 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800082a:	230f      	movs	r3, #15
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	e003      	b.n	800083c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000834:	230f      	movs	r3, #15
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800083c:	230f      	movs	r3, #15
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	781b      	ldrb	r3, [r3, #0]
  }
 8000842:	0018      	movs	r0, r3
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	0008      	movs	r0, r1
 8000854:	0011      	movs	r1, r2
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	1c02      	adds	r2, r0, #0
 800085a:	801a      	strh	r2, [r3, #0]
 800085c:	1c7b      	adds	r3, r7, #1
 800085e:	1c0a      	adds	r2, r1, #0
 8000860:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000862:	1c7b      	adds	r3, r7, #1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800086a:	1cbb      	adds	r3, r7, #2
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000872:	e003      	b.n	800087c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000874:	1cbb      	adds	r3, r7, #2
 8000876:	881a      	ldrh	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b002      	add	sp, #8
 8000882:	bd80      	pop	{r7, pc}

08000884 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	000a      	movs	r2, r1
 800088e:	1cbb      	adds	r3, r7, #2
 8000890:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	1cbb      	adds	r3, r7, #2
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	405a      	eors	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	615a      	str	r2, [r3, #20]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	d100      	bne.n	80008c0 <HAL_RCC_OscConfig+0x18>
 80008be:	e08d      	b.n	80009dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008c0:	4bc3      	ldr	r3, [pc, #780]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	220c      	movs	r2, #12
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d00e      	beq.n	80008ea <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008cc:	4bc0      	ldr	r3, [pc, #768]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	220c      	movs	r2, #12
 80008d2:	4013      	ands	r3, r2
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d116      	bne.n	8000906 <HAL_RCC_OscConfig+0x5e>
 80008d8:	4bbd      	ldr	r3, [pc, #756]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	025b      	lsls	r3, r3, #9
 80008e0:	401a      	ands	r2, r3
 80008e2:	2380      	movs	r3, #128	; 0x80
 80008e4:	025b      	lsls	r3, r3, #9
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d10d      	bne.n	8000906 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008ea:	4bb9      	ldr	r3, [pc, #740]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	029b      	lsls	r3, r3, #10
 80008f2:	4013      	ands	r3, r2
 80008f4:	d100      	bne.n	80008f8 <HAL_RCC_OscConfig+0x50>
 80008f6:	e070      	b.n	80009da <HAL_RCC_OscConfig+0x132>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d000      	beq.n	8000902 <HAL_RCC_OscConfig+0x5a>
 8000900:	e06b      	b.n	80009da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e2b6      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d107      	bne.n	800091e <HAL_RCC_OscConfig+0x76>
 800090e:	4bb0      	ldr	r3, [pc, #704]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4baf      	ldr	r3, [pc, #700]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0249      	lsls	r1, r1, #9
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e02f      	b.n	800097e <HAL_RCC_OscConfig+0xd6>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0x98>
 8000926:	4baa      	ldr	r3, [pc, #680]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4ba9      	ldr	r3, [pc, #676]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 800092c:	49a9      	ldr	r1, [pc, #676]	; (8000bd4 <HAL_RCC_OscConfig+0x32c>)
 800092e:	400a      	ands	r2, r1
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	4ba7      	ldr	r3, [pc, #668]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	4ba6      	ldr	r3, [pc, #664]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000938:	49a7      	ldr	r1, [pc, #668]	; (8000bd8 <HAL_RCC_OscConfig+0x330>)
 800093a:	400a      	ands	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	e01e      	b.n	800097e <HAL_RCC_OscConfig+0xd6>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	2b05      	cmp	r3, #5
 8000946:	d10e      	bne.n	8000966 <HAL_RCC_OscConfig+0xbe>
 8000948:	4ba1      	ldr	r3, [pc, #644]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4ba0      	ldr	r3, [pc, #640]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	02c9      	lsls	r1, r1, #11
 8000952:	430a      	orrs	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	4b9e      	ldr	r3, [pc, #632]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b9d      	ldr	r3, [pc, #628]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0249      	lsls	r1, r1, #9
 8000960:	430a      	orrs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	e00b      	b.n	800097e <HAL_RCC_OscConfig+0xd6>
 8000966:	4b9a      	ldr	r3, [pc, #616]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4b99      	ldr	r3, [pc, #612]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 800096c:	4999      	ldr	r1, [pc, #612]	; (8000bd4 <HAL_RCC_OscConfig+0x32c>)
 800096e:	400a      	ands	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	4b97      	ldr	r3, [pc, #604]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b96      	ldr	r3, [pc, #600]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000978:	4997      	ldr	r1, [pc, #604]	; (8000bd8 <HAL_RCC_OscConfig+0x330>)
 800097a:	400a      	ands	r2, r1
 800097c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d014      	beq.n	80009b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000986:	f7ff fc87 	bl	8000298 <HAL_GetTick>
 800098a:	0003      	movs	r3, r0
 800098c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098e:	e008      	b.n	80009a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000990:	f7ff fc82 	bl	8000298 <HAL_GetTick>
 8000994:	0002      	movs	r2, r0
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b64      	cmp	r3, #100	; 0x64
 800099c:	d901      	bls.n	80009a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800099e:	2303      	movs	r3, #3
 80009a0:	e268      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a2:	4b8b      	ldr	r3, [pc, #556]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	029b      	lsls	r3, r3, #10
 80009aa:	4013      	ands	r3, r2
 80009ac:	d0f0      	beq.n	8000990 <HAL_RCC_OscConfig+0xe8>
 80009ae:	e015      	b.n	80009dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b0:	f7ff fc72 	bl	8000298 <HAL_GetTick>
 80009b4:	0003      	movs	r3, r0
 80009b6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009b8:	e008      	b.n	80009cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ba:	f7ff fc6d 	bl	8000298 <HAL_GetTick>
 80009be:	0002      	movs	r2, r0
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	2b64      	cmp	r3, #100	; 0x64
 80009c6:	d901      	bls.n	80009cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80009c8:	2303      	movs	r3, #3
 80009ca:	e253      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009cc:	4b80      	ldr	r3, [pc, #512]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	029b      	lsls	r3, r3, #10
 80009d4:	4013      	ands	r3, r2
 80009d6:	d1f0      	bne.n	80009ba <HAL_RCC_OscConfig+0x112>
 80009d8:	e000      	b.n	80009dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2202      	movs	r2, #2
 80009e2:	4013      	ands	r3, r2
 80009e4:	d100      	bne.n	80009e8 <HAL_RCC_OscConfig+0x140>
 80009e6:	e069      	b.n	8000abc <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009e8:	4b79      	ldr	r3, [pc, #484]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	220c      	movs	r2, #12
 80009ee:	4013      	ands	r3, r2
 80009f0:	d00b      	beq.n	8000a0a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009f2:	4b77      	ldr	r3, [pc, #476]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	220c      	movs	r2, #12
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d11c      	bne.n	8000a38 <HAL_RCC_OscConfig+0x190>
 80009fe:	4b74      	ldr	r3, [pc, #464]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	4013      	ands	r3, r2
 8000a08:	d116      	bne.n	8000a38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a0a:	4b71      	ldr	r3, [pc, #452]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	d005      	beq.n	8000a20 <HAL_RCC_OscConfig+0x178>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d001      	beq.n	8000a20 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e229      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a20:	4b6b      	ldr	r3, [pc, #428]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	22f8      	movs	r2, #248	; 0xf8
 8000a26:	4393      	bics	r3, r2
 8000a28:	0019      	movs	r1, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	00da      	lsls	r2, r3, #3
 8000a30:	4b67      	ldr	r3, [pc, #412]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a36:	e041      	b.n	8000abc <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d024      	beq.n	8000a8a <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a40:	4b63      	ldr	r3, [pc, #396]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a4c:	f7ff fc24 	bl	8000298 <HAL_GetTick>
 8000a50:	0003      	movs	r3, r0
 8000a52:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a54:	e008      	b.n	8000a68 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a56:	f7ff fc1f 	bl	8000298 <HAL_GetTick>
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d901      	bls.n	8000a68 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000a64:	2303      	movs	r3, #3
 8000a66:	e205      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a68:	4b59      	ldr	r3, [pc, #356]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	4013      	ands	r3, r2
 8000a70:	d0f1      	beq.n	8000a56 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	4b57      	ldr	r3, [pc, #348]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	22f8      	movs	r2, #248	; 0xf8
 8000a78:	4393      	bics	r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	00da      	lsls	r2, r3, #3
 8000a82:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a84:	430a      	orrs	r2, r1
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	e018      	b.n	8000abc <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a8a:	4b51      	ldr	r3, [pc, #324]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b50      	ldr	r3, [pc, #320]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	438a      	bics	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a96:	f7ff fbff 	bl	8000298 <HAL_GetTick>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fbfa 	bl	8000298 <HAL_GetTick>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e1e0      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ab2:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	d1f1      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	d036      	beq.n	8000b34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d019      	beq.n	8000b02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ada:	f7ff fbdd 	bl	8000298 <HAL_GetTick>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ae2:	e008      	b.n	8000af6 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae4:	f7ff fbd8 	bl	8000298 <HAL_GetTick>
 8000ae8:	0002      	movs	r2, r0
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d901      	bls.n	8000af6 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000af2:	2303      	movs	r3, #3
 8000af4:	e1be      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000af6:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	2202      	movs	r2, #2
 8000afc:	4013      	ands	r3, r2
 8000afe:	d0f1      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x23c>
 8000b00:	e018      	b.n	8000b34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b02:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b0e:	f7ff fbc3 	bl	8000298 <HAL_GetTick>
 8000b12:	0003      	movs	r3, r0
 8000b14:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b16:	e008      	b.n	8000b2a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b18:	f7ff fbbe 	bl	8000298 <HAL_GetTick>
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d901      	bls.n	8000b2a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e1a4      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b2a:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2e:	2202      	movs	r2, #2
 8000b30:	4013      	ands	r3, r2
 8000b32:	d1f1      	bne.n	8000b18 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d100      	bne.n	8000b40 <HAL_RCC_OscConfig+0x298>
 8000b3e:	e0b5      	b.n	8000cac <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b40:	2317      	movs	r3, #23
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b4a:	69da      	ldr	r2, [r3, #28]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	055b      	lsls	r3, r3, #21
 8000b50:	4013      	ands	r3, r2
 8000b52:	d111      	bne.n	8000b78 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b56:	69da      	ldr	r2, [r3, #28]
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b5a:	2180      	movs	r1, #128	; 0x80
 8000b5c:	0549      	lsls	r1, r1, #21
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	61da      	str	r2, [r3, #28]
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000b64:	69da      	ldr	r2, [r3, #28]
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	055b      	lsls	r3, r3, #21
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b70:	2317      	movs	r3, #23
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_RCC_OscConfig+0x334>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	d11a      	bne.n	8000bba <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_RCC_OscConfig+0x334>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_RCC_OscConfig+0x334>)
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	0049      	lsls	r1, r1, #1
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b92:	f7ff fb81 	bl	8000298 <HAL_GetTick>
 8000b96:	0003      	movs	r3, r0
 8000b98:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b9a:	e008      	b.n	8000bae <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b9c:	f7ff fb7c 	bl	8000298 <HAL_GetTick>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b64      	cmp	r3, #100	; 0x64
 8000ba8:	d901      	bls.n	8000bae <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e162      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_RCC_OscConfig+0x334>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d0f0      	beq.n	8000b9c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d10e      	bne.n	8000be0 <HAL_RCC_OscConfig+0x338>
 8000bc2:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000bc4:	6a1a      	ldr	r2, [r3, #32]
 8000bc6:	4b02      	ldr	r3, [pc, #8]	; (8000bd0 <HAL_RCC_OscConfig+0x328>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	621a      	str	r2, [r3, #32]
 8000bce:	e035      	b.n	8000c3c <HAL_RCC_OscConfig+0x394>
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	fffeffff 	.word	0xfffeffff
 8000bd8:	fffbffff 	.word	0xfffbffff
 8000bdc:	40007000 	.word	0x40007000
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10c      	bne.n	8000c02 <HAL_RCC_OscConfig+0x35a>
 8000be8:	4ba4      	ldr	r3, [pc, #656]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000bea:	6a1a      	ldr	r2, [r3, #32]
 8000bec:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	438a      	bics	r2, r1
 8000bf2:	621a      	str	r2, [r3, #32]
 8000bf4:	4ba1      	ldr	r3, [pc, #644]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000bf6:	6a1a      	ldr	r2, [r3, #32]
 8000bf8:	4ba0      	ldr	r3, [pc, #640]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	438a      	bics	r2, r1
 8000bfe:	621a      	str	r2, [r3, #32]
 8000c00:	e01c      	b.n	8000c3c <HAL_RCC_OscConfig+0x394>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x37c>
 8000c0a:	4b9c      	ldr	r3, [pc, #624]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	4b9b      	ldr	r3, [pc, #620]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c10:	2104      	movs	r1, #4
 8000c12:	430a      	orrs	r2, r1
 8000c14:	621a      	str	r2, [r3, #32]
 8000c16:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c18:	6a1a      	ldr	r2, [r3, #32]
 8000c1a:	4b98      	ldr	r3, [pc, #608]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	621a      	str	r2, [r3, #32]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0x394>
 8000c24:	4b95      	ldr	r3, [pc, #596]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c26:	6a1a      	ldr	r2, [r3, #32]
 8000c28:	4b94      	ldr	r3, [pc, #592]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	438a      	bics	r2, r1
 8000c2e:	621a      	str	r2, [r3, #32]
 8000c30:	4b92      	ldr	r3, [pc, #584]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c36:	2104      	movs	r1, #4
 8000c38:	438a      	bics	r2, r1
 8000c3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d014      	beq.n	8000c6e <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c44:	f7ff fb28 	bl	8000298 <HAL_GetTick>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4c:	e009      	b.n	8000c62 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c4e:	f7ff fb23 	bl	8000298 <HAL_GetTick>
 8000c52:	0002      	movs	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	4a89      	ldr	r2, [pc, #548]	; (8000e80 <HAL_RCC_OscConfig+0x5d8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e108      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c62:	4b86      	ldr	r3, [pc, #536]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	2202      	movs	r2, #2
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x3a6>
 8000c6c:	e013      	b.n	8000c96 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c6e:	f7ff fb13 	bl	8000298 <HAL_GetTick>
 8000c72:	0003      	movs	r3, r0
 8000c74:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c76:	e009      	b.n	8000c8c <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c78:	f7ff fb0e 	bl	8000298 <HAL_GetTick>
 8000c7c:	0002      	movs	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	4a7f      	ldr	r2, [pc, #508]	; (8000e80 <HAL_RCC_OscConfig+0x5d8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e0f3      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c8c:	4b7b      	ldr	r3, [pc, #492]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000c8e:	6a1b      	ldr	r3, [r3, #32]
 8000c90:	2202      	movs	r2, #2
 8000c92:	4013      	ands	r3, r2
 8000c94:	d1f0      	bne.n	8000c78 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c96:	2317      	movs	r3, #23
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ca0:	4b76      	ldr	r3, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000ca2:	69da      	ldr	r2, [r3, #28]
 8000ca4:	4b75      	ldr	r3, [pc, #468]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000ca6:	4977      	ldr	r1, [pc, #476]	; (8000e84 <HAL_RCC_OscConfig+0x5dc>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2210      	movs	r2, #16
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	d063      	beq.n	8000d7e <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d12a      	bne.n	8000d14 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cbe:	4b6f      	ldr	r3, [pc, #444]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc2:	4b6e      	ldr	r3, [pc, #440]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	4b6b      	ldr	r3, [pc, #428]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fadf 	bl	8000298 <HAL_GetTick>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ce0:	f7ff fada 	bl	8000298 <HAL_GetTick>
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e0c0      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d0f1      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cfc:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d00:	22f8      	movs	r2, #248	; 0xf8
 8000d02:	4393      	bics	r3, r2
 8000d04:	0019      	movs	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	00da      	lsls	r2, r3, #3
 8000d0c:	4b5b      	ldr	r3, [pc, #364]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
 8000d12:	e034      	b.n	8000d7e <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	3305      	adds	r3, #5
 8000d1a:	d111      	bne.n	8000d40 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d1c:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d20:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d22:	2104      	movs	r1, #4
 8000d24:	438a      	bics	r2, r1
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d28:	4b54      	ldr	r3, [pc, #336]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2c:	22f8      	movs	r2, #248	; 0xf8
 8000d2e:	4393      	bics	r3, r2
 8000d30:	0019      	movs	r1, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	00da      	lsls	r2, r3, #3
 8000d38:	4b50      	ldr	r3, [pc, #320]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d3e:	e01e      	b.n	8000d7e <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d40:	4b4e      	ldr	r3, [pc, #312]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d44:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d46:	2104      	movs	r1, #4
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d4c:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d50:	4b4a      	ldr	r3, [pc, #296]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	438a      	bics	r2, r1
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d58:	f7ff fa9e 	bl	8000298 <HAL_GetTick>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d62:	f7ff fa99 	bl	8000298 <HAL_GetTick>
 8000d66:	0002      	movs	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e07f      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d74:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d78:	2202      	movs	r2, #2
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d1f1      	bne.n	8000d62 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d100      	bne.n	8000d88 <HAL_RCC_OscConfig+0x4e0>
 8000d86:	e074      	b.n	8000e72 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d88:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d100      	bne.n	8000d96 <HAL_RCC_OscConfig+0x4ee>
 8000d94:	e06b      	b.n	8000e6e <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a1b      	ldr	r3, [r3, #32]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d14c      	bne.n	8000e38 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d9e:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000da4:	4938      	ldr	r1, [pc, #224]	; (8000e88 <HAL_RCC_OscConfig+0x5e0>)
 8000da6:	400a      	ands	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000daa:	f7ff fa75 	bl	8000298 <HAL_GetTick>
 8000dae:	0003      	movs	r3, r0
 8000db0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db4:	f7ff fa70 	bl	8000298 <HAL_GetTick>
 8000db8:	0002      	movs	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e056      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	049b      	lsls	r3, r3, #18
 8000dce:	4013      	ands	r3, r2
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	4393      	bics	r3, r2
 8000dda:	0019      	movs	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000de2:	430a      	orrs	r2, r1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <HAL_RCC_OscConfig+0x5e4>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	0019      	movs	r1, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0449      	lsls	r1, r1, #17
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fa43 	bl	8000298 <HAL_GetTick>
 8000e12:	0003      	movs	r3, r0
 8000e14:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e18:	f7ff fa3e 	bl	8000298 <HAL_GetTick>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e024      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	049b      	lsls	r3, r3, #18
 8000e32:	4013      	ands	r3, r2
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0x570>
 8000e36:	e01c      	b.n	8000e72 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e38:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000e3e:	4912      	ldr	r1, [pc, #72]	; (8000e88 <HAL_RCC_OscConfig+0x5e0>)
 8000e40:	400a      	ands	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fa28 	bl	8000298 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4e:	f7ff fa23 	bl	8000298 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e009      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_RCC_OscConfig+0x5d4>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	049b      	lsls	r3, r3, #18
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d1f0      	bne.n	8000e4e <HAL_RCC_OscConfig+0x5a6>
 8000e6c:	e001      	b.n	8000e72 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b006      	add	sp, #24
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	00001388 	.word	0x00001388
 8000e84:	efffffff 	.word	0xefffffff
 8000e88:	feffffff 	.word	0xfeffffff
 8000e8c:	ffc2ffff 	.word	0xffc2ffff

08000e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d911      	bls.n	8000ed0 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eac:	4b66      	ldr	r3, [pc, #408]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4393      	bics	r3, r2
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	4b64      	ldr	r3, [pc, #400]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ebe:	4b62      	ldr	r3, [pc, #392]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d001      	beq.n	8000ed0 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e0b6      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d009      	beq.n	8000eee <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	22f0      	movs	r2, #240	; 0xf0
 8000ee0:	4393      	bics	r3, r2
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000eea:	430a      	orrs	r2, r1
 8000eec:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d100      	bne.n	8000efa <HAL_RCC_ClockConfig+0x6a>
 8000ef8:	e067      	b.n	8000fca <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d107      	bne.n	8000f12 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	4b52      	ldr	r3, [pc, #328]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	029b      	lsls	r3, r3, #10
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d114      	bne.n	8000f38 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e095      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d107      	bne.n	8000f2a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	049b      	lsls	r3, r3, #18
 8000f22:	4013      	ands	r3, r2
 8000f24:	d108      	bne.n	8000f38 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e089      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	4013      	ands	r3, r2
 8000f32:	d101      	bne.n	8000f38 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e082      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f38:	4b44      	ldr	r3, [pc, #272]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	4393      	bics	r3, r2
 8000f40:	0019      	movs	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f4c:	f7ff f9a4 	bl	8000298 <HAL_GetTick>
 8000f50:	0003      	movs	r3, r0
 8000f52:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d111      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5c:	e009      	b.n	8000f72 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5e:	f7ff f99b 	bl	8000298 <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	4a39      	ldr	r2, [pc, #228]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e065      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f72:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	220c      	movs	r2, #12
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d1ef      	bne.n	8000f5e <HAL_RCC_ClockConfig+0xce>
 8000f7e:	e024      	b.n	8000fca <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d11b      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f88:	e009      	b.n	8000f9e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8a:	f7ff f985 	bl	8000298 <HAL_GetTick>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e04f      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d1ef      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xfa>
 8000faa:	e00e      	b.n	8000fca <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fac:	f7ff f974 	bl	8000298 <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e03e      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d211      	bcs.n	8000ffc <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4393      	bics	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_RCC_ClockConfig+0x1b8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d001      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e020      	b.n	800103e <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2204      	movs	r2, #4
 8001002:	4013      	ands	r3, r2
 8001004:	d009      	beq.n	800101a <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	4013      	ands	r3, r2
 800100e:	0019      	movs	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	430a      	orrs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800101a:	f000 f821 	bl	8001060 <HAL_RCC_GetSysClockFreq>
 800101e:	0001      	movs	r1, r0
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	220f      	movs	r2, #15
 8001028:	4013      	ands	r3, r2
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_RCC_ClockConfig+0x1c8>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	000a      	movs	r2, r1
 8001030:	40da      	lsrs	r2, r3
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_RCC_ClockConfig+0x1cc>)
 8001034:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff f906 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	0018      	movs	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	b004      	add	sp, #16
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40022000 	.word	0x40022000
 800104c:	40021000 	.word	0x40021000
 8001050:	00001388 	.word	0x00001388
 8001054:	fffff8ff 	.word	0xfffff8ff
 8001058:	08002970 	.word	0x08002970
 800105c:	20000000 	.word	0x20000000

08001060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b08f      	sub	sp, #60	; 0x3c
 8001064:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001066:	2314      	movs	r3, #20
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800106c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800106e:	c313      	stmia	r3!, {r0, r1, r4}
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001078:	ca13      	ldmia	r2!, {r0, r1, r4}
 800107a:	c313      	stmia	r3!, {r0, r1, r4}
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
 8001088:	2300      	movs	r3, #0
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	220c      	movs	r2, #12
 800109e:	4013      	ands	r3, r2
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d002      	beq.n	80010aa <HAL_RCC_GetSysClockFreq+0x4a>
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d003      	beq.n	80010b0 <HAL_RCC_GetSysClockFreq+0x50>
 80010a8:	e02d      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010ae:	e02d      	b.n	800110c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	0c9b      	lsrs	r3, r3, #18
 80010b4:	220f      	movs	r2, #15
 80010b6:	4013      	ands	r3, r2
 80010b8:	2214      	movs	r2, #20
 80010ba:	18ba      	adds	r2, r7, r2
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	220f      	movs	r2, #15
 80010c6:	4013      	ands	r3, r2
 80010c8:	1d3a      	adds	r2, r7, #4
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80010ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	4013      	ands	r3, r2
 80010d6:	d009      	beq.n	80010ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <HAL_RCC_GetSysClockFreq+0xc4>)
 80010dc:	f7ff f814 	bl	8000108 <__udivsi3>
 80010e0:	0003      	movs	r3, r0
 80010e2:	001a      	movs	r2, r3
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	4353      	muls	r3, r2
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
 80010ea:	e009      	b.n	8001100 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80010ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ee:	000a      	movs	r2, r1
 80010f0:	0152      	lsls	r2, r2, #5
 80010f2:	1a52      	subs	r2, r2, r1
 80010f4:	0193      	lsls	r3, r2, #6
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	185b      	adds	r3, r3, r1
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001104:	e002      	b.n	800110c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800110a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800110c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b00f      	add	sp, #60	; 0x3c
 8001114:	bd90      	pop	{r4, r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	08002950 	.word	0x08002950
 800111c:	08002960 	.word	0x08002960
 8001120:	40021000 	.word	0x40021000
 8001124:	007a1200 	.word	0x007a1200

08001128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800112c:	4b02      	ldr	r3, [pc, #8]	; (8001138 <HAL_RCC_GetHCLKFreq+0x10>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000000 	.word	0x20000000

0800113c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e08a      	b.n	8001264 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	225d      	movs	r2, #93	; 0x5d
 8001158:	5c9b      	ldrb	r3, [r3, r2]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d107      	bne.n	8001170 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	225c      	movs	r2, #92	; 0x5c
 8001164:	2100      	movs	r1, #0
 8001166:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f001 faac 	bl	80026c8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	225d      	movs	r2, #93	; 0x5d
 8001174:	2102      	movs	r1, #2
 8001176:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	438a      	bics	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	23e0      	movs	r3, #224	; 0xe0
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	429a      	cmp	r2, r3
 8001192:	d902      	bls.n	800119a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e002      	b.n	80011a0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	23f0      	movs	r3, #240	; 0xf0
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d008      	beq.n	80011be <HAL_SPI_Init+0x82>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	23e0      	movs	r3, #224	; 0xe0
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d002      	beq.n	80011be <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	23e0      	movs	r3, #224	; 0xe0
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d903      	bls.n	80011da <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2202      	movs	r2, #2
 80011d6:	631a      	str	r2, [r3, #48]	; 0x30
 80011d8:	e002      	b.n	80011e0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6999      	ldr	r1, [r3, #24]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	400b      	ands	r3, r1
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	431a      	orrs	r2, r3
 800120e:	0011      	movs	r1, r2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	2204      	movs	r2, #4
 8001224:	401a      	ands	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	431a      	orrs	r2, r3
 8001238:	0011      	movs	r1, r2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	430a      	orrs	r2, r1
 8001242:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69da      	ldr	r2, [r3, #28]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4907      	ldr	r1, [pc, #28]	; (800126c <HAL_SPI_Init+0x130>)
 8001250:	400a      	ands	r2, r1
 8001252:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	225d      	movs	r2, #93	; 0x5d
 800125e:	2101      	movs	r1, #1
 8001260:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	fffff7ff 	.word	0xfffff7ff

08001270 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	1dbb      	adds	r3, r7, #6
 800127e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001284:	231f      	movs	r3, #31
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	225c      	movs	r2, #92	; 0x5c
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_SPI_Transmit+0x2a>
 8001296:	2302      	movs	r3, #2
 8001298:	e14f      	b.n	800153a <HAL_SPI_Transmit+0x2ca>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	225c      	movs	r2, #92	; 0x5c
 800129e:	2101      	movs	r1, #1
 80012a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80012a2:	f7fe fff9 	bl	8000298 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	225d      	movs	r2, #93	; 0x5d
 80012ae:	5c9b      	ldrb	r3, [r3, r2]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d004      	beq.n	80012c0 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80012b6:	231f      	movs	r3, #31
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80012be:	e131      	b.n	8001524 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_SPI_Transmit+0x5e>
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 80012ce:	231f      	movs	r3, #31
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80012d6:	e125      	b.n	8001524 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	225d      	movs	r2, #93	; 0x5d
 80012dc:	2103      	movs	r1, #3
 80012de:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1dba      	adds	r2, r7, #6
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1dba      	adds	r2, r7, #6
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2244      	movs	r2, #68	; 0x44
 8001306:	2100      	movs	r1, #0
 8001308:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2246      	movs	r2, #70	; 0x46
 800130e:	2100      	movs	r1, #0
 8001310:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	429a      	cmp	r2, r3
 8001328:	d108      	bne.n	800133c <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	01c9      	lsls	r1, r1, #7
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2240      	movs	r2, #64	; 0x40
 8001344:	4013      	ands	r3, r2
 8001346:	2b40      	cmp	r3, #64	; 0x40
 8001348:	d007      	beq.n	800135a <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2140      	movs	r1, #64	; 0x40
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	23e0      	movs	r3, #224	; 0xe0
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	429a      	cmp	r2, r3
 8001364:	d948      	bls.n	80013f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_SPI_Transmit+0x108>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001372:	b29b      	uxth	r3, r3
 8001374:	2b01      	cmp	r3, #1
 8001376:	d139      	bne.n	80013ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	881a      	ldrh	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3302      	adds	r3, #2
 8001386:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800138c:	b29b      	uxth	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001396:	e029      	b.n	80013ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d10f      	bne.n	80013c6 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	881a      	ldrh	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	3302      	adds	r3, #2
 80013b4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80013c4:	e012      	b.n	80013ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00a      	beq.n	80013e2 <HAL_SPI_Transmit+0x172>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	d00c      	beq.n	80013ec <HAL_SPI_Transmit+0x17c>
 80013d2:	f7fe ff61 	bl	8000298 <HAL_GetTick>
 80013d6:	0002      	movs	r2, r0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d804      	bhi.n	80013ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80013e2:	231f      	movs	r3, #31
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2203      	movs	r2, #3
 80013e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80013ea:	e09b      	b.n	8001524 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1d0      	bne.n	8001398 <HAL_SPI_Transmit+0x128>
 80013f6:	e071      	b.n	80014dc <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d004      	beq.n	800140a <HAL_SPI_Transmit+0x19a>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001404:	b29b      	uxth	r3, r3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d163      	bne.n	80014d2 <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800140e:	b29b      	uxth	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d90f      	bls.n	8001434 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3302      	adds	r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001428:	b29b      	uxth	r3, r3
 800142a:	3b02      	subs	r3, #2
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001432:	e04e      	b.n	80014d2 <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	320c      	adds	r2, #12
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001452:	e03e      	b.n	80014d2 <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2202      	movs	r2, #2
 800145c:	4013      	ands	r3, r2
 800145e:	2b02      	cmp	r3, #2
 8001460:	d124      	bne.n	80014ac <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001466:	b29b      	uxth	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d90f      	bls.n	800148c <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3302      	adds	r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b02      	subs	r3, #2
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800148a:	e022      	b.n	80014d2 <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	320c      	adds	r2, #12
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80014aa:	e012      	b.n	80014d2 <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <HAL_SPI_Transmit+0x258>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	d00c      	beq.n	80014d2 <HAL_SPI_Transmit+0x262>
 80014b8:	f7fe feee 	bl	8000298 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d804      	bhi.n	80014d2 <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80014c8:	231f      	movs	r3, #31
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	2203      	movs	r2, #3
 80014ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80014d0:	e028      	b.n	8001524 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1bb      	bne.n	8001454 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	6839      	ldr	r1, [r7, #0]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 fdb6 	bl	8002054 <SPI_EndRxTxTransaction>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 8001518:	231f      	movs	r3, #31
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <HAL_SPI_Transmit+0x2b4>
  }

error:
 8001522:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	225d      	movs	r2, #93	; 0x5d
 8001528:	2101      	movs	r1, #1
 800152a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	225c      	movs	r2, #92	; 0x5c
 8001530:	2100      	movs	r1, #0
 8001532:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001534:	231f      	movs	r3, #31
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	781b      	ldrb	r3, [r3, #0]
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b008      	add	sp, #32
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001558:	2317      	movs	r3, #23
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	2382      	movs	r3, #130	; 0x82
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	429a      	cmp	r2, r3
 800156a:	d113      	bne.n	8001594 <HAL_SPI_Receive+0x50>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10f      	bne.n	8001594 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	225d      	movs	r2, #93	; 0x5d
 8001578:	2104      	movs	r1, #4
 800157a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	881c      	ldrh	r4, [r3, #0]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	0023      	movs	r3, r4
 800158c:	f000 f918 	bl	80017c0 <HAL_SPI_TransmitReceive>
 8001590:	0003      	movs	r3, r0
 8001592:	e10c      	b.n	80017ae <HAL_SPI_Receive+0x26a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	225c      	movs	r2, #92	; 0x5c
 8001598:	5c9b      	ldrb	r3, [r3, r2]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_SPI_Receive+0x5e>
 800159e:	2302      	movs	r3, #2
 80015a0:	e105      	b.n	80017ae <HAL_SPI_Receive+0x26a>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	225c      	movs	r2, #92	; 0x5c
 80015a6:	2101      	movs	r1, #1
 80015a8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80015aa:	f7fe fe75 	bl	8000298 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	225d      	movs	r2, #93	; 0x5d
 80015b6:	5c9b      	ldrb	r3, [r3, r2]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d004      	beq.n	80015c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80015be:	2317      	movs	r3, #23
 80015c0:	18fb      	adds	r3, r7, r3
 80015c2:	2202      	movs	r2, #2
 80015c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80015c6:	e0e7      	b.n	8001798 <HAL_SPI_Receive+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_SPI_Receive+0x92>
 80015ce:	1dbb      	adds	r3, r7, #6
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d104      	bne.n	80015e0 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 80015d6:	2317      	movs	r3, #23
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80015de:	e0db      	b.n	8001798 <HAL_SPI_Receive+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	225d      	movs	r2, #93	; 0x5d
 80015e4:	2104      	movs	r1, #4
 80015e6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1dba      	adds	r2, r7, #6
 80015f8:	2144      	movs	r1, #68	; 0x44
 80015fa:	8812      	ldrh	r2, [r2, #0]
 80015fc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1dba      	adds	r2, r7, #6
 8001602:	2146      	movs	r1, #70	; 0x46
 8001604:	8812      	ldrh	r2, [r2, #0]
 8001606:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	23e0      	movs	r3, #224	; 0xe0
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	429a      	cmp	r2, r3
 8001630:	d908      	bls.n	8001644 <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	495e      	ldr	r1, [pc, #376]	; (80017b8 <HAL_SPI_Receive+0x274>)
 800163e:	400a      	ands	r2, r1
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	e008      	b.n	8001656 <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	0149      	lsls	r1, r1, #5
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	429a      	cmp	r2, r3
 8001660:	d107      	bne.n	8001672 <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4953      	ldr	r1, [pc, #332]	; (80017bc <HAL_SPI_Receive+0x278>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	4013      	ands	r3, r2
 800167c:	2b40      	cmp	r3, #64	; 0x40
 800167e:	d007      	beq.n	8001690 <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2140      	movs	r1, #64	; 0x40
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	23e0      	movs	r3, #224	; 0xe0
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	429a      	cmp	r2, r3
 800169a:	d862      	bhi.n	8001762 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800169c:	e02d      	b.n	80016fa <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2201      	movs	r2, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d113      	bne.n	80016d4 <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	330c      	adds	r3, #12
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	3301      	adds	r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2246      	movs	r2, #70	; 0x46
 80016c4:	5a9b      	ldrh	r3, [r3, r2]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b299      	uxth	r1, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2246      	movs	r2, #70	; 0x46
 80016d0:	5299      	strh	r1, [r3, r2]
 80016d2:	e012      	b.n	80016fa <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00a      	beq.n	80016f0 <HAL_SPI_Receive+0x1ac>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	d00c      	beq.n	80016fa <HAL_SPI_Receive+0x1b6>
 80016e0:	f7fe fdda 	bl	8000298 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d804      	bhi.n	80016fa <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 80016f0:	2317      	movs	r3, #23
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2203      	movs	r2, #3
 80016f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80016f8:	e04e      	b.n	8001798 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2246      	movs	r2, #70	; 0x46
 80016fe:	5a9b      	ldrh	r3, [r3, r2]
 8001700:	b29b      	uxth	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1cb      	bne.n	800169e <HAL_SPI_Receive+0x15a>
 8001706:	e032      	b.n	800176e <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2201      	movs	r2, #1
 8001710:	4013      	ands	r3, r2
 8001712:	2b01      	cmp	r3, #1
 8001714:	d112      	bne.n	800173c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	b29a      	uxth	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3302      	adds	r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2246      	movs	r2, #70	; 0x46
 800172c:	5a9b      	ldrh	r3, [r3, r2]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b299      	uxth	r1, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2246      	movs	r2, #70	; 0x46
 8001738:	5299      	strh	r1, [r3, r2]
 800173a:	e012      	b.n	8001762 <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00a      	beq.n	8001758 <HAL_SPI_Receive+0x214>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	d00c      	beq.n	8001762 <HAL_SPI_Receive+0x21e>
 8001748:	f7fe fda6 	bl	8000298 <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d804      	bhi.n	8001762 <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 8001758:	2317      	movs	r3, #23
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	2203      	movs	r2, #3
 800175e:	701a      	strb	r2, [r3, #0]
          goto error;
 8001760:	e01a      	b.n	8001798 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2246      	movs	r2, #70	; 0x46
 8001766:	5a9b      	ldrh	r3, [r3, r2]
 8001768:	b29b      	uxth	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1cc      	bne.n	8001708 <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	0018      	movs	r0, r3
 8001776:	f000 fc0f 	bl	8001f98 <SPI_EndRxTransaction>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d002      	beq.n	8001784 <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2220      	movs	r2, #32
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <HAL_SPI_Receive+0x252>
  {
    errorcode = HAL_ERROR;
 800178c:	2317      	movs	r3, #23
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e000      	b.n	8001798 <HAL_SPI_Receive+0x254>
  }

error :
 8001796:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	225d      	movs	r2, #93	; 0x5d
 800179c:	2101      	movs	r1, #1
 800179e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	225c      	movs	r2, #92	; 0x5c
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80017a8:	2317      	movs	r3, #23
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	781b      	ldrb	r3, [r3, #0]
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b007      	add	sp, #28
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	ffffefff 	.word	0xffffefff
 80017bc:	ffffbfff 	.word	0xffffbfff

080017c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	001a      	movs	r2, r3
 80017ce:	1cbb      	adds	r3, r7, #2
 80017d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80017de:	2301      	movs	r3, #1
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017e2:	2323      	movs	r3, #35	; 0x23
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	225c      	movs	r2, #92	; 0x5c
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_SPI_TransmitReceive+0x38>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e1f2      	b.n	8001bde <HAL_SPI_TransmitReceive+0x41e>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	225c      	movs	r2, #92	; 0x5c
 80017fc:	2101      	movs	r1, #1
 80017fe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001800:	f7fe fd4a 	bl	8000298 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	225d      	movs	r2, #93	; 0x5d
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d010      	beq.n	8001840 <HAL_SPI_TransmitReceive+0x80>
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	2382      	movs	r3, #130	; 0x82
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	429a      	cmp	r2, r3
 8001826:	d106      	bne.n	8001836 <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <HAL_SPI_TransmitReceive+0x76>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d004      	beq.n	8001840 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8001836:	2323      	movs	r3, #35	; 0x23
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
    goto error;
 800183e:	e1c3      	b.n	8001bc8 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_SPI_TransmitReceive+0x94>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_SPI_TransmitReceive+0x94>
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 8001854:	2323      	movs	r3, #35	; 0x23
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
    goto error;
 800185c:	e1b4      	b.n	8001bc8 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	225d      	movs	r2, #93	; 0x5d
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b04      	cmp	r3, #4
 8001868:	d003      	beq.n	8001872 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	225d      	movs	r2, #93	; 0x5d
 800186e:	2105      	movs	r1, #5
 8001870:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1cba      	adds	r2, r7, #2
 8001882:	2146      	movs	r1, #70	; 0x46
 8001884:	8812      	ldrh	r2, [r2, #0]
 8001886:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1cba      	adds	r2, r7, #2
 800188c:	2144      	movs	r1, #68	; 0x44
 800188e:	8812      	ldrh	r2, [r2, #0]
 8001890:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1cba      	adds	r2, r7, #2
 800189c:	8812      	ldrh	r2, [r2, #0]
 800189e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1cba      	adds	r2, r7, #2
 80018a4:	8812      	ldrh	r2, [r2, #0]
 80018a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	23e0      	movs	r3, #224	; 0xe0
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	429a      	cmp	r2, r3
 80018be:	d805      	bhi.n	80018cc <HAL_SPI_TransmitReceive+0x10c>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2246      	movs	r2, #70	; 0x46
 80018c4:	5a9b      	ldrh	r3, [r3, r2]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d908      	bls.n	80018de <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	49c4      	ldr	r1, [pc, #784]	; (8001be8 <HAL_SPI_TransmitReceive+0x428>)
 80018d8:	400a      	ands	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	e008      	b.n	80018f0 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	0149      	lsls	r1, r1, #5
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b40      	cmp	r3, #64	; 0x40
 80018fc:	d007      	beq.n	800190e <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	23e0      	movs	r3, #224	; 0xe0
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	429a      	cmp	r2, r3
 8001918:	d800      	bhi.n	800191c <HAL_SPI_TransmitReceive+0x15c>
 800191a:	e075      	b.n	8001a08 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_SPI_TransmitReceive+0x16e>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d160      	bne.n	80019f0 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3302      	adds	r3, #2
 800193c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001942:	b29b      	uxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800194c:	e050      	b.n	80019f0 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01c      	beq.n	800198e <HAL_SPI_TransmitReceive+0x1ce>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001958:	b29b      	uxth	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d017      	beq.n	800198e <HAL_SPI_TransmitReceive+0x1ce>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d110      	bne.n	800198e <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3302      	adds	r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2246      	movs	r2, #70	; 0x46
 8001992:	5a9b      	ldrh	r3, [r3, r2]
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <HAL_SPI_TransmitReceive+0x210>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d113      	bne.n	80019d0 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3302      	adds	r3, #2
 80019b8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2246      	movs	r2, #70	; 0x46
 80019be:	5a9b      	ldrh	r3, [r3, r2]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b299      	uxth	r1, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2246      	movs	r2, #70	; 0x46
 80019ca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	3301      	adds	r3, #1
 80019d4:	d00c      	beq.n	80019f0 <HAL_SPI_TransmitReceive+0x230>
 80019d6:	f7fe fc5f 	bl	8000298 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d804      	bhi.n	80019f0 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 80019e6:	2323      	movs	r3, #35	; 0x23
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	2203      	movs	r2, #3
 80019ec:	701a      	strb	r2, [r3, #0]
        goto error;
 80019ee:	e0eb      	b.n	8001bc8 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1a9      	bne.n	800194e <HAL_SPI_TransmitReceive+0x18e>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2246      	movs	r2, #70	; 0x46
 80019fe:	5a9b      	ldrh	r3, [r3, r2]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1a3      	bne.n	800194e <HAL_SPI_TransmitReceive+0x18e>
 8001a06:	e0ca      	b.n	8001b9e <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_SPI_TransmitReceive+0x25c>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d000      	beq.n	8001a1c <HAL_SPI_TransmitReceive+0x25c>
 8001a1a:	e0b3      	b.n	8001b84 <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d90f      	bls.n	8001a46 <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	881a      	ldrh	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	3302      	adds	r3, #2
 8001a34:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b02      	subs	r3, #2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a44:	e09e      	b.n	8001b84 <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	60ba      	str	r2, [r7, #8]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	320c      	adds	r2, #12
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a64:	e08e      	b.n	8001b84 <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d031      	beq.n	8001ad0 <HAL_SPI_TransmitReceive+0x310>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d02c      	beq.n	8001ad0 <HAL_SPI_TransmitReceive+0x310>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d125      	bne.n	8001ad0 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d90f      	bls.n	8001aae <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b02      	subs	r3, #2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001aac:	e00e      	b.n	8001acc <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	320c      	adds	r2, #12
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2246      	movs	r2, #70	; 0x46
 8001ad4:	5a9b      	ldrh	r3, [r3, r2]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d043      	beq.n	8001b64 <HAL_SPI_TransmitReceive+0x3a4>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d13c      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2246      	movs	r2, #70	; 0x46
 8001aee:	5a9b      	ldrh	r3, [r3, r2]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d921      	bls.n	8001b3a <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3302      	adds	r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2246      	movs	r2, #70	; 0x46
 8001b0c:	5a9b      	ldrh	r3, [r3, r2]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b02      	subs	r3, #2
 8001b12:	b299      	uxth	r1, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2246      	movs	r2, #70	; 0x46
 8001b18:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2246      	movs	r2, #70	; 0x46
 8001b1e:	5a9b      	ldrh	r3, [r3, r2]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d81c      	bhi.n	8001b60 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0149      	lsls	r1, r1, #5
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	e012      	b.n	8001b60 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	330c      	adds	r3, #12
 8001b40:	001a      	movs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1c59      	adds	r1, r3, #1
 8001b46:	6079      	str	r1, [r7, #4]
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2246      	movs	r2, #70	; 0x46
 8001b52:	5a9b      	ldrh	r3, [r3, r2]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b299      	uxth	r1, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2246      	movs	r2, #70	; 0x46
 8001b5e:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b66:	3301      	adds	r3, #1
 8001b68:	d00c      	beq.n	8001b84 <HAL_SPI_TransmitReceive+0x3c4>
 8001b6a:	f7fe fb95 	bl	8000298 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d804      	bhi.n	8001b84 <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 8001b7a:	2323      	movs	r3, #35	; 0x23
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	2203      	movs	r2, #3
 8001b80:	701a      	strb	r2, [r3, #0]
        goto error;
 8001b82:	e021      	b.n	8001bc8 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d000      	beq.n	8001b90 <HAL_SPI_TransmitReceive+0x3d0>
 8001b8e:	e76a      	b.n	8001a66 <HAL_SPI_TransmitReceive+0x2a6>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2246      	movs	r2, #70	; 0x46
 8001b94:	5a9b      	ldrh	r3, [r3, r2]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d000      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x3de>
 8001b9c:	e763      	b.n	8001a66 <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 fa55 	bl	8002054 <SPI_EndRxTxTransaction>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8001bbc:	2323      	movs	r3, #35	; 0x23
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	e000      	b.n	8001bc8 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8001bc6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	225d      	movs	r2, #93	; 0x5d
 8001bcc:	2101      	movs	r1, #1
 8001bce:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	225c      	movs	r2, #92	; 0x5c
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001bd8:	2323      	movs	r3, #35	; 0x23
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b00a      	add	sp, #40	; 0x28
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	ffffefff 	.word	0xffffefff

08001bec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d10d      	bne.n	8001c28 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001c12:	d009      	beq.n	8001c28 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d005      	beq.n	8001c28 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	0010      	movs	r0, r2
 8001c24:	4798      	blx	r3
    return;
 8001c26:	e0ac      	b.n	8001d82 <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_SPI_IRQHandler+0x58>
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	4013      	ands	r3, r2
 8001c36:	d005      	beq.n	8001c44 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	0010      	movs	r0, r2
 8001c40:	4798      	blx	r3
    return;
 8001c42:	e09e      	b.n	8001d82 <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	23b0      	movs	r3, #176	; 0xb0
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d100      	bne.n	8001c50 <HAL_SPI_IRQHandler+0x64>
 8001c4e:	e098      	b.n	8001d82 <HAL_SPI_IRQHandler+0x196>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2220      	movs	r2, #32
 8001c54:	4013      	ands	r3, r2
 8001c56:	d100      	bne.n	8001c5a <HAL_SPI_IRQHandler+0x6e>
 8001c58:	e093      	b.n	8001d82 <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2240      	movs	r2, #64	; 0x40
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d023      	beq.n	8001caa <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	225d      	movs	r2, #93	; 0x5d
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d011      	beq.n	8001c92 <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	2204      	movs	r2, #4
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	e00b      	b.n	8001caa <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
        return;
 8001ca8:	e06b      	b.n	8001d82 <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2220      	movs	r2, #32
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d014      	beq.n	8001cdc <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2140      	movs	r1, #64	; 0x40
 8001cd6:	438a      	bics	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d00c      	beq.n	8001d00 <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	2208      	movs	r2, #8
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d03b      	beq.n	8001d80 <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	21e0      	movs	r1, #224	; 0xe0
 8001d14:	438a      	bics	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	225d      	movs	r2, #93	; 0x5d
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d103      	bne.n	8001d30 <HAL_SPI_IRQHandler+0x144>
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d022      	beq.n	8001d76 <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_SPI_IRQHandler+0x19c>)
 8001d4e:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	0018      	movs	r0, r3
 8001d56:	f7fe fba1 	bl	800049c <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <HAL_SPI_IRQHandler+0x192>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_SPI_IRQHandler+0x19c>)
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7fe fb94 	bl	800049c <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8001d74:	e003      	b.n	8001d7e <HAL_SPI_IRQHandler+0x192>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 f807 	bl	8001d8c <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46c0      	nop			; (mov r8, r8)
  }
}
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b008      	add	sp, #32
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	08001d9d 	.word	0x08001d9d

08001d8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2246      	movs	r2, #70	; 0x46
 8001dae:	2100      	movs	r1, #0
 8001db0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff ffe6 	bl	8001d8c <HAL_SPI_ErrorCallback>
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b004      	add	sp, #16
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dd6:	e050      	b.n	8001e7a <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	d04d      	beq.n	8001e7a <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8001de4:	f7fe fa58 	bl	8000298 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d842      	bhi.n	8001e7a <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	21e0      	movs	r1, #224	; 0xe0
 8001e00:	438a      	bics	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	2382      	movs	r3, #130	; 0x82
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d113      	bne.n	8001e38 <SPI_WaitFlagStateUntilTimeout+0x70>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d005      	beq.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d107      	bne.n	8001e38 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2140      	movs	r1, #64	; 0x40
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	019b      	lsls	r3, r3, #6
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d110      	bne.n	8001e66 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4914      	ldr	r1, [pc, #80]	; (8001ea0 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	0189      	lsls	r1, r1, #6
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	225d      	movs	r2, #93	; 0x5d
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	225c      	movs	r2, #92	; 0x5c
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e00e      	b.n	8001e98 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	4013      	ands	r3, r2
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d101      	bne.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0xc6>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d1a0      	bne.n	8001dd8 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	ffffdfff 	.word	0xffffdfff

08001ea4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8001eb2:	e062      	b.n	8001f7a <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	23c0      	movs	r3, #192	; 0xc0
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d10c      	bne.n	8001ed8 <SPI_WaitFifoStateUntilTimeout+0x34>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	2117      	movs	r1, #23
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	d04d      	beq.n	8001f7a <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <SPI_WaitFifoStateUntilTimeout+0x50>
 8001ee4:	f7fe f9d8 	bl	8000298 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d842      	bhi.n	8001f7a <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	21e0      	movs	r1, #224	; 0xe0
 8001f00:	438a      	bics	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	2382      	movs	r3, #130	; 0x82
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d113      	bne.n	8001f38 <SPI_WaitFifoStateUntilTimeout+0x94>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d005      	beq.n	8001f28 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2140      	movs	r1, #64	; 0x40
 8001f34:	438a      	bics	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	019b      	lsls	r3, r3, #6
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d110      	bne.n	8001f66 <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4911      	ldr	r1, [pc, #68]	; (8001f94 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	0189      	lsls	r1, r1, #6
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	225d      	movs	r2, #93	; 0x5d
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	225c      	movs	r2, #92	; 0x5c
 8001f72:	2100      	movs	r1, #0
 8001f74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e008      	b.n	8001f8c <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	4013      	ands	r3, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d194      	bne.n	8001eb4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b006      	add	sp, #24
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	ffffdfff 	.word	0xffffdfff

08001f98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	2382      	movs	r3, #130	; 0x82
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d113      	bne.n	8001fd8 <SPI_EndRxTransaction+0x40>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d005      	beq.n	8001fc8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	f7ff feef 	bl	8001dc8 <SPI_WaitFlagStateUntilTimeout>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d007      	beq.n	8001ffe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e026      	b.n	800204c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	2382      	movs	r3, #130	; 0x82
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	429a      	cmp	r2, r3
 8002008:	d11f      	bne.n	800204a <SPI_EndRxTransaction+0xb2>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	429a      	cmp	r2, r3
 8002014:	d005      	beq.n	8002022 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	429a      	cmp	r2, r3
 8002020:	d113      	bne.n	800204a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	23c0      	movs	r3, #192	; 0xc0
 8002026:	00d9      	lsls	r1, r3, #3
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	0013      	movs	r3, r2
 8002030:	2200      	movs	r2, #0
 8002032:	f7ff ff37 	bl	8001ea4 <SPI_WaitFifoStateUntilTimeout>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d007      	beq.n	800204a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	2220      	movs	r2, #32
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e000      	b.n	800204c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}

08002054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	0159      	lsls	r1, r3, #5
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	0013      	movs	r3, r2
 800206e:	2200      	movs	r2, #0
 8002070:	f7ff ff18 	bl	8001ea4 <SPI_WaitFifoStateUntilTimeout>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d007      	beq.n	8002088 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	2220      	movs	r2, #32
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e027      	b.n	80020d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	0013      	movs	r3, r2
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	f7ff fe97 	bl	8001dc8 <SPI_WaitFlagStateUntilTimeout>
 800209a:	1e03      	subs	r3, r0, #0
 800209c:	d007      	beq.n	80020ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	2220      	movs	r2, #32
 80020a4:	431a      	orrs	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e014      	b.n	80020d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	23c0      	movs	r3, #192	; 0xc0
 80020b2:	00d9      	lsls	r1, r3, #3
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	0013      	movs	r3, r2
 80020bc:	2200      	movs	r2, #0
 80020be:	f7ff fef1 	bl	8001ea4 <SPI_WaitFifoStateUntilTimeout>
 80020c2:	1e03      	subs	r3, r0, #0
 80020c4:	d007      	beq.n	80020d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ca:	2220      	movs	r2, #32
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e000      	b.n	80020d8 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}

080020e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b08b      	sub	sp, #44	; 0x2c
 80020e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	2414      	movs	r4, #20
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	0018      	movs	r0, r3
 80020ec:	2314      	movs	r3, #20
 80020ee:	001a      	movs	r2, r3
 80020f0:	2100      	movs	r1, #0
 80020f2:	f000 fc19 	bl	8002928 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <MX_GPIO_Init+0x11c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	4b40      	ldr	r3, [pc, #256]	; (80021fc <MX_GPIO_Init+0x11c>)
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	03c9      	lsls	r1, r1, #15
 8002100:	430a      	orrs	r2, r1
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	03db      	lsls	r3, r3, #15
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	0289      	lsls	r1, r1, #10
 800211c:	430a      	orrs	r2, r1
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b33      	ldr	r3, [pc, #204]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	4b32      	ldr	r3, [pc, #200]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0309      	lsls	r1, r1, #12
 8002138:	430a      	orrs	r2, r1
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <MX_GPIO_Init+0x11c>)
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	031b      	lsls	r3, r3, #12
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <MX_GPIO_Init+0x11c>)
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <MX_GPIO_Init+0x11c>)
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	02c9      	lsls	r1, r1, #11
 8002154:	430a      	orrs	r2, r1
 8002156:	615a      	str	r2, [r3, #20]
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <MX_GPIO_Init+0x11c>)
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	02db      	lsls	r3, r3, #11
 8002160:	4013      	ands	r3, r2
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <MX_GPIO_Init+0x120>)
 8002168:	2201      	movs	r2, #1
 800216a:	2120      	movs	r1, #32
 800216c:	0018      	movs	r0, r3
 800216e:	f7fe fb6c 	bl	800084a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_START_Pin|ADC_RESET_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002172:	23cc      	movs	r3, #204	; 0xcc
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4823      	ldr	r0, [pc, #140]	; (8002204 <MX_GPIO_Init+0x124>)
 8002178:	2200      	movs	r2, #0
 800217a:	0019      	movs	r1, r3
 800217c:	f7fe fb65 	bl	800084a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8002180:	0021      	movs	r1, r4
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2220      	movs	r2, #32
 8002186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	187b      	adds	r3, r7, r1
 800218a:	2201      	movs	r2, #1
 800218c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	187b      	adds	r3, r7, r1
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	187b      	adds	r3, r7, r1
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800219a:	000c      	movs	r4, r1
 800219c:	187b      	adds	r3, r7, r1
 800219e:	4a18      	ldr	r2, [pc, #96]	; (8002200 <MX_GPIO_Init+0x120>)
 80021a0:	0019      	movs	r1, r3
 80021a2:	0010      	movs	r0, r2
 80021a4:	f7fe f9c0 	bl	8000528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_START_Pin|ADC_RESET_Pin|LD4_Pin|LD3_Pin;
 80021a8:	0021      	movs	r1, r4
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	22cc      	movs	r2, #204	; 0xcc
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2201      	movs	r2, #1
 80021b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c4:	000c      	movs	r4, r1
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <MX_GPIO_Init+0x124>)
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f7fe f9ab 	bl	8000528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 80021d2:	0021      	movs	r1, r4
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	4a07      	ldr	r2, [pc, #28]	; (8002208 <MX_GPIO_Init+0x128>)
 80021ea:	0019      	movs	r1, r3
 80021ec:	0010      	movs	r0, r2
 80021ee:	f7fe f99b 	bl	8000528 <HAL_GPIO_Init>

}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b00b      	add	sp, #44	; 0x2c
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	40021000 	.word	0x40021000
 8002200:	48001400 	.word	0x48001400
 8002204:	48000800 	.word	0x48000800
 8002208:	48000400 	.word	0x48000400

0800220c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002210:	f7fe f806 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002214:	f000 f818 	bl	8002248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002218:	f7ff ff62 	bl	80020e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800221c:	f000 fa16 	bl	800264c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  InitADC();
 8002220:	f000 f85c 	bl	80022dc <InitADC>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4a06      	ldr	r2, [pc, #24]	; (8002244 <main+0x38>)
 800222a:	0019      	movs	r1, r3
 800222c:	0010      	movs	r0, r2
 800222e:	f7fe fb29 	bl	8000884 <HAL_GPIO_TogglePin>


	  ReadADCChannel(1);
 8002232:	2001      	movs	r0, #1
 8002234:	f000 f9ba 	bl	80025ac <ReadADCChannel>
	  HAL_Delay(500);
 8002238:	23fa      	movs	r3, #250	; 0xfa
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	0018      	movs	r0, r3
 800223e:	f7fe f835 	bl	80002ac <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002242:	e7ef      	b.n	8002224 <main+0x18>
 8002244:	48000800 	.word	0x48000800

08002248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b091      	sub	sp, #68	; 0x44
 800224c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224e:	2410      	movs	r4, #16
 8002250:	193b      	adds	r3, r7, r4
 8002252:	0018      	movs	r0, r3
 8002254:	2330      	movs	r3, #48	; 0x30
 8002256:	001a      	movs	r2, r3
 8002258:	2100      	movs	r1, #0
 800225a:	f000 fb65 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800225e:	003b      	movs	r3, r7
 8002260:	0018      	movs	r0, r3
 8002262:	2310      	movs	r3, #16
 8002264:	001a      	movs	r2, r3
 8002266:	2100      	movs	r1, #0
 8002268:	f000 fb5e 	bl	8002928 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800226c:	0021      	movs	r1, r4
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2202      	movs	r2, #2
 8002272:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2201      	movs	r2, #1
 8002278:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800227a:	187b      	adds	r3, r7, r1
 800227c:	2210      	movs	r2, #16
 800227e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2202      	movs	r2, #2
 8002284:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002286:	187b      	adds	r3, r7, r1
 8002288:	2200      	movs	r2, #0
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800228c:	187b      	adds	r3, r7, r1
 800228e:	22a0      	movs	r2, #160	; 0xa0
 8002290:	0392      	lsls	r2, r2, #14
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002294:	187b      	adds	r3, r7, r1
 8002296:	2200      	movs	r2, #0
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800229a:	187b      	adds	r3, r7, r1
 800229c:	0018      	movs	r0, r3
 800229e:	f7fe fb03 	bl	80008a8 <HAL_RCC_OscConfig>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d001      	beq.n	80022aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80022a6:	f000 f9cb 	bl	8002640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022aa:	003b      	movs	r3, r7
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022b0:	003b      	movs	r3, r7
 80022b2:	2202      	movs	r2, #2
 80022b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022b6:	003b      	movs	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022bc:	003b      	movs	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022c2:	003b      	movs	r3, r7
 80022c4:	2101      	movs	r1, #1
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe fde2 	bl	8000e90 <HAL_RCC_ClockConfig>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d001      	beq.n	80022d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80022d0:	f000 f9b6 	bl	8002640 <Error_Handler>
  }
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b011      	add	sp, #68	; 0x44
 80022da:	bd90      	pop	{r4, r7, pc}

080022dc <InitADC>:

/* USER CODE BEGIN 4 */

uint32_t InitADC(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
	uint8_t txbuf[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80022e2:	2314      	movs	r3, #20
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	0018      	movs	r0, r3
 80022e8:	2312      	movs	r3, #18
 80022ea:	001a      	movs	r2, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	f000 fb1b 	bl	8002928 <memset>
	uint8_t rxbuf[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80022f2:	003b      	movs	r3, r7
 80022f4:	0018      	movs	r0, r3
 80022f6:	2312      	movs	r3, #18
 80022f8:	001a      	movs	r2, r3
 80022fa:	2100      	movs	r1, #0
 80022fc:	f000 fb14 	bl	8002928 <memset>

	HAL_Delay(2.2);
 8002300:	2002      	movs	r0, #2
 8002302:	f7fd ffd3 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port,ADC_RESET_Pin,1); // Set reset
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <InitADC+0x78>)
 8002308:	2201      	movs	r2, #1
 800230a:	2120      	movs	r1, #32
 800230c:	0018      	movs	r0, r3
 800230e:	f7fe fa9c 	bl	800084a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <InitADC+0x7c>)
 8002314:	2201      	movs	r2, #1
 8002316:	2120      	movs	r1, #32
 8002318:	0018      	movs	r0, r3
 800231a:	f7fe fa96 	bl	800084a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800231e:	200a      	movs	r0, #10
 8002320:	f7fd ffc4 	bl	80002ac <HAL_Delay>


	ReadADC(0x21, 1, rxbuf); 	// Read Statusbyte to rxbuf
 8002324:	003b      	movs	r3, r7
 8002326:	001a      	movs	r2, r3
 8002328:	2101      	movs	r1, #1
 800232a:	2021      	movs	r0, #33	; 0x21
 800232c:	f000 f8fa 	bl	8002524 <ReadADC>
	//ADCwrite_1register(0x02,rxbuf[0]|0x20); // Set Modified Datarateregister (04h)
	//ReadADC(0x04, 1, rxbuf); 	// Read Statusbyte to rxbuf


	// Select INPUT (INPMUX- Register)
	ADCwrite_1register(0x02,0x13);
 8002330:	2113      	movs	r1, #19
 8002332:	2002      	movs	r0, #2
 8002334:	f000 f812 	bl	800235c <ADCwrite_1register>
	ReadADC(0x02, 1, rxbuf); 	// Read Statusbyte to rxbuf
 8002338:	003b      	movs	r3, r7
 800233a:	001a      	movs	r2, r3
 800233c:	2101      	movs	r1, #1
 800233e:	2002      	movs	r0, #2
 8002340:	f000 f8f0 	bl	8002524 <ReadADC>

	start();
 8002344:	f000 f824 	bl	8002390 <start>

	return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b00a      	add	sp, #40	; 0x28
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	48000800 	.word	0x48000800
 8002358:	48001400 	.word	0x48001400

0800235c <ADCwrite_1register>:


void ADCwrite_1register(uint8_t startadress, uint8_t data)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	0002      	movs	r2, r0
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	1dbb      	adds	r3, r7, #6
 800236a:	1c0a      	adds	r2, r1, #0
 800236c:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[1] = {data};
 800236e:	210c      	movs	r1, #12
 8002370:	187b      	adds	r3, r7, r1
 8002372:	1dba      	adds	r2, r7, #6
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	701a      	strb	r2, [r3, #0]
	writeADC(startadress, 1, txdata);
 8002378:	187a      	adds	r2, r7, r1
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2101      	movs	r1, #1
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f82b 	bl	80023dc <writeADC>
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <start>:


void start(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <start+0x44>)
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe fa54 	bl	800084a <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fd ff82 	bl	80002ac <HAL_Delay>

	uint8_t txbuf[1]= {0x08};				//Start Convertion via Command
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2208      	movs	r2, #8
 80023ac:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,txbuf,1,10);
 80023ae:	1d39      	adds	r1, r7, #4
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <start+0x48>)
 80023b2:	230a      	movs	r3, #10
 80023b4:	2201      	movs	r2, #1
 80023b6:	f7fe ff5b 	bl	8001270 <HAL_SPI_Transmit>

	HAL_Delay(.5);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fd ff76 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <start+0x44>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	2120      	movs	r1, #32
 80023c6:	0018      	movs	r0, r3
 80023c8:	f7fe fa3f 	bl	800084a <HAL_GPIO_WritePin>
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	48001400 	.word	0x48001400
 80023d8:	20000024 	.word	0x20000024

080023dc <writeADC>:


void writeADC(uint8_t startadress, uint8_t length, uint8_t *data)
{
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	b08d      	sub	sp, #52	; 0x34
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	0008      	movs	r0, r1
 80023e6:	61ba      	str	r2, [r7, #24]
 80023e8:	221f      	movs	r2, #31
 80023ea:	18ba      	adds	r2, r7, r2
 80023ec:	7939      	ldrb	r1, [r7, #4]
 80023ee:	7011      	strb	r1, [r2, #0]
 80023f0:	221e      	movs	r2, #30
 80023f2:	18ba      	adds	r2, r7, r2
 80023f4:	1c01      	adds	r1, r0, #0
 80023f6:	7011      	strb	r1, [r2, #0]
 80023f8:	466a      	mov	r2, sp
 80023fa:	607a      	str	r2, [r7, #4]
	if(length==0 && length >0x11)	// sonst werden keine Daten gesendet, 0x11= Max register anzahl (vgl. Table 25. Datenblatt) 
 80023fc:	221e      	movs	r2, #30
 80023fe:	18ba      	adds	r2, r7, r2
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	2a00      	cmp	r2, #0
 8002404:	d105      	bne.n	8002412 <writeADC+0x36>
 8002406:	221e      	movs	r2, #30
 8002408:	18ba      	adds	r2, r7, r2
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	2a11      	cmp	r2, #17
 800240e:	d900      	bls.n	8002412 <writeADC+0x36>
 8002410:	e07d      	b.n	800250e <writeADC+0x132>
	{	
		return 0;
	}
	
	uint8_t txdata[length+2];
 8002412:	221e      	movs	r2, #30
 8002414:	18ba      	adds	r2, r7, r2
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	3202      	adds	r2, #2
 800241a:	1e51      	subs	r1, r2, #1
 800241c:	62b9      	str	r1, [r7, #40]	; 0x28
 800241e:	0011      	movs	r1, r2
 8002420:	6139      	str	r1, [r7, #16]
 8002422:	2100      	movs	r1, #0
 8002424:	6179      	str	r1, [r7, #20]
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	0f49      	lsrs	r1, r1, #29
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	00c6      	lsls	r6, r0, #3
 800242e:	430e      	orrs	r6, r1
 8002430:	6939      	ldr	r1, [r7, #16]
 8002432:	00cd      	lsls	r5, r1, #3
 8002434:	0011      	movs	r1, r2
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	2100      	movs	r1, #0
 800243a:	60f9      	str	r1, [r7, #12]
 800243c:	68bd      	ldr	r5, [r7, #8]
 800243e:	68fe      	ldr	r6, [r7, #12]
 8002440:	0029      	movs	r1, r5
 8002442:	0f49      	lsrs	r1, r1, #29
 8002444:	0030      	movs	r0, r6
 8002446:	00c4      	lsls	r4, r0, #3
 8002448:	430c      	orrs	r4, r1
 800244a:	0029      	movs	r1, r5
 800244c:	00cb      	lsls	r3, r1, #3
 800244e:	0013      	movs	r3, r2
 8002450:	3307      	adds	r3, #7
 8002452:	08db      	lsrs	r3, r3, #3
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	466a      	mov	r2, sp
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	469d      	mov	sp, r3
 800245c:	466b      	mov	r3, sp
 800245e:	3300      	adds	r3, #0
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
	txdata[0]= startadress | 0x40; 	// set write command
 8002462:	211f      	movs	r1, #31
 8002464:	187b      	adds	r3, r7, r1
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	4313      	orrs	r3, r2
 800246c:	b2da      	uxtb	r2, r3
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	701a      	strb	r2, [r3, #0]
	txdata[1]= length -1; 	// 0x00 is 1 byte
 8002472:	231e      	movs	r3, #30
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	3b01      	subs	r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	705a      	strb	r2, [r3, #1]
	
	for(uint8_t i=0; i<length; i++)	// Dateiinhalt in txdata plazieren
 8002480:	2317      	movs	r3, #23
 8002482:	2218      	movs	r2, #24
 8002484:	4694      	mov	ip, r2
 8002486:	44bc      	add	ip, r7
 8002488:	4463      	add	r3, ip
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	e014      	b.n	80024ba <writeADC+0xde>
	{
		txdata[i+2]= *(data+i);
 8002490:	2017      	movs	r0, #23
 8002492:	2418      	movs	r4, #24
 8002494:	193b      	adds	r3, r7, r4
 8002496:	181b      	adds	r3, r3, r0
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	18d2      	adds	r2, r2, r3
 800249e:	193b      	adds	r3, r7, r4
 80024a0:	181b      	adds	r3, r3, r0
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	3302      	adds	r3, #2
 80024a6:	7811      	ldrb	r1, [r2, #0]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<length; i++)	// Dateiinhalt in txdata plazieren
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	181b      	adds	r3, r3, r0
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	193b      	adds	r3, r7, r4
 80024b4:	181b      	adds	r3, r3, r0
 80024b6:	3201      	adds	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	2317      	movs	r3, #23
 80024bc:	2218      	movs	r2, #24
 80024be:	18ba      	adds	r2, r7, r2
 80024c0:	18d2      	adds	r2, r2, r3
 80024c2:	231e      	movs	r3, #30
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d3e0      	bcc.n	8002490 <writeADC+0xb4>
	}
	
	
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <writeADC+0x140>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	2120      	movs	r1, #32
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe f9b8 	bl	800084a <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fd fee6 	bl	80002ac <HAL_Delay>

	HAL_SPI_Transmit(&hspi1,txdata,length+2,10);
 80024e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e2:	231e      	movs	r3, #30
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3302      	adds	r3, #2
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	480c      	ldr	r0, [pc, #48]	; (8002520 <writeADC+0x144>)
 80024f0:	230a      	movs	r3, #10
 80024f2:	f7fe febd 	bl	8001270 <HAL_SPI_Transmit>
	
	HAL_Delay(.5);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fd fed8 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <writeADC+0x140>)
 80024fe:	2201      	movs	r2, #1
 8002500:	2120      	movs	r1, #32
 8002502:	0018      	movs	r0, r3
 8002504:	f7fe f9a1 	bl	800084a <HAL_GPIO_WritePin>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	469d      	mov	sp, r3
 800250c:	e002      	b.n	8002514 <writeADC+0x138>
		return 0;
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	469d      	mov	sp, r3
}
 8002514:	46bd      	mov	sp, r7
 8002516:	b00d      	add	sp, #52	; 0x34
 8002518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	48001400 	.word	0x48001400
 8002520:	20000024 	.word	0x20000024

08002524 <ReadADC>:

void ReadADC(uint8_t startadress, uint8_t length, uint8_t *rxdata) 	// Speichert rückgabe in rxdata
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	603a      	str	r2, [r7, #0]
 800252c:	1dfb      	adds	r3, r7, #7
 800252e:	1c02      	adds	r2, r0, #0
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	1dbb      	adds	r3, r7, #6
 8002534:	1c0a      	adds	r2, r1, #0
 8002536:	701a      	strb	r2, [r3, #0]
	uint8_t txdata[2] = {startadress |0x20 , length-1};	// create array for spi transmit
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2220      	movs	r2, #32
 800253e:	4313      	orrs	r3, r2
 8002540:	b2da      	uxtb	r2, r3
 8002542:	240c      	movs	r4, #12
 8002544:	193b      	adds	r3, r7, r4
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	1dbb      	adds	r3, r7, #6
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	3b01      	subs	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	193b      	adds	r3, r7, r4
 8002552:	705a      	strb	r2, [r3, #1]
	
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <ReadADC+0x80>)
 8002556:	2200      	movs	r2, #0
 8002558:	2120      	movs	r1, #32
 800255a:	0018      	movs	r0, r3
 800255c:	f7fe f975 	bl	800084a <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 8002560:	2000      	movs	r0, #0
 8002562:	f7fd fea3 	bl	80002ac <HAL_Delay>

	HAL_SPI_Transmit(&hspi1,txdata, length+1,	  10);
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	1939      	adds	r1, r7, r4
 8002572:	480d      	ldr	r0, [pc, #52]	; (80025a8 <ReadADC+0x84>)
 8002574:	230a      	movs	r3, #10
 8002576:	f7fe fe7b 	bl	8001270 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rxdata, length, 10);
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b29a      	uxth	r2, r3
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	4809      	ldr	r0, [pc, #36]	; (80025a8 <ReadADC+0x84>)
 8002584:	230a      	movs	r3, #10
 8002586:	f7fe ffdd 	bl	8001544 <HAL_SPI_Receive>

	HAL_Delay(.5);
 800258a:	2000      	movs	r0, #0
 800258c:	f7fd fe8e 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <ReadADC+0x80>)
 8002592:	2201      	movs	r2, #1
 8002594:	2120      	movs	r1, #32
 8002596:	0018      	movs	r0, r3
 8002598:	f7fe f957 	bl	800084a <HAL_GPIO_WritePin>
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b005      	add	sp, #20
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	48001400 	.word	0x48001400
 80025a8:	20000024 	.word	0x20000024

080025ac <ReadADCChannel>:




uint32_t ReadADCChannel(uint8_t Channel) 	// Positive ADC input, Negativer ist AINCOM
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	0002      	movs	r2, r0
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	701a      	strb	r2, [r3, #0]
	uint8_t txbuf[3]={0,0,0};
 80025b8:	2114      	movs	r1, #20
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	2200      	movs	r2, #0
 80025c4:	705a      	strb	r2, [r3, #1]
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2200      	movs	r2, #0
 80025ca:	709a      	strb	r2, [r3, #2]
	uint8_t rxbuf[5];

	if (Channel>5)	// DS124S06 hat nur 5 Kanäle
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d901      	bls.n	80025d8 <ReadADCChannel+0x2c>
		return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e028      	b.n	800262a <ReadADCChannel+0x7e>

	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,0);
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <ReadADCChannel+0x88>)
 80025da:	2200      	movs	r2, #0
 80025dc:	2120      	movs	r1, #32
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fe f933 	bl	800084a <HAL_GPIO_WritePin>


	while( HAL_GPIO_ReadPin(ADC_DRDY_GPIO_Port, ADC_DRDY_Pin) );
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <ReadADCChannel+0x8c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7fe f910 	bl	8000810 <HAL_GPIO_ReadPin>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d1f8      	bne.n	80025e6 <ReadADCChannel+0x3a>


	// Eigentlich Warten bis Fertig Konvertiert !!!!!!!!!


	txbuf[0]= 0x12;	//RDATA => Read Data
 80025f4:	2114      	movs	r1, #20
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2212      	movs	r2, #18
 80025fa:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,txbuf,1,10);
 80025fc:	1879      	adds	r1, r7, r1
 80025fe:	480f      	ldr	r0, [pc, #60]	; (800263c <ReadADCChannel+0x90>)
 8002600:	230a      	movs	r3, #10
 8002602:	2201      	movs	r2, #1
 8002604:	f7fe fe34 	bl	8001270 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, rxbuf,3,10); //Read Datarate Register --> Ohne CRC und Status
 8002608:	230c      	movs	r3, #12
 800260a:	18f9      	adds	r1, r7, r3
 800260c:	480b      	ldr	r0, [pc, #44]	; (800263c <ReadADCChannel+0x90>)
 800260e:	230a      	movs	r3, #10
 8002610:	2203      	movs	r2, #3
 8002612:	f7fe ff97 	bl	8001544 <HAL_SPI_Receive>

	HAL_Delay(.5);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fd fe48 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <ReadADCChannel+0x88>)
 800261e:	2201      	movs	r2, #1
 8002620:	2120      	movs	r1, #32
 8002622:	0018      	movs	r0, r3
 8002624:	f7fe f911 	bl	800084a <HAL_GPIO_WritePin>

	return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b006      	add	sp, #24
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	48001400 	.word	0x48001400
 8002638:	48000400 	.word	0x48000400
 800263c:	20000024 	.word	0x20000024

08002640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <MX_SPI1_Init+0x78>)
 8002654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002658:	2282      	movs	r2, #130	; 0x82
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002666:	22e0      	movs	r2, #224	; 0xe0
 8002668:	00d2      	lsls	r2, r2, #3
 800266a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_SPI1_Init+0x74>)
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002674:	2201      	movs	r2, #1
 8002676:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_SPI1_Init+0x74>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002682:	2218      	movs	r2, #24
 8002684:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_SPI1_Init+0x74>)
 800268e:	2200      	movs	r2, #0
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <MX_SPI1_Init+0x74>)
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_SPI1_Init+0x74>)
 800269a:	2207      	movs	r2, #7
 800269c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <MX_SPI1_Init+0x74>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_SPI1_Init+0x74>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <MX_SPI1_Init+0x74>)
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe fd45 	bl	800113c <HAL_SPI_Init>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80026b6:	f7ff ffc3 	bl	8002640 <Error_Handler>
  }

}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000024 	.word	0x20000024
 80026c4:	40013000 	.word	0x40013000

080026c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	2314      	movs	r3, #20
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	0018      	movs	r0, r3
 80026d6:	2314      	movs	r3, #20
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f000 f924 	bl	8002928 <memset>
  if(spiHandle->Instance==SPI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_SPI_MspInit+0xa0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13a      	bne.n	8002760 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_SPI_MspInit+0xa4>)
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <HAL_SPI_MspInit+0xa4>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0149      	lsls	r1, r1, #5
 80026f4:	430a      	orrs	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_SPI_MspInit+0xa4>)
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	015b      	lsls	r3, r3, #5
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_SPI_MspInit+0xa4>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_SPI_MspInit+0xa4>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0289      	lsls	r1, r1, #10
 8002710:	430a      	orrs	r2, r1
 8002712:	615a      	str	r2, [r3, #20]
 8002714:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_SPI_MspInit+0xa4>)
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	029b      	lsls	r3, r3, #10
 800271c:	4013      	ands	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002722:	2114      	movs	r1, #20
 8002724:	187b      	adds	r3, r7, r1
 8002726:	22e0      	movs	r2, #224	; 0xe0
 8002728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2202      	movs	r2, #2
 800272e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2203      	movs	r2, #3
 800273a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2200      	movs	r2, #0
 8002740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	187a      	adds	r2, r7, r1
 8002744:	2390      	movs	r3, #144	; 0x90
 8002746:	05db      	lsls	r3, r3, #23
 8002748:	0011      	movs	r1, r2
 800274a:	0018      	movs	r0, r3
 800274c:	f7fd feec 	bl	8000528 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2019      	movs	r0, #25
 8002756:	f7fd fe6f 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800275a:	2019      	movs	r0, #25
 800275c:	f7fd fe81 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b00a      	add	sp, #40	; 0x28
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40013000 	.word	0x40013000
 800276c:	40021000 	.word	0x40021000

08002770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_MspInit+0x44>)
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_MspInit+0x44>)
 800277c:	2101      	movs	r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	619a      	str	r2, [r3, #24]
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_MspInit+0x44>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2201      	movs	r2, #1
 8002788:	4013      	ands	r3, r2
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_MspInit+0x44>)
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <HAL_MspInit+0x44>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0549      	lsls	r1, r1, #21
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_MspInit+0x44>)
 800279e:	69da      	ldr	r2, [r3, #28]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4013      	ands	r3, r2
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40021000 	.word	0x40021000

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e0:	f7fd fd4e 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e4:	46c0      	nop			; (mov r8, r8)
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <SPI1_IRQHandler+0x14>)
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff f9fa 	bl	8001bec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	20000024 	.word	0x20000024

08002804 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <SystemInit+0x70>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <SystemInit+0x70>)
 800280e:	2101      	movs	r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8002814:	4b17      	ldr	r3, [pc, #92]	; (8002874 <SystemInit+0x70>)
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <SystemInit+0x70>)
 800281a:	4917      	ldr	r1, [pc, #92]	; (8002878 <SystemInit+0x74>)
 800281c:	400a      	ands	r2, r1
 800281e:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <SystemInit+0x70>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <SystemInit+0x70>)
 8002826:	4915      	ldr	r1, [pc, #84]	; (800287c <SystemInit+0x78>)
 8002828:	400a      	ands	r2, r1
 800282a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <SystemInit+0x70>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <SystemInit+0x70>)
 8002832:	4913      	ldr	r1, [pc, #76]	; (8002880 <SystemInit+0x7c>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <SystemInit+0x70>)
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <SystemInit+0x70>)
 800283e:	4911      	ldr	r1, [pc, #68]	; (8002884 <SystemInit+0x80>)
 8002840:	400a      	ands	r2, r1
 8002842:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <SystemInit+0x70>)
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <SystemInit+0x70>)
 800284a:	210f      	movs	r1, #15
 800284c:	438a      	bics	r2, r1
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <SystemInit+0x70>)
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <SystemInit+0x70>)
 8002856:	490c      	ldr	r1, [pc, #48]	; (8002888 <SystemInit+0x84>)
 8002858:	400a      	ands	r2, r1
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SystemInit+0x70>)
 800285e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SystemInit+0x70>)
 8002862:	2101      	movs	r1, #1
 8002864:	438a      	bics	r2, r1
 8002866:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <SystemInit+0x70>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	f8ffb80c 	.word	0xf8ffb80c
 800287c:	fef6ffff 	.word	0xfef6ffff
 8002880:	fffbffff 	.word	0xfffbffff
 8002884:	ffc0ffff 	.word	0xffc0ffff
 8002888:	fffffeac 	.word	0xfffffeac

0800288c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002892:	490e      	ldr	r1, [pc, #56]	; (80028cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <LoopForever+0xe>)
  movs r3, #0
 8002896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002898:	e002      	b.n	80028a0 <LoopCopyDataInit>

0800289a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800289c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289e:	3304      	adds	r3, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a4:	d3f9      	bcc.n	800289a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a8:	4c0b      	ldr	r4, [pc, #44]	; (80028d8 <LoopForever+0x16>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028ac:	e001      	b.n	80028b2 <LoopFillZerobss>

080028ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b0:	3204      	adds	r2, #4

080028b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b4:	d3fb      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028b6:	f7ff ffa5 	bl	8002804 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80028ba:	f000 f811 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028be:	f7ff fca5 	bl	800220c <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>
  ldr   r0, =_estack
 80028c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80028d0:	08002988 	.word	0x08002988
  ldr r2, =_sbss
 80028d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80028d8:	20000088 	.word	0x20000088

080028dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_COMP_IRQHandler>
	...

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	2600      	movs	r6, #0
 80028e4:	4d0c      	ldr	r5, [pc, #48]	; (8002918 <__libc_init_array+0x38>)
 80028e6:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	2600      	movs	r6, #0
 80028f2:	f000 f821 	bl	8002938 <_init>
 80028f6:	4d0a      	ldr	r5, [pc, #40]	; (8002920 <__libc_init_array+0x40>)
 80028f8:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <__libc_init_array+0x44>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	00b3      	lsls	r3, r6, #2
 8002906:	58eb      	ldr	r3, [r5, r3]
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	00b3      	lsls	r3, r6, #2
 8002910:	58eb      	ldr	r3, [r5, r3]
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	08002980 	.word	0x08002980
 800291c:	08002980 	.word	0x08002980
 8002920:	08002980 	.word	0x08002980
 8002924:	08002984 	.word	0x08002984

08002928 <memset>:
 8002928:	0003      	movs	r3, r0
 800292a:	1812      	adds	r2, r2, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	7019      	strb	r1, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
