
BuP_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002734  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002824  08002824  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002824  08002824  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002824  08002824  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800282c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000004  08002830  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002830  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7e9  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a95  00000000  00000000  0002b815  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f8  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000530  00000000  00000000  0002d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ec12  00000000  00000000  0002ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076d1  00000000  00000000  0003c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004c4a4  00000000  00000000  000440bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009055f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001350  00000000  00000000  000905dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027dc 	.word	0x080027dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080027dc 	.word	0x080027dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 f9ed 	bl	8002614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f000 ff4e 	bl	80010f0 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004a4:	230f      	movs	r3, #15
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2221      	movs	r2, #33	; 0x21
 80004b0:	5c9b      	ldrb	r3, [r3, r2]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d007      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2204      	movs	r2, #4
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004be:	230f      	movs	r3, #15
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	e028      	b.n	800051a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	210e      	movs	r1, #14
 80004d4:	438a      	bics	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2101      	movs	r1, #1
 80004e4:	438a      	bics	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	2101      	movs	r1, #1
 80004f2:	4091      	lsls	r1, r2
 80004f4:	000a      	movs	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2221      	movs	r2, #33	; 0x21
 80004fc:	2101      	movs	r1, #1
 80004fe:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050c:	2b00      	cmp	r3, #0
 800050e:	d004      	beq.n	800051a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	0010      	movs	r0, r2
 8000518:	4798      	blx	r3
    } 
  }
  return status;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800053e:	e14f      	b.n	80007e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	4091      	lsls	r1, r2
 800054a:	000a      	movs	r2, r1
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <HAL_GPIO_Init+0x30>
 8000556:	e140      	b.n	80007da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d003      	beq.n	8000568 <HAL_GPIO_Init+0x40>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b12      	cmp	r3, #18
 8000566:	d123      	bne.n	80005b0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	08da      	lsrs	r2, r3, #3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3208      	adds	r2, #8
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	58d3      	ldr	r3, [r2, r3]
 8000574:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2207      	movs	r2, #7
 800057a:	4013      	ands	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	220f      	movs	r2, #15
 8000580:	409a      	lsls	r2, r3
 8000582:	0013      	movs	r3, r2
 8000584:	43da      	mvns	r2, r3
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	691a      	ldr	r2, [r3, #16]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2107      	movs	r1, #7
 8000594:	400b      	ands	r3, r1
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	08da      	lsrs	r2, r3, #3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3208      	adds	r2, #8
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	6939      	ldr	r1, [r7, #16]
 80005ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2203      	movs	r2, #3
 80005bc:	409a      	lsls	r2, r3
 80005be:	0013      	movs	r3, r2
 80005c0:	43da      	mvns	r2, r3
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	4013      	ands	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2203      	movs	r2, #3
 80005ce:	401a      	ands	r2, r3
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0013      	movs	r3, r2
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	4313      	orrs	r3, r2
 80005dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00b      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d007      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005f8:	2b11      	cmp	r3, #17
 80005fa:	d003      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b12      	cmp	r3, #18
 8000602:	d130      	bne.n	8000666 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	409a      	lsls	r2, r3
 8000626:	0013      	movs	r3, r2
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800063a:	2201      	movs	r2, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	409a      	lsls	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	43da      	mvns	r2, r3
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	2201      	movs	r2, #1
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2203      	movs	r2, #3
 8000672:	409a      	lsls	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	43da      	mvns	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	409a      	lsls	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4313      	orrs	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	055b      	lsls	r3, r3, #21
 800069e:	4013      	ands	r3, r2
 80006a0:	d100      	bne.n	80006a4 <HAL_GPIO_Init+0x17c>
 80006a2:	e09a      	b.n	80007da <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4013      	ands	r3, r2
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80006bc:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <HAL_GPIO_Init+0x2d4>)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	089b      	lsrs	r3, r3, #2
 80006c2:	3302      	adds	r3, #2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	589b      	ldr	r3, [r3, r2]
 80006c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2203      	movs	r2, #3
 80006ce:	4013      	ands	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	220f      	movs	r2, #15
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0013      	movs	r3, r2
 80006d8:	43da      	mvns	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	2390      	movs	r3, #144	; 0x90
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d013      	beq.n	8000712 <HAL_GPIO_Init+0x1ea>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a44      	ldr	r2, [pc, #272]	; (8000800 <HAL_GPIO_Init+0x2d8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d00d      	beq.n	800070e <HAL_GPIO_Init+0x1e6>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a43      	ldr	r2, [pc, #268]	; (8000804 <HAL_GPIO_Init+0x2dc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d007      	beq.n	800070a <HAL_GPIO_Init+0x1e2>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a42      	ldr	r2, [pc, #264]	; (8000808 <HAL_GPIO_Init+0x2e0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_GPIO_Init+0x1de>
 8000702:	2303      	movs	r3, #3
 8000704:	e006      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 8000706:	2305      	movs	r3, #5
 8000708:	e004      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 800070a:	2302      	movs	r3, #2
 800070c:	e002      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 8000712:	2300      	movs	r3, #0
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	2103      	movs	r1, #3
 8000718:	400a      	ands	r2, r1
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	4093      	lsls	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000724:	4935      	ldr	r1, [pc, #212]	; (80007fc <HAL_GPIO_Init+0x2d4>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	3302      	adds	r3, #2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	43da      	mvns	r2, r3
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	4013      	ands	r3, r2
 8000740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	025b      	lsls	r3, r3, #9
 800074a:	4013      	ands	r3, r2
 800074c:	d003      	beq.n	8000756 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <HAL_GPIO_Init+0x2e4>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	43da      	mvns	r2, r3
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	029b      	lsls	r3, r3, #10
 8000774:	4013      	ands	r3, r2
 8000776:	d003      	beq.n	8000780 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4313      	orrs	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	43da      	mvns	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	035b      	lsls	r3, r3, #13
 800079e:	4013      	ands	r3, r2
 80007a0:	d003      	beq.n	80007aa <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	43da      	mvns	r2, r3
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	039b      	lsls	r3, r3, #14
 80007c8:	4013      	ands	r3, r2
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	40da      	lsrs	r2, r3
 80007e8:	1e13      	subs	r3, r2, #0
 80007ea:	d000      	beq.n	80007ee <HAL_GPIO_Init+0x2c6>
 80007ec:	e6a8      	b.n	8000540 <HAL_GPIO_Init+0x18>
  } 
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b006      	add	sp, #24
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000
 8000800:	48000400 	.word	0x48000400
 8000804:	48000800 	.word	0x48000800
 8000808:	48000c00 	.word	0x48000c00
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	0008      	movs	r0, r1
 800081a:	0011      	movs	r1, r2
 800081c:	1cbb      	adds	r3, r7, #2
 800081e:	1c02      	adds	r2, r0, #0
 8000820:	801a      	strh	r2, [r3, #0]
 8000822:	1c7b      	adds	r3, r7, #1
 8000824:	1c0a      	adds	r2, r1, #0
 8000826:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000828:	1c7b      	adds	r3, r7, #1
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d004      	beq.n	800083a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000830:	1cbb      	adds	r3, r7, #2
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000838:	e003      	b.n	8000842 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800083a:	1cbb      	adds	r3, r7, #2
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	000a      	movs	r2, r1
 8000854:	1cbb      	adds	r3, r7, #2
 8000856:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	1cbb      	adds	r3, r7, #2
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	405a      	eors	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	615a      	str	r2, [r3, #20]
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2201      	movs	r2, #1
 8000882:	4013      	ands	r3, r2
 8000884:	d100      	bne.n	8000888 <HAL_RCC_OscConfig+0x18>
 8000886:	e08d      	b.n	80009a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000888:	4bc3      	ldr	r3, [pc, #780]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	220c      	movs	r2, #12
 800088e:	4013      	ands	r3, r2
 8000890:	2b04      	cmp	r3, #4
 8000892:	d00e      	beq.n	80008b2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000894:	4bc0      	ldr	r3, [pc, #768]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	220c      	movs	r2, #12
 800089a:	4013      	ands	r3, r2
 800089c:	2b08      	cmp	r3, #8
 800089e:	d116      	bne.n	80008ce <HAL_RCC_OscConfig+0x5e>
 80008a0:	4bbd      	ldr	r3, [pc, #756]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	025b      	lsls	r3, r3, #9
 80008a8:	401a      	ands	r2, r3
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	025b      	lsls	r3, r3, #9
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d10d      	bne.n	80008ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008b2:	4bb9      	ldr	r3, [pc, #740]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	029b      	lsls	r3, r3, #10
 80008ba:	4013      	ands	r3, r2
 80008bc:	d100      	bne.n	80008c0 <HAL_RCC_OscConfig+0x50>
 80008be:	e070      	b.n	80009a2 <HAL_RCC_OscConfig+0x132>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <HAL_RCC_OscConfig+0x5a>
 80008c8:	e06b      	b.n	80009a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e2b6      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d107      	bne.n	80008e6 <HAL_RCC_OscConfig+0x76>
 80008d6:	4bb0      	ldr	r3, [pc, #704]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4baf      	ldr	r3, [pc, #700]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0249      	lsls	r1, r1, #9
 80008e0:	430a      	orrs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e02f      	b.n	8000946 <HAL_RCC_OscConfig+0xd6>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10c      	bne.n	8000908 <HAL_RCC_OscConfig+0x98>
 80008ee:	4baa      	ldr	r3, [pc, #680]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4ba9      	ldr	r3, [pc, #676]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008f4:	49a9      	ldr	r1, [pc, #676]	; (8000b9c <HAL_RCC_OscConfig+0x32c>)
 80008f6:	400a      	ands	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	4ba7      	ldr	r3, [pc, #668]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4ba6      	ldr	r3, [pc, #664]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000900:	49a7      	ldr	r1, [pc, #668]	; (8000ba0 <HAL_RCC_OscConfig+0x330>)
 8000902:	400a      	ands	r2, r1
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e01e      	b.n	8000946 <HAL_RCC_OscConfig+0xd6>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b05      	cmp	r3, #5
 800090e:	d10e      	bne.n	800092e <HAL_RCC_OscConfig+0xbe>
 8000910:	4ba1      	ldr	r3, [pc, #644]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4ba0      	ldr	r3, [pc, #640]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	02c9      	lsls	r1, r1, #11
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	4b9e      	ldr	r3, [pc, #632]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4b9d      	ldr	r3, [pc, #628]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e00b      	b.n	8000946 <HAL_RCC_OscConfig+0xd6>
 800092e:	4b9a      	ldr	r3, [pc, #616]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b99      	ldr	r3, [pc, #612]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000934:	4999      	ldr	r1, [pc, #612]	; (8000b9c <HAL_RCC_OscConfig+0x32c>)
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	4b97      	ldr	r3, [pc, #604]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b96      	ldr	r3, [pc, #600]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000940:	4997      	ldr	r1, [pc, #604]	; (8000ba0 <HAL_RCC_OscConfig+0x330>)
 8000942:	400a      	ands	r2, r1
 8000944:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d014      	beq.n	8000978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800094e:	f7ff fca3 	bl	8000298 <HAL_GetTick>
 8000952:	0003      	movs	r3, r0
 8000954:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000956:	e008      	b.n	800096a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000958:	f7ff fc9e 	bl	8000298 <HAL_GetTick>
 800095c:	0002      	movs	r2, r0
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b64      	cmp	r3, #100	; 0x64
 8000964:	d901      	bls.n	800096a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000966:	2303      	movs	r3, #3
 8000968:	e268      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	4b8b      	ldr	r3, [pc, #556]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	2380      	movs	r3, #128	; 0x80
 8000970:	029b      	lsls	r3, r3, #10
 8000972:	4013      	ands	r3, r2
 8000974:	d0f0      	beq.n	8000958 <HAL_RCC_OscConfig+0xe8>
 8000976:	e015      	b.n	80009a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000978:	f7ff fc8e 	bl	8000298 <HAL_GetTick>
 800097c:	0003      	movs	r3, r0
 800097e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000980:	e008      	b.n	8000994 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000982:	f7ff fc89 	bl	8000298 <HAL_GetTick>
 8000986:	0002      	movs	r2, r0
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	2b64      	cmp	r3, #100	; 0x64
 800098e:	d901      	bls.n	8000994 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000990:	2303      	movs	r3, #3
 8000992:	e253      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000994:	4b80      	ldr	r3, [pc, #512]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	4013      	ands	r3, r2
 800099e:	d1f0      	bne.n	8000982 <HAL_RCC_OscConfig+0x112>
 80009a0:	e000      	b.n	80009a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2202      	movs	r2, #2
 80009aa:	4013      	ands	r3, r2
 80009ac:	d100      	bne.n	80009b0 <HAL_RCC_OscConfig+0x140>
 80009ae:	e069      	b.n	8000a84 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009b0:	4b79      	ldr	r3, [pc, #484]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	220c      	movs	r2, #12
 80009b6:	4013      	ands	r3, r2
 80009b8:	d00b      	beq.n	80009d2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009ba:	4b77      	ldr	r3, [pc, #476]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	220c      	movs	r2, #12
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d11c      	bne.n	8000a00 <HAL_RCC_OscConfig+0x190>
 80009c6:	4b74      	ldr	r3, [pc, #464]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	025b      	lsls	r3, r3, #9
 80009ce:	4013      	ands	r3, r2
 80009d0:	d116      	bne.n	8000a00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009d2:	4b71      	ldr	r3, [pc, #452]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2202      	movs	r2, #2
 80009d8:	4013      	ands	r3, r2
 80009da:	d005      	beq.n	80009e8 <HAL_RCC_OscConfig+0x178>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d001      	beq.n	80009e8 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e229      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e8:	4b6b      	ldr	r3, [pc, #428]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	22f8      	movs	r2, #248	; 0xf8
 80009ee:	4393      	bics	r3, r2
 80009f0:	0019      	movs	r1, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	4b67      	ldr	r3, [pc, #412]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fe:	e041      	b.n	8000a84 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d024      	beq.n	8000a52 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a08:	4b63      	ldr	r3, [pc, #396]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a14:	f7ff fc40 	bl	8000298 <HAL_GetTick>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a1c:	e008      	b.n	8000a30 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1e:	f7ff fc3b 	bl	8000298 <HAL_GetTick>
 8000a22:	0002      	movs	r2, r0
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d901      	bls.n	8000a30 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	e205      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a30:	4b59      	ldr	r3, [pc, #356]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2202      	movs	r2, #2
 8000a36:	4013      	ands	r3, r2
 8000a38:	d0f1      	beq.n	8000a1e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	22f8      	movs	r2, #248	; 0xf8
 8000a40:	4393      	bics	r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	00da      	lsls	r2, r3, #3
 8000a4a:	4b53      	ldr	r3, [pc, #332]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e018      	b.n	8000a84 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a52:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b50      	ldr	r3, [pc, #320]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	438a      	bics	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a5e:	f7ff fc1b 	bl	8000298 <HAL_GetTick>
 8000a62:	0003      	movs	r3, r0
 8000a64:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a66:	e008      	b.n	8000a7a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a68:	f7ff fc16 	bl	8000298 <HAL_GetTick>
 8000a6c:	0002      	movs	r2, r0
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d901      	bls.n	8000a7a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000a76:	2303      	movs	r3, #3
 8000a78:	e1e0      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a7a:	4b47      	ldr	r3, [pc, #284]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2202      	movs	r2, #2
 8000a80:	4013      	ands	r3, r2
 8000a82:	d1f1      	bne.n	8000a68 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2208      	movs	r2, #8
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	d036      	beq.n	8000afc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d019      	beq.n	8000aca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbf9 	bl	8000298 <HAL_GetTick>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aac:	f7ff fbf4 	bl	8000298 <HAL_GetTick>
 8000ab0:	0002      	movs	r2, r0
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e1be      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000abe:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d0f1      	beq.n	8000aac <HAL_RCC_OscConfig+0x23c>
 8000ac8:	e018      	b.n	8000afc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad6:	f7ff fbdf 	bl	8000298 <HAL_GetTick>
 8000ada:	0003      	movs	r3, r0
 8000adc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ade:	e008      	b.n	8000af2 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae0:	f7ff fbda 	bl	8000298 <HAL_GetTick>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d901      	bls.n	8000af2 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000aee:	2303      	movs	r3, #3
 8000af0:	e1a4      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	2202      	movs	r2, #2
 8000af8:	4013      	ands	r3, r2
 8000afa:	d1f1      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2204      	movs	r2, #4
 8000b02:	4013      	ands	r3, r2
 8000b04:	d100      	bne.n	8000b08 <HAL_RCC_OscConfig+0x298>
 8000b06:	e0b5      	b.n	8000c74 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b08:	2317      	movs	r3, #23
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000b12:	69da      	ldr	r2, [r3, #28]
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	055b      	lsls	r3, r3, #21
 8000b18:	4013      	ands	r3, r2
 8000b1a:	d111      	bne.n	8000b40 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000b1e:	69da      	ldr	r2, [r3, #28]
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0549      	lsls	r1, r1, #21
 8000b26:	430a      	orrs	r2, r1
 8000b28:	61da      	str	r2, [r3, #28]
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000b2c:	69da      	ldr	r2, [r3, #28]
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	055b      	lsls	r3, r3, #21
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000b38:	2317      	movs	r3, #23
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_RCC_OscConfig+0x334>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d11a      	bne.n	8000b82 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_RCC_OscConfig+0x334>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_RCC_OscConfig+0x334>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0049      	lsls	r1, r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fb9d 	bl	8000298 <HAL_GetTick>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b62:	e008      	b.n	8000b76 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b64:	f7ff fb98 	bl	8000298 <HAL_GetTick>
 8000b68:	0002      	movs	r2, r0
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b64      	cmp	r3, #100	; 0x64
 8000b70:	d901      	bls.n	8000b76 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000b72:	2303      	movs	r3, #3
 8000b74:	e162      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_RCC_OscConfig+0x334>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d0f0      	beq.n	8000b64 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d10e      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x338>
 8000b8a:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000b8c:	6a1a      	ldr	r2, [r3, #32]
 8000b8e:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <HAL_RCC_OscConfig+0x328>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	621a      	str	r2, [r3, #32]
 8000b96:	e035      	b.n	8000c04 <HAL_RCC_OscConfig+0x394>
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	fffeffff 	.word	0xfffeffff
 8000ba0:	fffbffff 	.word	0xfffbffff
 8000ba4:	40007000 	.word	0x40007000
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d10c      	bne.n	8000bca <HAL_RCC_OscConfig+0x35a>
 8000bb0:	4ba4      	ldr	r3, [pc, #656]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bb2:	6a1a      	ldr	r2, [r3, #32]
 8000bb4:	4ba3      	ldr	r3, [pc, #652]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	438a      	bics	r2, r1
 8000bba:	621a      	str	r2, [r3, #32]
 8000bbc:	4ba1      	ldr	r3, [pc, #644]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bbe:	6a1a      	ldr	r2, [r3, #32]
 8000bc0:	4ba0      	ldr	r3, [pc, #640]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	438a      	bics	r2, r1
 8000bc6:	621a      	str	r2, [r3, #32]
 8000bc8:	e01c      	b.n	8000c04 <HAL_RCC_OscConfig+0x394>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x37c>
 8000bd2:	4b9c      	ldr	r3, [pc, #624]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bd4:	6a1a      	ldr	r2, [r3, #32]
 8000bd6:	4b9b      	ldr	r3, [pc, #620]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bd8:	2104      	movs	r1, #4
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	621a      	str	r2, [r3, #32]
 8000bde:	4b99      	ldr	r3, [pc, #612]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	4b98      	ldr	r3, [pc, #608]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	621a      	str	r2, [r3, #32]
 8000bea:	e00b      	b.n	8000c04 <HAL_RCC_OscConfig+0x394>
 8000bec:	4b95      	ldr	r3, [pc, #596]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bee:	6a1a      	ldr	r2, [r3, #32]
 8000bf0:	4b94      	ldr	r3, [pc, #592]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	438a      	bics	r2, r1
 8000bf6:	621a      	str	r2, [r3, #32]
 8000bf8:	4b92      	ldr	r3, [pc, #584]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bfa:	6a1a      	ldr	r2, [r3, #32]
 8000bfc:	4b91      	ldr	r3, [pc, #580]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000bfe:	2104      	movs	r1, #4
 8000c00:	438a      	bics	r2, r1
 8000c02:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d014      	beq.n	8000c36 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c0c:	f7ff fb44 	bl	8000298 <HAL_GetTick>
 8000c10:	0003      	movs	r3, r0
 8000c12:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c14:	e009      	b.n	8000c2a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c16:	f7ff fb3f 	bl	8000298 <HAL_GetTick>
 8000c1a:	0002      	movs	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	4a89      	ldr	r2, [pc, #548]	; (8000e48 <HAL_RCC_OscConfig+0x5d8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e108      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c2a:	4b86      	ldr	r3, [pc, #536]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c2c:	6a1b      	ldr	r3, [r3, #32]
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4013      	ands	r3, r2
 8000c32:	d0f0      	beq.n	8000c16 <HAL_RCC_OscConfig+0x3a6>
 8000c34:	e013      	b.n	8000c5e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c36:	f7ff fb2f 	bl	8000298 <HAL_GetTick>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c3e:	e009      	b.n	8000c54 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c40:	f7ff fb2a 	bl	8000298 <HAL_GetTick>
 8000c44:	0002      	movs	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	4a7f      	ldr	r2, [pc, #508]	; (8000e48 <HAL_RCC_OscConfig+0x5d8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e0f3      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c54:	4b7b      	ldr	r3, [pc, #492]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	2202      	movs	r2, #2
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c5e:	2317      	movs	r3, #23
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d105      	bne.n	8000c74 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c68:	4b76      	ldr	r3, [pc, #472]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c6a:	69da      	ldr	r2, [r3, #28]
 8000c6c:	4b75      	ldr	r3, [pc, #468]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c6e:	4977      	ldr	r1, [pc, #476]	; (8000e4c <HAL_RCC_OscConfig+0x5dc>)
 8000c70:	400a      	ands	r2, r1
 8000c72:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2210      	movs	r2, #16
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	d063      	beq.n	8000d46 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d12a      	bne.n	8000cdc <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c86:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c8a:	4b6e      	ldr	r3, [pc, #440]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000c92:	4b6c      	ldr	r3, [pc, #432]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c96:	4b6b      	ldr	r3, [pc, #428]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fafb 	bl	8000298 <HAL_GetTick>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ca8:	f7ff faf6 	bl	8000298 <HAL_GetTick>
 8000cac:	0002      	movs	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e0c0      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000cba:	4b62      	ldr	r3, [pc, #392]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	d0f1      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cc4:	4b5f      	ldr	r3, [pc, #380]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc8:	22f8      	movs	r2, #248	; 0xf8
 8000cca:	4393      	bics	r3, r2
 8000ccc:	0019      	movs	r1, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	00da      	lsls	r2, r3, #3
 8000cd4:	4b5b      	ldr	r3, [pc, #364]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cda:	e034      	b.n	8000d46 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	3305      	adds	r3, #5
 8000ce2:	d111      	bne.n	8000d08 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ce4:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce8:	4b56      	ldr	r3, [pc, #344]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000cea:	2104      	movs	r1, #4
 8000cec:	438a      	bics	r2, r1
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cf0:	4b54      	ldr	r3, [pc, #336]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf4:	22f8      	movs	r2, #248	; 0xf8
 8000cf6:	4393      	bics	r3, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	00da      	lsls	r2, r3, #3
 8000d00:	4b50      	ldr	r3, [pc, #320]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d02:	430a      	orrs	r2, r1
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
 8000d06:	e01e      	b.n	8000d46 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d08:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0c:	4b4d      	ldr	r3, [pc, #308]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d0e:	2104      	movs	r1, #4
 8000d10:	430a      	orrs	r2, r1
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d14:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d18:	4b4a      	ldr	r3, [pc, #296]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d20:	f7ff faba 	bl	8000298 <HAL_GetTick>
 8000d24:	0003      	movs	r3, r0
 8000d26:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d2a:	f7ff fab5 	bl	8000298 <HAL_GetTick>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e07f      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d3c:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d40:	2202      	movs	r2, #2
 8000d42:	4013      	ands	r3, r2
 8000d44:	d1f1      	bne.n	8000d2a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <HAL_RCC_OscConfig+0x4e0>
 8000d4e:	e074      	b.n	8000e3a <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	220c      	movs	r2, #12
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d100      	bne.n	8000d5e <HAL_RCC_OscConfig+0x4ee>
 8000d5c:	e06b      	b.n	8000e36 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a1b      	ldr	r3, [r3, #32]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d14c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d6c:	4938      	ldr	r1, [pc, #224]	; (8000e50 <HAL_RCC_OscConfig+0x5e0>)
 8000d6e:	400a      	ands	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fa91 	bl	8000298 <HAL_GetTick>
 8000d76:	0003      	movs	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d7c:	f7ff fa8c 	bl	8000298 <HAL_GetTick>
 8000d80:	0002      	movs	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e056      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	049b      	lsls	r3, r3, #18
 8000d96:	4013      	ands	r3, r2
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9e:	220f      	movs	r2, #15
 8000da0:	4393      	bics	r3, r2
 8000da2:	0019      	movs	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000daa:	430a      	orrs	r2, r1
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_RCC_OscConfig+0x5e4>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	0019      	movs	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	0449      	lsls	r1, r1, #17
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fa5f 	bl	8000298 <HAL_GetTick>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de0:	f7ff fa5a 	bl	8000298 <HAL_GetTick>
 8000de4:	0002      	movs	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e024      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	049b      	lsls	r3, r3, #18
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x570>
 8000dfe:	e01c      	b.n	8000e3a <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000e06:	4912      	ldr	r1, [pc, #72]	; (8000e50 <HAL_RCC_OscConfig+0x5e0>)
 8000e08:	400a      	ands	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fa44 	bl	8000298 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e16:	f7ff fa3f 	bl	8000298 <HAL_GetTick>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e009      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_RCC_OscConfig+0x5d4>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	049b      	lsls	r3, r3, #18
 8000e30:	4013      	ands	r3, r2
 8000e32:	d1f0      	bne.n	8000e16 <HAL_RCC_OscConfig+0x5a6>
 8000e34:	e001      	b.n	8000e3a <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b006      	add	sp, #24
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000
 8000e48:	00001388 	.word	0x00001388
 8000e4c:	efffffff 	.word	0xefffffff
 8000e50:	feffffff 	.word	0xfeffffff
 8000e54:	ffc2ffff 	.word	0xffc2ffff

08000e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e66:	4b6a      	ldr	r3, [pc, #424]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d911      	bls.n	8000e98 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e74:	4b66      	ldr	r3, [pc, #408]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4393      	bics	r3, r2
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	4b64      	ldr	r3, [pc, #400]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e86:	4b62      	ldr	r3, [pc, #392]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	683a      	ldr	r2, [r7, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d001      	beq.n	8000e98 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e0b6      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d009      	beq.n	8000eb6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	22f0      	movs	r2, #240	; 0xf0
 8000ea8:	4393      	bics	r3, r2
 8000eaa:	0019      	movs	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_ClockConfig+0x6a>
 8000ec0:	e067      	b.n	8000f92 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	4b52      	ldr	r3, [pc, #328]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	029b      	lsls	r3, r3, #10
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d114      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e095      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d107      	bne.n	8000ef2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	049b      	lsls	r3, r3, #18
 8000eea:	4013      	ands	r3, r2
 8000eec:	d108      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e089      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef2:	4b48      	ldr	r3, [pc, #288]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d101      	bne.n	8000f00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e082      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	4393      	bics	r3, r2
 8000f08:	0019      	movs	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000f10:	430a      	orrs	r2, r1
 8000f12:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f14:	f7ff f9c0 	bl	8000298 <HAL_GetTick>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d111      	bne.n	8000f48 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f24:	e009      	b.n	8000f3a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f26:	f7ff f9b7 	bl	8000298 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	4a39      	ldr	r2, [pc, #228]	; (8001018 <HAL_RCC_ClockConfig+0x1c0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e065      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	220c      	movs	r2, #12
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d1ef      	bne.n	8000f26 <HAL_RCC_ClockConfig+0xce>
 8000f46:	e024      	b.n	8000f92 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d11b      	bne.n	8000f88 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f50:	e009      	b.n	8000f66 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f52:	f7ff f9a1 	bl	8000298 <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_RCC_ClockConfig+0x1c0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e04f      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d1ef      	bne.n	8000f52 <HAL_RCC_ClockConfig+0xfa>
 8000f72:	e00e      	b.n	8000f92 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f74:	f7ff f990 	bl	8000298 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4a26      	ldr	r2, [pc, #152]	; (8001018 <HAL_RCC_ClockConfig+0x1c0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e03e      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f88:	4b22      	ldr	r3, [pc, #136]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	d1f0      	bne.n	8000f74 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4013      	ands	r3, r2
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d211      	bcs.n	8000fc4 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4393      	bics	r3, r2
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_RCC_ClockConfig+0x1b8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e020      	b.n	8001006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d009      	beq.n	8000fe2 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fe2:	f000 f821 	bl	8001028 <HAL_RCC_GetSysClockFreq>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	220f      	movs	r2, #15
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_RCC_ClockConfig+0x1c8>)
 8000ff4:	5cd3      	ldrb	r3, [r2, r3]
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	40da      	lsrs	r2, r3
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_RCC_ClockConfig+0x1cc>)
 8000ffc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff f922 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	0018      	movs	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	40022000 	.word	0x40022000
 8001014:	40021000 	.word	0x40021000
 8001018:	00001388 	.word	0x00001388
 800101c:	fffff8ff 	.word	0xfffff8ff
 8001020:	08002814 	.word	0x08002814
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b08f      	sub	sp, #60	; 0x3c
 800102c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800102e:	2314      	movs	r3, #20
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	4a2b      	ldr	r2, [pc, #172]	; (80010e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001034:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001036:	c313      	stmia	r3!, {r0, r1, r4}
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001040:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001042:	c313      	stmia	r3!, {r0, r1, r4}
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	220c      	movs	r2, #12
 8001066:	4013      	ands	r3, r2
 8001068:	2b04      	cmp	r3, #4
 800106a:	d002      	beq.n	8001072 <HAL_RCC_GetSysClockFreq+0x4a>
 800106c:	2b08      	cmp	r3, #8
 800106e:	d003      	beq.n	8001078 <HAL_RCC_GetSysClockFreq+0x50>
 8001070:	e02d      	b.n	80010ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001076:	e02d      	b.n	80010d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	220f      	movs	r2, #15
 800107e:	4013      	ands	r3, r2
 8001080:	2214      	movs	r2, #20
 8001082:	18ba      	adds	r2, r7, r2
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001088:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	220f      	movs	r2, #15
 800108e:	4013      	ands	r3, r2
 8001090:	1d3a      	adds	r2, r7, #4
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	025b      	lsls	r3, r3, #9
 800109c:	4013      	ands	r3, r2
 800109e:	d009      	beq.n	80010b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80010a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80010a4:	f7ff f830 	bl	8000108 <__udivsi3>
 80010a8:	0003      	movs	r3, r0
 80010aa:	001a      	movs	r2, r3
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	4353      	muls	r3, r2
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
 80010b2:	e009      	b.n	80010c8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80010b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010b6:	000a      	movs	r2, r1
 80010b8:	0152      	lsls	r2, r2, #5
 80010ba:	1a52      	subs	r2, r2, r1
 80010bc:	0193      	lsls	r3, r2, #6
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	185b      	adds	r3, r3, r1
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010cc:	e002      	b.n	80010d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80010d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80010d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80010d6:	0018      	movs	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	b00f      	add	sp, #60	; 0x3c
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	080027f4 	.word	0x080027f4
 80010e4:	08002804 	.word	0x08002804
 80010e8:	40021000 	.word	0x40021000
 80010ec:	007a1200 	.word	0x007a1200

080010f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <HAL_RCC_GetHCLKFreq+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000000 	.word	0x20000000

08001104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e08a      	b.n	800122c <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	225d      	movs	r2, #93	; 0x5d
 8001120:	5c9b      	ldrb	r3, [r3, r2]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	225c      	movs	r2, #92	; 0x5c
 800112c:	2100      	movs	r1, #0
 800112e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	0018      	movs	r0, r3
 8001134:	f001 fa1a 	bl	800256c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	225d      	movs	r2, #93	; 0x5d
 800113c:	2102      	movs	r1, #2
 800113e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	438a      	bics	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	23e0      	movs	r3, #224	; 0xe0
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	429a      	cmp	r2, r3
 800115a:	d902      	bls.n	8001162 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e002      	b.n	8001168 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	23f0      	movs	r3, #240	; 0xf0
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	429a      	cmp	r2, r3
 8001172:	d008      	beq.n	8001186 <HAL_SPI_Init+0x82>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	23e0      	movs	r3, #224	; 0xe0
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	429a      	cmp	r2, r3
 800117e:	d002      	beq.n	8001186 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	23e0      	movs	r3, #224	; 0xe0
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	429a      	cmp	r2, r3
 8001198:	d903      	bls.n	80011a2 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2202      	movs	r2, #2
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	e002      	b.n	80011a8 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6999      	ldr	r1, [r3, #24]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	400b      	ands	r3, r1
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	431a      	orrs	r2, r3
 80011d6:	0011      	movs	r1, r2
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	2204      	movs	r2, #4
 80011ec:	401a      	ands	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f8:	431a      	orrs	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	431a      	orrs	r2, r3
 8001200:	0011      	movs	r1, r2
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	430a      	orrs	r2, r1
 800120a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	69da      	ldr	r2, [r3, #28]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4907      	ldr	r1, [pc, #28]	; (8001234 <HAL_SPI_Init+0x130>)
 8001218:	400a      	ands	r2, r1
 800121a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	225d      	movs	r2, #93	; 0x5d
 8001226:	2101      	movs	r1, #1
 8001228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b004      	add	sp, #16
 8001232:	bd80      	pop	{r7, pc}
 8001234:	fffff7ff 	.word	0xfffff7ff

08001238 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	1dbb      	adds	r3, r7, #6
 8001246:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800124c:	231f      	movs	r3, #31
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	225c      	movs	r2, #92	; 0x5c
 8001258:	5c9b      	ldrb	r3, [r3, r2]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_SPI_Transmit+0x2a>
 800125e:	2302      	movs	r3, #2
 8001260:	e14f      	b.n	8001502 <HAL_SPI_Transmit+0x2ca>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	225c      	movs	r2, #92	; 0x5c
 8001266:	2101      	movs	r1, #1
 8001268:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800126a:	f7ff f815 	bl	8000298 <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	225d      	movs	r2, #93	; 0x5d
 8001276:	5c9b      	ldrb	r3, [r3, r2]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d004      	beq.n	8001288 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 800127e:	231f      	movs	r3, #31
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	2202      	movs	r2, #2
 8001284:	701a      	strb	r2, [r3, #0]
    goto error;
 8001286:	e131      	b.n	80014ec <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_SPI_Transmit+0x5e>
 800128e:	1dbb      	adds	r3, r7, #6
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d104      	bne.n	80012a0 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8001296:	231f      	movs	r3, #31
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
    goto error;
 800129e:	e125      	b.n	80014ec <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	225d      	movs	r2, #93	; 0x5d
 80012a4:	2103      	movs	r1, #3
 80012a6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1dba      	adds	r2, r7, #6
 80012b8:	8812      	ldrh	r2, [r2, #0]
 80012ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1dba      	adds	r2, r7, #6
 80012c0:	8812      	ldrh	r2, [r2, #0]
 80012c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2244      	movs	r2, #68	; 0x44
 80012ce:	2100      	movs	r1, #0
 80012d0:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2246      	movs	r2, #70	; 0x46
 80012d6:	2100      	movs	r1, #0
 80012d8:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d108      	bne.n	8001304 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	01c9      	lsls	r1, r1, #7
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	4013      	ands	r3, r2
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	d007      	beq.n	8001322 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	23e0      	movs	r3, #224	; 0xe0
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	429a      	cmp	r2, r3
 800132c:	d948      	bls.n	80013c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_SPI_Transmit+0x108>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800133a:	b29b      	uxth	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d139      	bne.n	80013b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3302      	adds	r3, #2
 800134e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001354:	b29b      	uxth	r3, r3
 8001356:	3b01      	subs	r3, #1
 8001358:	b29a      	uxth	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800135e:	e029      	b.n	80013b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2202      	movs	r2, #2
 8001368:	4013      	ands	r3, r2
 800136a:	2b02      	cmp	r3, #2
 800136c:	d10f      	bne.n	800138e <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3302      	adds	r3, #2
 800137c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001382:	b29b      	uxth	r3, r3
 8001384:	3b01      	subs	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800138c:	e012      	b.n	80013b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00a      	beq.n	80013aa <HAL_SPI_Transmit+0x172>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	d00c      	beq.n	80013b4 <HAL_SPI_Transmit+0x17c>
 800139a:	f7fe ff7d 	bl	8000298 <HAL_GetTick>
 800139e:	0002      	movs	r2, r0
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d804      	bhi.n	80013b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80013aa:	231f      	movs	r3, #31
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	2203      	movs	r2, #3
 80013b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80013b2:	e09b      	b.n	80014ec <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1d0      	bne.n	8001360 <HAL_SPI_Transmit+0x128>
 80013be:	e071      	b.n	80014a4 <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d004      	beq.n	80013d2 <HAL_SPI_Transmit+0x19a>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d163      	bne.n	800149a <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d90f      	bls.n	80013fc <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	3302      	adds	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3b02      	subs	r3, #2
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80013fa:	e04e      	b.n	800149a <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	320c      	adds	r2, #12
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001410:	b29b      	uxth	r3, r3
 8001412:	3b01      	subs	r3, #1
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800141a:	e03e      	b.n	800149a <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d124      	bne.n	8001474 <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d90f      	bls.n	8001454 <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	881a      	ldrh	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3302      	adds	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b02      	subs	r3, #2
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001452:	e022      	b.n	800149a <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	320c      	adds	r2, #12
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001468:	b29b      	uxth	r3, r3
 800146a:	3b01      	subs	r3, #1
 800146c:	b29a      	uxth	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001472:	e012      	b.n	800149a <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <HAL_SPI_Transmit+0x258>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	d00c      	beq.n	800149a <HAL_SPI_Transmit+0x262>
 8001480:	f7fe ff0a 	bl	8000298 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d804      	bhi.n	800149a <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8001490:	231f      	movs	r3, #31
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2203      	movs	r2, #3
 8001496:	701a      	strb	r2, [r3, #0]
          goto error;
 8001498:	e028      	b.n	80014ec <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1bb      	bne.n	800141c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fdb6 	bl	800201c <SPI_EndRxTxTransaction>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d002      	beq.n	80014ba <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10a      	bne.n	80014d8 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 80014e0:	231f      	movs	r3, #31
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
 80014e8:	e000      	b.n	80014ec <HAL_SPI_Transmit+0x2b4>
  }

error:
 80014ea:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	225d      	movs	r2, #93	; 0x5d
 80014f0:	2101      	movs	r1, #1
 80014f2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	225c      	movs	r2, #92	; 0x5c
 80014f8:	2100      	movs	r1, #0
 80014fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80014fc:	231f      	movs	r3, #31
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	781b      	ldrb	r3, [r3, #0]
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b008      	add	sp, #32
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af02      	add	r7, sp, #8
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	1dbb      	adds	r3, r7, #6
 800151a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001520:	2317      	movs	r3, #23
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	2382      	movs	r3, #130	; 0x82
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	429a      	cmp	r2, r3
 8001532:	d113      	bne.n	800155c <HAL_SPI_Receive+0x50>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	225d      	movs	r2, #93	; 0x5d
 8001540:	2104      	movs	r1, #4
 8001542:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	881c      	ldrh	r4, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0023      	movs	r3, r4
 8001554:	f000 f918 	bl	8001788 <HAL_SPI_TransmitReceive>
 8001558:	0003      	movs	r3, r0
 800155a:	e10c      	b.n	8001776 <HAL_SPI_Receive+0x26a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	225c      	movs	r2, #92	; 0x5c
 8001560:	5c9b      	ldrb	r3, [r3, r2]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_SPI_Receive+0x5e>
 8001566:	2302      	movs	r3, #2
 8001568:	e105      	b.n	8001776 <HAL_SPI_Receive+0x26a>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	225c      	movs	r2, #92	; 0x5c
 800156e:	2101      	movs	r1, #1
 8001570:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001572:	f7fe fe91 	bl	8000298 <HAL_GetTick>
 8001576:	0003      	movs	r3, r0
 8001578:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	225d      	movs	r2, #93	; 0x5d
 800157e:	5c9b      	ldrb	r3, [r3, r2]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d004      	beq.n	8001590 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8001586:	2317      	movs	r3, #23
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2202      	movs	r2, #2
 800158c:	701a      	strb	r2, [r3, #0]
    goto error;
 800158e:	e0e7      	b.n	8001760 <HAL_SPI_Receive+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_SPI_Receive+0x92>
 8001596:	1dbb      	adds	r3, r7, #6
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 800159e:	2317      	movs	r3, #23
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80015a6:	e0db      	b.n	8001760 <HAL_SPI_Receive+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	225d      	movs	r2, #93	; 0x5d
 80015ac:	2104      	movs	r1, #4
 80015ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1dba      	adds	r2, r7, #6
 80015c0:	2144      	movs	r1, #68	; 0x44
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1dba      	adds	r2, r7, #6
 80015ca:	2146      	movs	r1, #70	; 0x46
 80015cc:	8812      	ldrh	r2, [r2, #0]
 80015ce:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	23e0      	movs	r3, #224	; 0xe0
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d908      	bls.n	800160c <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	495e      	ldr	r1, [pc, #376]	; (8001780 <HAL_SPI_Receive+0x274>)
 8001606:	400a      	ands	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e008      	b.n	800161e <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0149      	lsls	r1, r1, #5
 800161a:	430a      	orrs	r2, r1
 800161c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	429a      	cmp	r2, r3
 8001628:	d107      	bne.n	800163a <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4953      	ldr	r1, [pc, #332]	; (8001784 <HAL_SPI_Receive+0x278>)
 8001636:	400a      	ands	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	4013      	ands	r3, r2
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d007      	beq.n	8001658 <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2140      	movs	r1, #64	; 0x40
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	23e0      	movs	r3, #224	; 0xe0
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	429a      	cmp	r2, r3
 8001662:	d862      	bhi.n	800172a <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001664:	e02d      	b.n	80016c2 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2201      	movs	r2, #1
 800166e:	4013      	ands	r3, r2
 8001670:	2b01      	cmp	r3, #1
 8001672:	d113      	bne.n	800169c <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	330c      	adds	r3, #12
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2246      	movs	r2, #70	; 0x46
 800168c:	5a9b      	ldrh	r3, [r3, r2]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3b01      	subs	r3, #1
 8001692:	b299      	uxth	r1, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2246      	movs	r2, #70	; 0x46
 8001698:	5299      	strh	r1, [r3, r2]
 800169a:	e012      	b.n	80016c2 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <HAL_SPI_Receive+0x1ac>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	d00c      	beq.n	80016c2 <HAL_SPI_Receive+0x1b6>
 80016a8:	f7fe fdf6 	bl	8000298 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d804      	bhi.n	80016c2 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 80016b8:	2317      	movs	r3, #23
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2203      	movs	r2, #3
 80016be:	701a      	strb	r2, [r3, #0]
          goto error;
 80016c0:	e04e      	b.n	8001760 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2246      	movs	r2, #70	; 0x46
 80016c6:	5a9b      	ldrh	r3, [r3, r2]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1cb      	bne.n	8001666 <HAL_SPI_Receive+0x15a>
 80016ce:	e032      	b.n	8001736 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2201      	movs	r2, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d112      	bne.n	8001704 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	3302      	adds	r3, #2
 80016ee:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2246      	movs	r2, #70	; 0x46
 80016f4:	5a9b      	ldrh	r3, [r3, r2]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b299      	uxth	r1, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2246      	movs	r2, #70	; 0x46
 8001700:	5299      	strh	r1, [r3, r2]
 8001702:	e012      	b.n	800172a <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00a      	beq.n	8001720 <HAL_SPI_Receive+0x214>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	d00c      	beq.n	800172a <HAL_SPI_Receive+0x21e>
 8001710:	f7fe fdc2 	bl	8000298 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d804      	bhi.n	800172a <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 8001720:	2317      	movs	r3, #23
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2203      	movs	r2, #3
 8001726:	701a      	strb	r2, [r3, #0]
          goto error;
 8001728:	e01a      	b.n	8001760 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2246      	movs	r2, #70	; 0x46
 800172e:	5a9b      	ldrh	r3, [r3, r2]
 8001730:	b29b      	uxth	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1cc      	bne.n	80016d0 <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 fc0f 	bl	8001f60 <SPI_EndRxTransaction>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d002      	beq.n	800174c <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2220      	movs	r2, #32
 800174a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_SPI_Receive+0x252>
  {
    errorcode = HAL_ERROR;
 8001754:	2317      	movs	r3, #23
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e000      	b.n	8001760 <HAL_SPI_Receive+0x254>
  }

error :
 800175e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	225d      	movs	r2, #93	; 0x5d
 8001764:	2101      	movs	r1, #1
 8001766:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	225c      	movs	r2, #92	; 0x5c
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001770:	2317      	movs	r3, #23
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b007      	add	sp, #28
 800177c:	bd90      	pop	{r4, r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	ffffefff 	.word	0xffffefff
 8001784:	ffffbfff 	.word	0xffffbfff

08001788 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	001a      	movs	r2, r3
 8001796:	1cbb      	adds	r3, r7, #2
 8001798:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017aa:	2323      	movs	r3, #35	; 0x23
 80017ac:	18fb      	adds	r3, r7, r3
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	225c      	movs	r2, #92	; 0x5c
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_SPI_TransmitReceive+0x38>
 80017bc:	2302      	movs	r3, #2
 80017be:	e1f2      	b.n	8001ba6 <HAL_SPI_TransmitReceive+0x41e>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	225c      	movs	r2, #92	; 0x5c
 80017c4:	2101      	movs	r1, #1
 80017c6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017c8:	f7fe fd66 	bl	8000298 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	225d      	movs	r2, #93	; 0x5d
 80017d4:	5c9b      	ldrb	r3, [r3, r2]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d010      	beq.n	8001808 <HAL_SPI_TransmitReceive+0x80>
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	2382      	movs	r3, #130	; 0x82
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d106      	bne.n	80017fe <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <HAL_SPI_TransmitReceive+0x76>
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d004      	beq.n	8001808 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 80017fe:	2323      	movs	r3, #35	; 0x23
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
    goto error;
 8001806:	e1c3      	b.n	8001b90 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d006      	beq.n	800181c <HAL_SPI_TransmitReceive+0x94>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_SPI_TransmitReceive+0x94>
 8001814:	1cbb      	adds	r3, r7, #2
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 800181c:	2323      	movs	r3, #35	; 0x23
 800181e:	18fb      	adds	r3, r7, r3
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    goto error;
 8001824:	e1b4      	b.n	8001b90 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	225d      	movs	r2, #93	; 0x5d
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b04      	cmp	r3, #4
 8001830:	d003      	beq.n	800183a <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	225d      	movs	r2, #93	; 0x5d
 8001836:	2105      	movs	r1, #5
 8001838:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1cba      	adds	r2, r7, #2
 800184a:	2146      	movs	r1, #70	; 0x46
 800184c:	8812      	ldrh	r2, [r2, #0]
 800184e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1cba      	adds	r2, r7, #2
 8001854:	2144      	movs	r1, #68	; 0x44
 8001856:	8812      	ldrh	r2, [r2, #0]
 8001858:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1cba      	adds	r2, r7, #2
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1cba      	adds	r2, r7, #2
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	23e0      	movs	r3, #224	; 0xe0
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	429a      	cmp	r2, r3
 8001886:	d805      	bhi.n	8001894 <HAL_SPI_TransmitReceive+0x10c>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2246      	movs	r2, #70	; 0x46
 800188c:	5a9b      	ldrh	r3, [r3, r2]
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d908      	bls.n	80018a6 <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	49c4      	ldr	r1, [pc, #784]	; (8001bb0 <HAL_SPI_TransmitReceive+0x428>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	e008      	b.n	80018b8 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2180      	movs	r1, #128	; 0x80
 80018b2:	0149      	lsls	r1, r1, #5
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2240      	movs	r2, #64	; 0x40
 80018c0:	4013      	ands	r3, r2
 80018c2:	2b40      	cmp	r3, #64	; 0x40
 80018c4:	d007      	beq.n	80018d6 <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	23e0      	movs	r3, #224	; 0xe0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	429a      	cmp	r2, r3
 80018e0:	d800      	bhi.n	80018e4 <HAL_SPI_TransmitReceive+0x15c>
 80018e2:	e075      	b.n	80019d0 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d004      	beq.n	80018f6 <HAL_SPI_TransmitReceive+0x16e>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d160      	bne.n	80019b8 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	881a      	ldrh	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	3302      	adds	r3, #2
 8001904:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800190a:	b29b      	uxth	r3, r3
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001914:	e050      	b.n	80019b8 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01c      	beq.n	8001956 <HAL_SPI_TransmitReceive+0x1ce>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001920:	b29b      	uxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d017      	beq.n	8001956 <HAL_SPI_TransmitReceive+0x1ce>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d110      	bne.n	8001956 <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	881a      	ldrh	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3302      	adds	r3, #2
 8001942:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2246      	movs	r2, #70	; 0x46
 800195a:	5a9b      	ldrh	r3, [r3, r2]
 800195c:	b29b      	uxth	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d01a      	beq.n	8001998 <HAL_SPI_TransmitReceive+0x210>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d113      	bne.n	8001998 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3302      	adds	r3, #2
 8001980:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2246      	movs	r2, #70	; 0x46
 8001986:	5a9b      	ldrh	r3, [r3, r2]
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	b299      	uxth	r1, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2246      	movs	r2, #70	; 0x46
 8001992:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001994:	2301      	movs	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	3301      	adds	r3, #1
 800199c:	d00c      	beq.n	80019b8 <HAL_SPI_TransmitReceive+0x230>
 800199e:	f7fe fc7b 	bl	8000298 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d804      	bhi.n	80019b8 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 80019ae:	2323      	movs	r3, #35	; 0x23
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	2203      	movs	r2, #3
 80019b4:	701a      	strb	r2, [r3, #0]
        goto error;
 80019b6:	e0eb      	b.n	8001b90 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019bc:	b29b      	uxth	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1a9      	bne.n	8001916 <HAL_SPI_TransmitReceive+0x18e>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2246      	movs	r2, #70	; 0x46
 80019c6:	5a9b      	ldrh	r3, [r3, r2]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1a3      	bne.n	8001916 <HAL_SPI_TransmitReceive+0x18e>
 80019ce:	e0ca      	b.n	8001b66 <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_SPI_TransmitReceive+0x25c>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d000      	beq.n	80019e4 <HAL_SPI_TransmitReceive+0x25c>
 80019e2:	e0b3      	b.n	8001b4c <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d90f      	bls.n	8001a0e <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	881a      	ldrh	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3302      	adds	r3, #2
 80019fc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b02      	subs	r3, #2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a0c:	e09e      	b.n	8001b4c <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	320c      	adds	r2, #12
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a2c:	e08e      	b.n	8001b4c <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d031      	beq.n	8001a98 <HAL_SPI_TransmitReceive+0x310>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02c      	beq.n	8001a98 <HAL_SPI_TransmitReceive+0x310>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d125      	bne.n	8001a98 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d90f      	bls.n	8001a76 <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	3302      	adds	r3, #2
 8001a64:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b02      	subs	r3, #2
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a74:	e00e      	b.n	8001a94 <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	60ba      	str	r2, [r7, #8]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	320c      	adds	r2, #12
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2246      	movs	r2, #70	; 0x46
 8001a9c:	5a9b      	ldrh	r3, [r3, r2]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d043      	beq.n	8001b2c <HAL_SPI_TransmitReceive+0x3a4>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d13c      	bne.n	8001b2c <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2246      	movs	r2, #70	; 0x46
 8001ab6:	5a9b      	ldrh	r3, [r3, r2]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d921      	bls.n	8001b02 <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3302      	adds	r3, #2
 8001ace:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2246      	movs	r2, #70	; 0x46
 8001ad4:	5a9b      	ldrh	r3, [r3, r2]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b02      	subs	r3, #2
 8001ada:	b299      	uxth	r1, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2246      	movs	r2, #70	; 0x46
 8001ae0:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2246      	movs	r2, #70	; 0x46
 8001ae6:	5a9b      	ldrh	r3, [r3, r2]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d81c      	bhi.n	8001b28 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0149      	lsls	r1, r1, #5
 8001afc:	430a      	orrs	r2, r1
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	e012      	b.n	8001b28 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	330c      	adds	r3, #12
 8001b08:	001a      	movs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	1c59      	adds	r1, r3, #1
 8001b0e:	6079      	str	r1, [r7, #4]
 8001b10:	7812      	ldrb	r2, [r2, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2246      	movs	r2, #70	; 0x46
 8001b1a:	5a9b      	ldrh	r3, [r3, r2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b299      	uxth	r1, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2246      	movs	r2, #70	; 0x46
 8001b26:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	3301      	adds	r3, #1
 8001b30:	d00c      	beq.n	8001b4c <HAL_SPI_TransmitReceive+0x3c4>
 8001b32:	f7fe fbb1 	bl	8000298 <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d804      	bhi.n	8001b4c <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 8001b42:	2323      	movs	r3, #35	; 0x23
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2203      	movs	r2, #3
 8001b48:	701a      	strb	r2, [r3, #0]
        goto error;
 8001b4a:	e021      	b.n	8001b90 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d000      	beq.n	8001b58 <HAL_SPI_TransmitReceive+0x3d0>
 8001b56:	e76a      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x2a6>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2246      	movs	r2, #70	; 0x46
 8001b5c:	5a9b      	ldrh	r3, [r3, r2]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d000      	beq.n	8001b66 <HAL_SPI_TransmitReceive+0x3de>
 8001b64:	e763      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 fa55 	bl	800201c <SPI_EndRxTxTransaction>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8001b84:	2323      	movs	r3, #35	; 0x23
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e000      	b.n	8001b90 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8001b8e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	225d      	movs	r2, #93	; 0x5d
 8001b94:	2101      	movs	r1, #1
 8001b96:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	225c      	movs	r2, #92	; 0x5c
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001ba0:	2323      	movs	r3, #35	; 0x23
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b00a      	add	sp, #40	; 0x28
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	ffffefff 	.word	0xffffefff

08001bb4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4013      	ands	r3, r2
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8001bda:	d009      	beq.n	8001bf0 <HAL_SPI_IRQHandler+0x3c>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	4013      	ands	r3, r2
 8001be2:	d005      	beq.n	8001bf0 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	0010      	movs	r0, r2
 8001bec:	4798      	blx	r3
    return;
 8001bee:	e0ac      	b.n	8001d4a <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_SPI_IRQHandler+0x58>
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d005      	beq.n	8001c0c <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	0010      	movs	r0, r2
 8001c08:	4798      	blx	r3
    return;
 8001c0a:	e09e      	b.n	8001d4a <HAL_SPI_IRQHandler+0x196>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	23b0      	movs	r3, #176	; 0xb0
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4013      	ands	r3, r2
 8001c14:	d100      	bne.n	8001c18 <HAL_SPI_IRQHandler+0x64>
 8001c16:	e098      	b.n	8001d4a <HAL_SPI_IRQHandler+0x196>
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d100      	bne.n	8001c22 <HAL_SPI_IRQHandler+0x6e>
 8001c20:	e093      	b.n	8001d4a <HAL_SPI_IRQHandler+0x196>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	4013      	ands	r3, r2
 8001c28:	d023      	beq.n	8001c72 <HAL_SPI_IRQHandler+0xbe>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	225d      	movs	r2, #93	; 0x5d
 8001c2e:	5c9b      	ldrb	r3, [r3, r2]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d011      	beq.n	8001c5a <HAL_SPI_IRQHandler+0xa6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	e00b      	b.n	8001c72 <HAL_SPI_IRQHandler+0xbe>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
        return;
 8001c70:	e06b      	b.n	8001d4a <HAL_SPI_IRQHandler+0x196>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2220      	movs	r2, #32
 8001c76:	4013      	ands	r3, r2
 8001c78:	d014      	beq.n	8001ca4 <HAL_SPI_IRQHandler+0xf0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	2201      	movs	r2, #1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	d00c      	beq.n	8001cc8 <HAL_SPI_IRQHandler+0x114>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d03b      	beq.n	8001d48 <HAL_SPI_IRQHandler+0x194>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	21e0      	movs	r1, #224	; 0xe0
 8001cdc:	438a      	bics	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	225d      	movs	r2, #93	; 0x5d
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2202      	movs	r2, #2
 8001cec:	4013      	ands	r3, r2
 8001cee:	d103      	bne.n	8001cf8 <HAL_SPI_IRQHandler+0x144>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d022      	beq.n	8001d3e <HAL_SPI_IRQHandler+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2103      	movs	r1, #3
 8001d04:	438a      	bics	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x16e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <HAL_SPI_IRQHandler+0x19c>)
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7fe fbbd 	bl	800049c <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <HAL_SPI_IRQHandler+0x192>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_SPI_IRQHandler+0x19c>)
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7fe fbb0 	bl	800049c <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8001d3c:	e003      	b.n	8001d46 <HAL_SPI_IRQHandler+0x192>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 f807 	bl	8001d54 <HAL_SPI_ErrorCallback>
      }
    }
    return;
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46c0      	nop			; (mov r8, r8)
  }
}
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b008      	add	sp, #32
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08001d65 	.word	0x08001d65

08001d54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2246      	movs	r2, #70	; 0x46
 8001d76:	2100      	movs	r1, #0
 8001d78:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff ffe6 	bl	8001d54 <HAL_SPI_ErrorCallback>
}
 8001d88:	46c0      	nop			; (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b004      	add	sp, #16
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d9e:	e050      	b.n	8001e42 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	d04d      	beq.n	8001e42 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <SPI_WaitFlagStateUntilTimeout+0x2c>
 8001dac:	f7fe fa74 	bl	8000298 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d842      	bhi.n	8001e42 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	21e0      	movs	r1, #224	; 0xe0
 8001dc8:	438a      	bics	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	2382      	movs	r3, #130	; 0x82
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d113      	bne.n	8001e00 <SPI_WaitFlagStateUntilTimeout+0x70>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d005      	beq.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d110      	bne.n	8001e2e <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4914      	ldr	r1, [pc, #80]	; (8001e68 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8001e18:	400a      	ands	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	0189      	lsls	r1, r1, #6
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	225d      	movs	r2, #93	; 0x5d
 8001e32:	2101      	movs	r1, #1
 8001e34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	225c      	movs	r2, #92	; 0x5c
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e00e      	b.n	8001e60 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d101      	bne.n	8001e56 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8001e56:	2300      	movs	r3, #0
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d1a0      	bne.n	8001da0 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	ffffdfff 	.word	0xffffdfff

08001e6c <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8001e7a:	e062      	b.n	8001f42 <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d10c      	bne.n	8001ea0 <SPI_WaitFifoStateUntilTimeout+0x34>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	330c      	adds	r3, #12
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	2117      	movs	r1, #23
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	d04d      	beq.n	8001f42 <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <SPI_WaitFifoStateUntilTimeout+0x50>
 8001eac:	f7fe f9f4 	bl	8000298 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d842      	bhi.n	8001f42 <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	21e0      	movs	r1, #224	; 0xe0
 8001ec8:	438a      	bics	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	2382      	movs	r3, #130	; 0x82
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d113      	bne.n	8001f00 <SPI_WaitFifoStateUntilTimeout+0x94>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d005      	beq.n	8001ef0 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d107      	bne.n	8001f00 <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2140      	movs	r1, #64	; 0x40
 8001efc:	438a      	bics	r2, r1
 8001efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	019b      	lsls	r3, r3, #6
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d110      	bne.n	8001f2e <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4911      	ldr	r1, [pc, #68]	; (8001f5c <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	0189      	lsls	r1, r1, #6
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	225d      	movs	r2, #93	; 0x5d
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	225c      	movs	r2, #92	; 0x5c
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e008      	b.n	8001f54 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d194      	bne.n	8001e7c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b006      	add	sp, #24
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	ffffdfff 	.word	0xffffdfff

08001f60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	2382      	movs	r3, #130	; 0x82
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d113      	bne.n	8001fa0 <SPI_EndRxTransaction+0x40>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d005      	beq.n	8001f90 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d107      	bne.n	8001fa0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	0013      	movs	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	f7ff feef 	bl	8001d90 <SPI_WaitFlagStateUntilTimeout>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d007      	beq.n	8001fc6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	2220      	movs	r2, #32
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e026      	b.n	8002014 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	2382      	movs	r3, #130	; 0x82
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11f      	bne.n	8002012 <SPI_EndRxTransaction+0xb2>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d005      	beq.n	8001fea <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d113      	bne.n	8002012 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	23c0      	movs	r3, #192	; 0xc0
 8001fee:	00d9      	lsls	r1, r3, #3
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	0013      	movs	r3, r2
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f7ff ff37 	bl	8001e6c <SPI_WaitFifoStateUntilTimeout>
 8001ffe:	1e03      	subs	r3, r0, #0
 8002000:	d007      	beq.n	8002012 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	2220      	movs	r2, #32
 8002008:	431a      	orrs	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e000      	b.n	8002014 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b004      	add	sp, #16
 800201a:	bd80      	pop	{r7, pc}

0800201c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	23c0      	movs	r3, #192	; 0xc0
 800202c:	0159      	lsls	r1, r3, #5
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	0013      	movs	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	f7ff ff18 	bl	8001e6c <SPI_WaitFifoStateUntilTimeout>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d007      	beq.n	8002050 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002044:	2220      	movs	r2, #32
 8002046:	431a      	orrs	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e027      	b.n	80020a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	0013      	movs	r3, r2
 800205a:	2200      	movs	r2, #0
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	f7ff fe97 	bl	8001d90 <SPI_WaitFlagStateUntilTimeout>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d007      	beq.n	8002076 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	2220      	movs	r2, #32
 800206c:	431a      	orrs	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e014      	b.n	80020a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	23c0      	movs	r3, #192	; 0xc0
 800207a:	00d9      	lsls	r1, r3, #3
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	0013      	movs	r3, r2
 8002084:	2200      	movs	r2, #0
 8002086:	f7ff fef1 	bl	8001e6c <SPI_WaitFifoStateUntilTimeout>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d007      	beq.n	800209e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	2220      	movs	r2, #32
 8002094:	431a      	orrs	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e000      	b.n	80020a0 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b004      	add	sp, #16
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	2414      	movs	r4, #20
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	0018      	movs	r0, r3
 80020b4:	2314      	movs	r3, #20
 80020b6:	001a      	movs	r2, r3
 80020b8:	2100      	movs	r1, #0
 80020ba:	f000 fb87 	bl	80027cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	03c9      	lsls	r1, r1, #15
 80020c8:	430a      	orrs	r2, r1
 80020ca:	615a      	str	r2, [r3, #20]
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	03db      	lsls	r3, r3, #15
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	0289      	lsls	r1, r1, #10
 80020e4:	430a      	orrs	r2, r1
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	029b      	lsls	r3, r3, #10
 80020f0:	4013      	ands	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <MX_GPIO_Init+0x11c>)
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	0309      	lsls	r1, r1, #12
 8002100:	430a      	orrs	r2, r1
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	031b      	lsls	r3, r3, #12
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b2c      	ldr	r3, [pc, #176]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	02c9      	lsls	r1, r1, #11
 800211c:	430a      	orrs	r2, r1
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <MX_GPIO_Init+0x11c>)
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	02db      	lsls	r3, r3, #11
 8002128:	4013      	ands	r3, r2
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_SET);
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <MX_GPIO_Init+0x120>)
 8002130:	2201      	movs	r2, #1
 8002132:	2120      	movs	r1, #32
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe fb6b 	bl	8000810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADC_START_Pin|ADC_RESET_Pin|LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800213a:	23cc      	movs	r3, #204	; 0xcc
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4823      	ldr	r0, [pc, #140]	; (80021cc <MX_GPIO_Init+0x124>)
 8002140:	2200      	movs	r2, #0
 8002142:	0019      	movs	r1, r3
 8002144:	f7fe fb64 	bl	8000810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8002148:	0021      	movs	r1, r4
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2220      	movs	r2, #32
 800214e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	187b      	adds	r3, r7, r1
 8002152:	2201      	movs	r2, #1
 8002154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	187b      	adds	r3, r7, r1
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	187b      	adds	r3, r7, r1
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8002162:	000c      	movs	r4, r1
 8002164:	187b      	adds	r3, r7, r1
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <MX_GPIO_Init+0x120>)
 8002168:	0019      	movs	r1, r3
 800216a:	0010      	movs	r0, r2
 800216c:	f7fe f9dc 	bl	8000528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_START_Pin|ADC_RESET_Pin|LD4_Pin|LD3_Pin;
 8002170:	0021      	movs	r1, r4
 8002172:	187b      	adds	r3, r7, r1
 8002174:	22cc      	movs	r2, #204	; 0xcc
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	187b      	adds	r3, r7, r1
 800217c:	2201      	movs	r2, #1
 800217e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	187b      	adds	r3, r7, r1
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	187b      	adds	r3, r7, r1
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218c:	000c      	movs	r4, r1
 800218e:	187b      	adds	r3, r7, r1
 8002190:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <MX_GPIO_Init+0x124>)
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f7fe f9c7 	bl	8000528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 800219a:	0021      	movs	r1, r4
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <MX_GPIO_Init+0x128>)
 80021a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80021b2:	0019      	movs	r1, r3
 80021b4:	0010      	movs	r0, r2
 80021b6:	f7fe f9b7 	bl	8000528 <HAL_GPIO_Init>

}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b00b      	add	sp, #44	; 0x2c
 80021c0:	bd90      	pop	{r4, r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	40021000 	.word	0x40021000
 80021c8:	48001400 	.word	0x48001400
 80021cc:	48000800 	.word	0x48000800
 80021d0:	10210000 	.word	0x10210000
 80021d4:	48000400 	.word	0x48000400

080021d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021dc:	f7fe f820 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e0:	f000 f818 	bl	8002214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e4:	f7ff ff60 	bl	80020a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80021e8:	f000 f982 	bl	80024f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  InitADC();
 80021ec:	f000 f85c 	bl	80022a8 <InitADC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <main+0x38>)
 80021f6:	0019      	movs	r1, r3
 80021f8:	0010      	movs	r0, r2
 80021fa:	f7fe fb26 	bl	800084a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80021fe:	23fa      	movs	r3, #250	; 0xfa
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	0018      	movs	r0, r3
 8002204:	f7fe f852 	bl	80002ac <HAL_Delay>
	  ReadADC(1);
 8002208:	2001      	movs	r0, #1
 800220a:	f000 f8e7 	bl	80023dc <ReadADC>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800220e:	e7ef      	b.n	80021f0 <main+0x18>
 8002210:	48000800 	.word	0x48000800

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b091      	sub	sp, #68	; 0x44
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	2410      	movs	r4, #16
 800221c:	193b      	adds	r3, r7, r4
 800221e:	0018      	movs	r0, r3
 8002220:	2330      	movs	r3, #48	; 0x30
 8002222:	001a      	movs	r2, r3
 8002224:	2100      	movs	r1, #0
 8002226:	f000 fad1 	bl	80027cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800222a:	003b      	movs	r3, r7
 800222c:	0018      	movs	r0, r3
 800222e:	2310      	movs	r3, #16
 8002230:	001a      	movs	r2, r3
 8002232:	2100      	movs	r1, #0
 8002234:	f000 faca 	bl	80027cc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002238:	0021      	movs	r1, r4
 800223a:	187b      	adds	r3, r7, r1
 800223c:	2202      	movs	r2, #2
 800223e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002240:	187b      	adds	r3, r7, r1
 8002242:	2201      	movs	r2, #1
 8002244:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002246:	187b      	adds	r3, r7, r1
 8002248:	2210      	movs	r2, #16
 800224a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224c:	187b      	adds	r3, r7, r1
 800224e:	2202      	movs	r2, #2
 8002250:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002252:	187b      	adds	r3, r7, r1
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002258:	187b      	adds	r3, r7, r1
 800225a:	22a0      	movs	r2, #160	; 0xa0
 800225c:	0392      	lsls	r2, r2, #14
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002260:	187b      	adds	r3, r7, r1
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002266:	187b      	adds	r3, r7, r1
 8002268:	0018      	movs	r0, r3
 800226a:	f7fe fb01 	bl	8000870 <HAL_RCC_OscConfig>
 800226e:	1e03      	subs	r3, r0, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002272:	f000 f937 	bl	80024e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	003b      	movs	r3, r7
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227c:	003b      	movs	r3, r7
 800227e:	2202      	movs	r2, #2
 8002280:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002282:	003b      	movs	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002288:	003b      	movs	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800228e:	003b      	movs	r3, r7
 8002290:	2101      	movs	r1, #1
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe fde0 	bl	8000e58 <HAL_RCC_ClockConfig>
 8002298:	1e03      	subs	r3, r0, #0
 800229a:	d001      	beq.n	80022a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800229c:	f000 f922 	bl	80024e4 <Error_Handler>
  }
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b011      	add	sp, #68	; 0x44
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <InitADC>:

/* USER CODE BEGIN 4 */

uint32_t InitADC(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
	uint8_t buf[3] = {0,0,0};
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	705a      	strb	r2, [r3, #1]
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	709a      	strb	r2, [r3, #2]
	uint8_t rxbuf[2]={0,0};
 80022c0:	003b      	movs	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	003b      	movs	r3, r7
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port,ADC_RESET_Pin,1); // Set reset
 80022cc:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <InitADC+0x128>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	2120      	movs	r1, #32
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe fa9c 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 80022d8:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <InitADC+0x12c>)
 80022da:	2201      	movs	r2, #1
 80022dc:	2120      	movs	r1, #32
 80022de:	0018      	movs	r0, r3
 80022e0:	f7fe fa96 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80022e4:	200a      	movs	r0, #10
 80022e6:	f7fd ffe1 	bl	80002ac <HAL_Delay>


	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <InitADC+0x12c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	2120      	movs	r1, #32
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7fe fa8d 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fd ffd8 	bl	80002ac <HAL_Delay>

	buf[0]=0x21;	//Read Statusbyte
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2221      	movs	r2, #33	; 0x21
 8002300:	701a      	strb	r2, [r3, #0]
	buf[1]=0x00;	//Lenght 1
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	705a      	strb	r2, [r3, #1]

	HAL_SPI_Transmit(&hspi1,buf,2,10);
 8002308:	1d39      	adds	r1, r7, #4
 800230a:	4833      	ldr	r0, [pc, #204]	; (80023d8 <InitADC+0x130>)
 800230c:	230a      	movs	r3, #10
 800230e:	2202      	movs	r2, #2
 8002310:	f7fe ff92 	bl	8001238 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, rxbuf,1, 10);
 8002314:	0039      	movs	r1, r7
 8002316:	4830      	ldr	r0, [pc, #192]	; (80023d8 <InitADC+0x130>)
 8002318:	230a      	movs	r3, #10
 800231a:	2201      	movs	r2, #1
 800231c:	f7ff f8f6 	bl	800150c <HAL_SPI_Receive>

	HAL_Delay(.5);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fd ffc3 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8002326:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <InitADC+0x12c>)
 8002328:	2201      	movs	r2, #1
 800232a:	2120      	movs	r1, #32
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe fa6f 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fd ffba 	bl	80002ac <HAL_Delay>

	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, ~(buf[0] & 0x40)); //Read Status, ist ADC Komunikationsbereit
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2240      	movs	r2, #64	; 0x40
 800233e:	4013      	ands	r3, r2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4821      	ldr	r0, [pc, #132]	; (80023d0 <InitADC+0x128>)
 800234c:	0019      	movs	r1, r3
 800234e:	f7fe fa5f 	bl	8000810 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,0);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <InitADC+0x12c>)
 8002354:	2200      	movs	r2, #0
 8002356:	2120      	movs	r1, #32
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fa59 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 800235e:	2000      	movs	r0, #0
 8002360:	f7fd ffa4 	bl	80002ac <HAL_Delay>


	//Set Mode:
	////////////////////////////////////
	//Read Datarate Register (04h)
	buf[0]=0x24;
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2224      	movs	r2, #36	; 0x24
 8002368:	701a      	strb	r2, [r3, #0]
	buf[1]=0x00;
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(&hspi1,buf,2,10);
 8002370:	1d39      	adds	r1, r7, #4
 8002372:	4819      	ldr	r0, [pc, #100]	; (80023d8 <InitADC+0x130>)
 8002374:	230a      	movs	r3, #10
 8002376:	2202      	movs	r2, #2
 8002378:	f7fe ff5e 	bl	8001238 <HAL_SPI_Transmit>
	HAL_Delay(1);
 800237c:	2001      	movs	r0, #1
 800237e:	f7fd ff95 	bl	80002ac <HAL_Delay>
	HAL_SPI_Receive(&hspi1, rxbuf,1, 1);
 8002382:	0039      	movs	r1, r7
 8002384:	4814      	ldr	r0, [pc, #80]	; (80023d8 <InitADC+0x130>)
 8002386:	2301      	movs	r3, #1
 8002388:	2201      	movs	r2, #1
 800238a:	f7ff f8bf 	bl	800150c <HAL_SPI_Receive>


	// Set Modified Datarateregister (04h)
	buf[0]=	0x44;	// Write Register DATARATE
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2244      	movs	r2, #68	; 0x44
 8002392:	701a      	strb	r2, [r3, #0]
	buf[1]= 0x00;	//Write 1 Register
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
	buf[2]=	rxbuf[0]|0x20; // Set Modebit
 800239a:	003b      	movs	r3, r7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2220      	movs	r2, #32
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit(&hspi1,buf,3,10);
 80023a8:	1d39      	adds	r1, r7, #4
 80023aa:	480b      	ldr	r0, [pc, #44]	; (80023d8 <InitADC+0x130>)
 80023ac:	230a      	movs	r3, #10
 80023ae:	2203      	movs	r2, #3
 80023b0:	f7fe ff42 	bl	8001238 <HAL_SPI_Transmit>
	//buf[1]=0x00;
	//HAL_SPI_Transmit(&hspi1,buf,2,10);
	//HAL_Delay(1);
	//HAL_SPI_Receive(&hspi1, rxbuf,1, 1); //Read Datarate Register

	HAL_Delay(1);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f7fd ff79 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <InitADC+0x12c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	2120      	movs	r1, #32
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7fe fa25 	bl	8000810 <HAL_GPIO_WritePin>

	return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	48000800 	.word	0x48000800
 80023d4:	48001400 	.word	0x48001400
 80023d8:	20000024 	.word	0x20000024

080023dc <ReadADC>:

uint32_t ReadADC(uint8_t Channel) 	// Positive ADC input, Negativer ist AINCOM
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	0002      	movs	r2, r0
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[3]={0,0,0};
 80023e8:	2114      	movs	r1, #20
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	2200      	movs	r2, #0
 80023f4:	705a      	strb	r2, [r3, #1]
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2200      	movs	r2, #0
 80023fa:	709a      	strb	r2, [r3, #2]
	uint8_t rxbuf[5];

	if (Channel>5)	// DS124S06 hatt nur 5 Kanäle
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d901      	bls.n	8002408 <ReadADC+0x2c>
		return 0;
 8002404:	2300      	movs	r3, #0
 8002406:	e065      	b.n	80024d4 <ReadADC+0xf8>

	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,0);
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <ReadADC+0x100>)
 800240a:	2200      	movs	r2, #0
 800240c:	2120      	movs	r1, #32
 800240e:	0018      	movs	r0, r3
 8002410:	f7fe f9fe 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fd ff49 	bl	80002ac <HAL_Delay>

	buf[0] = 0x42; 		// Select IMPMUX Register
 800241a:	2414      	movs	r4, #20
 800241c:	193b      	adds	r3, r7, r4
 800241e:	2242      	movs	r2, #66	; 0x42
 8002420:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00;		// Write 1 Registers
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2200      	movs	r2, #0
 8002426:	705a      	strb	r2, [r3, #1]
	//buf[2] = Channel<<4 | 0x0C; // SET ADMUX, MUXP=Channel, MUXN=AINCOM
	//buf[2] = Channel<<4 | 0x02;

	buf[2]=0x1C;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	221c      	movs	r2, #28
 800242c:	709a      	strb	r2, [r3, #2]

	HAL_SPI_Transmit(&hspi1,buf,3,10);
 800242e:	1939      	adds	r1, r7, r4
 8002430:	482b      	ldr	r0, [pc, #172]	; (80024e0 <ReadADC+0x104>)
 8002432:	230a      	movs	r3, #10
 8002434:	2203      	movs	r2, #3
 8002436:	f7fe feff 	bl	8001238 <HAL_SPI_Transmit>

	HAL_Delay(.5);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fd ff36 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <ReadADC+0x100>)
 8002442:	2201      	movs	r2, #1
 8002444:	2120      	movs	r1, #32
 8002446:	0018      	movs	r0, r3
 8002448:	f7fe f9e2 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fd ff2d 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,0);
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <ReadADC+0x100>)
 8002454:	2200      	movs	r2, #0
 8002456:	2120      	movs	r1, #32
 8002458:	0018      	movs	r0, r3
 800245a:	f7fe f9d9 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 800245e:	2000      	movs	r0, #0
 8002460:	f7fd ff24 	bl	80002ac <HAL_Delay>

	buf[0]= 0x08;	//Start Convertion via Command
 8002464:	193b      	adds	r3, r7, r4
 8002466:	2208      	movs	r2, #8
 8002468:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buf,1,10);
 800246a:	1939      	adds	r1, r7, r4
 800246c:	481c      	ldr	r0, [pc, #112]	; (80024e0 <ReadADC+0x104>)
 800246e:	230a      	movs	r3, #10
 8002470:	2201      	movs	r2, #1
 8002472:	f7fe fee1 	bl	8001238 <HAL_SPI_Transmit>

	// Delay
	HAL_Delay(.5);
 8002476:	2000      	movs	r0, #0
 8002478:	f7fd ff18 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <ReadADC+0x100>)
 800247e:	2201      	movs	r2, #1
 8002480:	2120      	movs	r1, #32
 8002482:	0018      	movs	r0, r3
 8002484:	f7fe f9c4 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(.5);
 8002488:	2000      	movs	r0, #0
 800248a:	f7fd ff0f 	bl	80002ac <HAL_Delay>
	//while( !HAL_GPIO_ReadPin(ADC_DRDY_GPIO_Port, ADC_DRDY_Pin) );

	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,0);
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <ReadADC+0x100>)
 8002490:	2200      	movs	r2, #0
 8002492:	2120      	movs	r1, #32
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe f9bb 	bl	8000810 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800249a:	2001      	movs	r0, #1
 800249c:	f7fd ff06 	bl	80002ac <HAL_Delay>
	////
	///
	//


	buf[0]= 0x12;	//RDATA => Read Data
 80024a0:	193b      	adds	r3, r7, r4
 80024a2:	2212      	movs	r2, #18
 80024a4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1,buf,1,10);
 80024a6:	1939      	adds	r1, r7, r4
 80024a8:	480d      	ldr	r0, [pc, #52]	; (80024e0 <ReadADC+0x104>)
 80024aa:	230a      	movs	r3, #10
 80024ac:	2201      	movs	r2, #1
 80024ae:	f7fe fec3 	bl	8001238 <HAL_SPI_Transmit>


	HAL_SPI_Receive(&hspi1, rxbuf,3, 10); //Read Datarate Register --> Ohne CRC und Status
 80024b2:	230c      	movs	r3, #12
 80024b4:	18f9      	adds	r1, r7, r3
 80024b6:	480a      	ldr	r0, [pc, #40]	; (80024e0 <ReadADC+0x104>)
 80024b8:	230a      	movs	r3, #10
 80024ba:	2203      	movs	r2, #3
 80024bc:	f7ff f826 	bl	800150c <HAL_SPI_Receive>

	HAL_Delay(.5);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fd fef3 	bl	80002ac <HAL_Delay>
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <ReadADC+0x100>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	2120      	movs	r1, #32
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7fe f99f 	bl	8000810 <HAL_GPIO_WritePin>

	return 0;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b007      	add	sp, #28
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	48001400 	.word	0x48001400
 80024e0:	20000024 	.word	0x20000024

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024e8:	46c0      	nop			; (mov r8, r8)
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_SPI1_Init+0x74>)
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <MX_SPI1_Init+0x78>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <MX_SPI1_Init+0x74>)
 80024fc:	2282      	movs	r2, #130	; 0x82
 80024fe:	0052      	lsls	r2, r2, #1
 8002500:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <MX_SPI1_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <MX_SPI1_Init+0x74>)
 800250a:	22e0      	movs	r2, #224	; 0xe0
 800250c:	00d2      	lsls	r2, r2, #3
 800250e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <MX_SPI1_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <MX_SPI1_Init+0x74>)
 8002518:	2201      	movs	r2, #1
 800251a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_SPI1_Init+0x74>)
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_SPI1_Init+0x74>)
 8002526:	2218      	movs	r2, #24
 8002528:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_SPI1_Init+0x74>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_SPI1_Init+0x74>)
 8002532:	2200      	movs	r2, #0
 8002534:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <MX_SPI1_Init+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_SPI1_Init+0x74>)
 800253e:	2207      	movs	r2, #7
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <MX_SPI1_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_SPI1_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <MX_SPI1_Init+0x74>)
 8002550:	0018      	movs	r0, r3
 8002552:	f7fe fdd7 	bl	8001104 <HAL_SPI_Init>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800255a:	f7ff ffc3 	bl	80024e4 <Error_Handler>
  }

}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000024 	.word	0x20000024
 8002568:	40013000 	.word	0x40013000

0800256c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	2314      	movs	r3, #20
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	0018      	movs	r0, r3
 800257a:	2314      	movs	r3, #20
 800257c:	001a      	movs	r2, r3
 800257e:	2100      	movs	r1, #0
 8002580:	f000 f924 	bl	80027cc <memset>
  if(spiHandle->Instance==SPI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a20      	ldr	r2, [pc, #128]	; (800260c <HAL_SPI_MspInit+0xa0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d13a      	bne.n	8002604 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_SPI_MspInit+0xa4>)
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <HAL_SPI_MspInit+0xa4>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0149      	lsls	r1, r1, #5
 8002598:	430a      	orrs	r2, r1
 800259a:	619a      	str	r2, [r3, #24]
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_SPI_MspInit+0xa4>)
 800259e:	699a      	ldr	r2, [r3, #24]
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	015b      	lsls	r3, r3, #5
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_SPI_MspInit+0xa4>)
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <HAL_SPI_MspInit+0xa4>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0289      	lsls	r1, r1, #10
 80025b4:	430a      	orrs	r2, r1
 80025b6:	615a      	str	r2, [r3, #20]
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_SPI_MspInit+0xa4>)
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	4013      	ands	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025c6:	2114      	movs	r1, #20
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	22e0      	movs	r2, #224	; 0xe0
 80025cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2202      	movs	r2, #2
 80025d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	2203      	movs	r2, #3
 80025de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	187a      	adds	r2, r7, r1
 80025e8:	2390      	movs	r3, #144	; 0x90
 80025ea:	05db      	lsls	r3, r3, #23
 80025ec:	0011      	movs	r1, r2
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7fd ff9a 	bl	8000528 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2019      	movs	r0, #25
 80025fa:	f7fd ff1d 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025fe:	2019      	movs	r0, #25
 8002600:	f7fd ff2f 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b00a      	add	sp, #40	; 0x28
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40013000 	.word	0x40013000
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_MspInit+0x44>)
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <HAL_MspInit+0x44>)
 8002620:	2101      	movs	r1, #1
 8002622:	430a      	orrs	r2, r1
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_MspInit+0x44>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_MspInit+0x44>)
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_MspInit+0x44>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0549      	lsls	r1, r1, #21
 800263c:	430a      	orrs	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_MspInit+0x44>)
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	055b      	lsls	r3, r3, #21
 8002648:	4013      	ands	r3, r2
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40021000 	.word	0x40021000

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266a:	e7fe      	b.n	800266a <HardFault_Handler+0x4>

0800266c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002684:	f7fd fdfc 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <SPI1_IRQHandler+0x14>)
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff fa8c 	bl	8001bb4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	20000024 	.word	0x20000024

080026a8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <SystemInit+0x70>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <SystemInit+0x70>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <SystemInit+0x70>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <SystemInit+0x70>)
 80026be:	4917      	ldr	r1, [pc, #92]	; (800271c <SystemInit+0x74>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <SystemInit+0x70>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <SystemInit+0x70>)
 80026ca:	4915      	ldr	r1, [pc, #84]	; (8002720 <SystemInit+0x78>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <SystemInit+0x70>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <SystemInit+0x70>)
 80026d6:	4913      	ldr	r1, [pc, #76]	; (8002724 <SystemInit+0x7c>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <SystemInit+0x70>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <SystemInit+0x70>)
 80026e2:	4911      	ldr	r1, [pc, #68]	; (8002728 <SystemInit+0x80>)
 80026e4:	400a      	ands	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <SystemInit+0x70>)
 80026ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <SystemInit+0x70>)
 80026ee:	210f      	movs	r1, #15
 80026f0:	438a      	bics	r2, r1
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <SystemInit+0x70>)
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <SystemInit+0x70>)
 80026fa:	490c      	ldr	r1, [pc, #48]	; (800272c <SystemInit+0x84>)
 80026fc:	400a      	ands	r2, r1
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SystemInit+0x70>)
 8002702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SystemInit+0x70>)
 8002706:	2101      	movs	r1, #1
 8002708:	438a      	bics	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <SystemInit+0x70>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	f8ffb80c 	.word	0xf8ffb80c
 8002720:	fef6ffff 	.word	0xfef6ffff
 8002724:	fffbffff 	.word	0xfffbffff
 8002728:	ffc0ffff 	.word	0xffc0ffff
 800272c:	fffffeac 	.word	0xfffffeac

08002730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002730:	480d      	ldr	r0, [pc, #52]	; (8002768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002732:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0b      	ldr	r4, [pc, #44]	; (800277c <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800275a:	f7ff ffa5 	bl	80026a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800275e:	f000 f811 	bl	8002784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002762:	f7ff fd39 	bl	80021d8 <main>

08002766 <LoopForever>:

LoopForever:
    b LoopForever
 8002766:	e7fe      	b.n	8002766 <LoopForever>
  ldr   r0, =_estack
 8002768:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002774:	0800282c 	.word	0x0800282c
  ldr r2, =_sbss
 8002778:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800277c:	20000088 	.word	0x20000088

08002780 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC1_COMP_IRQHandler>
	...

08002784 <__libc_init_array>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	2600      	movs	r6, #0
 8002788:	4d0c      	ldr	r5, [pc, #48]	; (80027bc <__libc_init_array+0x38>)
 800278a:	4c0d      	ldr	r4, [pc, #52]	; (80027c0 <__libc_init_array+0x3c>)
 800278c:	1b64      	subs	r4, r4, r5
 800278e:	10a4      	asrs	r4, r4, #2
 8002790:	42a6      	cmp	r6, r4
 8002792:	d109      	bne.n	80027a8 <__libc_init_array+0x24>
 8002794:	2600      	movs	r6, #0
 8002796:	f000 f821 	bl	80027dc <_init>
 800279a:	4d0a      	ldr	r5, [pc, #40]	; (80027c4 <__libc_init_array+0x40>)
 800279c:	4c0a      	ldr	r4, [pc, #40]	; (80027c8 <__libc_init_array+0x44>)
 800279e:	1b64      	subs	r4, r4, r5
 80027a0:	10a4      	asrs	r4, r4, #2
 80027a2:	42a6      	cmp	r6, r4
 80027a4:	d105      	bne.n	80027b2 <__libc_init_array+0x2e>
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	00b3      	lsls	r3, r6, #2
 80027aa:	58eb      	ldr	r3, [r5, r3]
 80027ac:	4798      	blx	r3
 80027ae:	3601      	adds	r6, #1
 80027b0:	e7ee      	b.n	8002790 <__libc_init_array+0xc>
 80027b2:	00b3      	lsls	r3, r6, #2
 80027b4:	58eb      	ldr	r3, [r5, r3]
 80027b6:	4798      	blx	r3
 80027b8:	3601      	adds	r6, #1
 80027ba:	e7f2      	b.n	80027a2 <__libc_init_array+0x1e>
 80027bc:	08002824 	.word	0x08002824
 80027c0:	08002824 	.word	0x08002824
 80027c4:	08002824 	.word	0x08002824
 80027c8:	08002828 	.word	0x08002828

080027cc <memset>:
 80027cc:	0003      	movs	r3, r0
 80027ce:	1812      	adds	r2, r2, r0
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d100      	bne.n	80027d6 <memset+0xa>
 80027d4:	4770      	bx	lr
 80027d6:	7019      	strb	r1, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	e7f9      	b.n	80027d0 <memset+0x4>

080027dc <_init>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr

080027e8 <_fini>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr
