/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include "ADS1204S0x.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define fullscale_voltage 2.5		// fullscale_voltage in Volt
#define bitresulution2 8388608		// 2^24 /2 --> Fullscale positiv

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint32_t measure =0;
uint8_t newtemperatureavailable=0;
float measuredtemperature;

typedef struct {
	float A 	;
	float B 	;
	float C 	;
	float alpha ;
	float R0 	;
	float R_11  ;		// Widerstand um Strom zu messen
}measurement_constants;

measurement_constants pt100 = {
		3.9083e-3,
		-5.775e-7,
		-4.183e-12,
		 3.85e-3,
		 100,
		 2200
};




/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint32_t InitADC(void);
uint32_t readADCChannel(void);
void readADC(uint8_t startadress, uint8_t length, uint8_t *rxdata);
void ADCregwrite(uint8_t startadress, uint8_t data);
uint8_t ADCregread(uint8_t startadress);
void start(void);
void ADC_sendCommand(uint8_t op_code);
uint8_t writeADC(uint8_t startadress, uint8_t length, uint8_t *data);
uint8_t setADCsigleChannel(uint8_t channel);
float calctemperature(float Rtemp);
float calc_R_temperature(uint32_t *rawdata);
uint32_t read_temperature(void);



/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  InitADC();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  /* ToDo
	   * - Berechnungen Widerstand & Temperatur
	   * - Spannungen von Extern Auslesen
	   * - ISR zum Auslesen
	   * - Temperaturmessung ausprobieren
	   * - Temperaturmesseung kallibrieren
	   */

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);


	  read_temperature();

	  //measure=readADCChannel();
	  HAL_Delay(500);


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

uint32_t InitADC(void)
{
	uint8_t txbuf[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	uint8_t rxbuf[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

	HAL_Delay(2.2);
	HAL_GPIO_WritePin(ADC_RESET_GPIO_Port,ADC_RESET_Pin,1); // Set reset
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
	HAL_GPIO_WritePin(ADC_START_GPIO_Port, ADC_START_Pin,0);	// Start by command (Start pin LOW)
	HAL_Delay(10);
	//HAL_GPIO_WritePin(ADC_DRDY_GPIO_Port,ADC_DRDY_Pin, 1);		// Leicht nach oben ziehen

	while(ADCregread(STATUS_REG_ADDR) & ADS_RDY)				// Ready bit 체berpr체fen
	{
		HAL_Delay(5);
	}
	ADCregwrite(STATUS_REG_ADDR, ADCregread(STATUS_REG_ADDR)&~ADS_FL_POR); // Clear FL POR Flag (Redback,...)

	readADC(0x21, 1, rxbuf); 	// Read Statusbyte to rxbuf

	ADC_sendCommand(WAKE_COMMAND);		// Sollte nicht sein, jedoch zur sicherheit
	
	//Set Mode:

	//readADC(0x04,1,rxbuf);	//Read Datarate Register (04h)
	//ADCregwrite(0x02,rxbuf[0]|0x20); // Set Modified Datarateregister (04h)
	//readADC(0x04, 1, rxbuf); 	// Read Statusbyte to rxbuf


	// Select INPUT (INPMUX- Register)

	ADCregwrite(INPMUX_REG_ADDR,(ADS_P_AIN4 | ADS_N_AINCOM));		// Setzen der Eing채nge
	rxbuf[0]=ADCregread(INPMUX_REG_ADDR); 	// Readback


	ADCregwrite(REF_REG_ADDR, (ADS_REFINT_ON_ALWAYS+ADS_REFSEL_INT)); // Set Internal voltage Reference (2.5V Max inputvoltage = 2.5V)
	//ADCregwrite(PGA_REG_ADDR, ADS_PGA_ENABLED);
	//ADC_sendCommand(STOP_COMMAND);
	//ADC_sendCommand(START_COMMAND);

	HAL_GPIO_WritePin(ADC_START_GPIO_Port, ADC_START_Pin,1);

	uint8_t temp=ADCregread(STATUS_REG_ADDR);	// readback status register


	return 0;
}


void ADCregwrite(uint8_t startadress, uint8_t data)
{
	uint8_t txdata[1] = {data};
	writeADC(startadress, 1, txdata);
}

uint8_t ADCregread(uint8_t startadress)
{
	uint8_t rxdata[1] = {0};
	readADC(startadress, 1, rxdata);
	return rxdata[0];
}

void start(void)
{
	ADC_sendCommand(START_COMMAND);
}


uint8_t writeADC(uint8_t startadress, uint8_t length, uint8_t *data)
{
	if(length==0 && length >= REGISTER_COUNT)	// sonst werden keine Daten gesendet, Max register, 0 ist auch ein register! deshalb >=
	{	
		return 0;
	}
	
	uint8_t txdata[length+2];
	txdata[0]= startadress | 0x40; 	// set write command
	txdata[1]= length -1; 	// 0x00 is 1 byte
	
	for(uint8_t i=0; i<length; i++)	// Dateiinhalt in txdata plazieren
	{
		txdata[i+2]= *(data+i);
	}
	
	
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
	HAL_Delay(1);

	HAL_SPI_Transmit(&hspi1,txdata,length+2,10);
	
	HAL_Delay(1);
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
	return 1;
}

void readADC(uint8_t startadress, uint8_t length, uint8_t *rxdata) 	// Speichert r체ckgabe in rxdata
{
	uint8_t txdata[2] = {startadress |0x20 , length-1};	// create array for spi transmit
	
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
	HAL_Delay(1);

	HAL_SPI_Transmit(&hspi1,txdata, length+1, 10);
	HAL_SPI_Receive(&hspi1, rxdata, length, 10);

	HAL_Delay(1);
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
}


void ADC_sendCommand(uint8_t op_code)
{
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
	HAL_Delay(1);

	uint8_t txbuf[1]= {op_code};				//Start Convertion via Command //todo geht nicht pointer?
	HAL_SPI_Transmit(&hspi1,txbuf,1,10);

	HAL_Delay(1);
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
	
}



uint32_t readADCChannel(void) 	// Positive ADC input, Negativ is AINCOM
{
	uint8_t txbuf[3]={0,0,0};
	uint8_t rxbuf[3]={1,1,1};
	uint32_t result=0;
	uint8_t *dStatus;
	uint8_t *dCRC;

	//--------------------------------------------------------------------------------------------------------------------------------------
	// Eigentlich Warten bis Fertig Konvertiert !!!!!!!!!  --> Direct mode
	//while( HAL_GPIO_ReadPin(ADC_DRDY_GPIO_Port, ADC_DRDY_Pin)==1 ); //DRDY Pin active LOW
	//--------------------------------------------------------------------------------------------------------------------------------------
	
	// Read by Command
	ADC_sendCommand(RDATA_COMMAND);	//RDATA => Read Data
	
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin,0);
	HAL_Delay(1);
	
	//todo
	/*
	// if the Status byte is set - grab it
	if( (registers[SYS_ADDR_MASK] & 0x01) == DATA_MODE_STATUS )
	{
		HAL_SPI_Receive(&hspi1, dStatus,1,10);
	}
	*/
	
	HAL_SPI_Receive(&hspi1,rxbuf,3,10); //Read Datarate Register --> Ohne CRC und Status
	
	/*// is CRC enabled?
	uint8_t isCrcEnabled = (registers[SYS_ADDR_MASK] & 0x02) == DATA_MODE_CRC;
	if( (registers[SYS_ADDR_MASK] & 0x02) == DATA_MODE_CRC )
	{
		HAL_SPI_Receive(&hspi1, dCRC,1,10);

		//todo calc CRC
	}
*/

	HAL_Delay(1);
	HAL_GPIO_WritePin(ADC_CS_GPIO_Port,ADC_CS_Pin,1);
	
	result = rxbuf[0];
	result = (result<<8) + rxbuf[1];
	result = (result<<8) + rxbuf[2];

	return result;
	
}

uint8_t setADCsigleChannel(uint8_t channel)
{
	if (channel>5)	// DS124S06 hat nur 5 Kan채le		// TODO (welcher adc wird verwendet
	{		return 0;

	}
	else
	{
		ADCregwrite(INPMUX_REG_ADDR,(channel<<4 | ADS_N_AINCOM));
		return 1;
	}
}

uint32_t read_temperature(void)		//need be called in a while. Flag newtemperatureavaliable is set if set and must be cleared manualy !
{
	static uint32_t rawdata[3];
	static uint8_t rawcounter;


	if (rawcounter>=3 && newtemperatureavailable > 0)
	{
		measuredtemperature= calctemperature( calc_R_temperature(rawdata) );
		newtemperatureavailable = 1;
		rawcounter=0;
		for (uint8_t i=0; i<3; i++)
		{
			rawdata[i]=0;
		}
	}
	else if (newtemperatureavailable > 0)
	{
		setADCsigleChannel(rawcounter);

		HAL_Delay(100);		//todo interrupt
		//while(!HAL_GPIO_ReadPin(ADC_DRDY_GPIO_Port, ADC_DRDY_Pin));
		rawdata[rawcounter]=readADCChannel();	// todo in isr
		rawcounter++;


		// Der rest geschieht in der Interrupt Rutine
	}

	return newtemperatureavailable;

}

float calc_R_temperature(uint32_t *rawdata)		// Berechnung R_temp
{
	// Berechnung: Upt100= ADC0-2xADC1 + ADC2
	uint32_t result_ADCsteps=  	rawdata[0] + rawdata[2] - 2*(rawdata[1]);

	// Steps to voltage
	float result_ADCvoltage = 	(float) (fullscale_voltage * result_ADCsteps / bitresulution2 );		// bitresolution2 for the positive spectrum

	//  R= U/I = U / ( UR_I / R_I ) =  U * R_I / UR_I
	float Voltage_R_11 =  (float) (fullscale_voltage * rawdata[2] / bitresulution2);

	return (result_ADCvoltage * pt100.R_11 / Voltage_R_11 );
}

float calctemperature(float Rtemp)
{
	if(Rtemp>=100)		// ToDo Temperatur >= 0째C
	{
		/* For Calculate the temperature from the Resistance in positve the Callendar-Van Dusen equation is used.
		 * https://en.wikipedia.org/wiki/Resistance_thermometer
		 * 	T= -A + sqrt(A^2 - 4*B *(1- (Rtemp/R0) )) / 2*B
		 */

		return (-pt100.A + sqrt((pt100.A * pt100.A) - 4*pt100.B*(1-(Rtemp/pt100.R0))))	/(2*pt100.B);
	}
	else
	{
		/*
		 * Negative Temperature
		 * For easy calculating, the same formula is used in negative temperature.
		 * He isn't correct because C isn't 0 as in the positive temperature
		 * In this case we get a measurement error
		 * todo for future improuvement a new calculation
		 */

		return (-pt100.A + sqrt((pt100.A * pt100.A) - 4*pt100.B*(1-(Rtemp/pt100.R0))))	/(2*pt100.B);
	}

}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(char *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
